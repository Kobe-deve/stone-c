// Base/battle header file for Stone Crawler
// Developed By: Kobe Runnels
// 1/16/2019 - 4/30/2019

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <windows.h>

typedef int bool; // creates booleon variable
#define true 1
#define false 0

typedef int wpn; // creates the weapon variable
#define sword 1
#define lance 2
#define gun 3
#define bow 4
#define axe 5
#define combo 6

typedef int persona; // for personality traits
#define happy 1
#define sad 2
#define angry 3
#define neutral 4
#define bossy 5
#define lonely 6
#define foolish 9 // new ones in chapter 2
#define demonic 10
#define angelic 11
#define boss1 7
#define boss2 8
#define garl 100
#define evel 101
#define dian 102
#define kageP 103
#define gilg 104
#define drakP 105
#define west 106
#define sarahP 107
#define hired 108

typedef int colors; // for printing images
#define YELLOW 14
#define SILVER 8
#define GREEN 10
#define PINK 13
#define BABY_BLUE 11
#define BLUE 9
#define DARK_RED 4
#define DARK_BLUE 1
#define DARK_GREEN 2
#define DARK_BABY_BLUE 3
#define DARK_YELLOW 6
#define WHITE 15
#define BLACK 16

typedef int align; // used for alignment determination
#define bright 1
#define optimist 2
#define complex 3
#define harsh 4
#define mysteriousCar 5
#define mysterious 6
#define unknown 7

typedef int numbers; // for arrays when printing images (helps make them look nice)
#define A 10
#define B 11
#define C 12
#define D 13
#define E 14
#define F 15
#define G 16
#define H 17
#define I 18
#define J 19
#define K 20
#define L 21
#define M 22
#define N 23

typedef int fortuna; // used for the player's fortune that starts off each day
#define SUN 0
#define OPENING 1
#define ACTION 2
#define CLIMAX 3
#define THOUGHT 4
#define REMINISCE 5
#define TWILIGHT 6
#define JOURNEY 7
#define FREEDOM 8
#define PAUSE 9
#define REALIZATION 10
#define ENDING 11
#define MOON 12 

typedef int scene; // used for printPattern Array and are used to call certain sprites
#define TEST 1
#define TESTER 2
#define CAMPER 3
#define SHOPPER 4
#define START 5
#define LIBRARY 6
#define NIGHTER 100
#define PUB 18
#define M1 7
#define M2 8
#define M3 9
#define M4 10
#define M5 11
#define M6 12
#define M7 13
#define M8 14
#define M9 15
#define M10 16
#define M11 17
#define M12 109
#define M13 110
#define M14 111
#define M15 112
#define M16 113
#define M17 114
#define M18 115
#define M19 116
#define M20 117
#define SWOR 101
#define LANR 102
#define AXER 103
#define GUNR 104
#define BOWR 105
#define COMR 106
#define THE_TEST 107
#define BACK_ROOM 108

struct weapon // the weapon structure
{
	char label[20]; // the name of the weapon
	int ATT; // the attack value the weapon has
	int lvl; // the weapon's level
	int value; // how much the weapon is (for selling)
	wpn type; // what type of weapon is it?
	int chamber; // is this weapon one that has a bullet chamber? If not it has zero
};

struct monster // the monster structure
{
	char data[20]; // the name of the monster
	int health; // health of the monster
	int maxHP; // the max HP of the monster
	int attac; // attack of the monster
	int speed; // agility of the monster
	int reflect; // defense of the monster
	int lv; // level of the monster
	int exp; // the xp points for the monster
	int maxExp; // the max xp points for the monster
	persona personality; // the personality of the monster
	wpn weakness; // the weakness of the monster 
	wpn type; // the attack type the monster has
	bool humanPerson; // is the monster a human who can't be fused?
	scene look; // which type of monster graphics are they?
} enemy;	

char name[20]; // the player's name
int health; // the player's current health
int maxHealth; // the player's maximum health
int attack; // base attack stat
int ammunition; // total ammunition
int defense; // base defense stat
int agility; // base agility stat
int level; // the player's level
int experience; // xp 
int money; // money the player has
int spirit; // the player's spirit points
wpn weakness; // the weakness of the player
int maxXP; // the max xp ceiling for a level up
int party[3] = {-1,-1,-1}; // stores which monsters are in the party right now

// spells
int plasmaLv; // the plasma spell lv
int magicSwordLv; // the magic sword spell lv
int aid; // the aid spell lv
int createSprtlv; // the create spirit lv

int equipped; // the equipped weapon the player currently has

// Alignment Variables
// NOTE: evil does not equal bad, I just used these variables so I could easily identify traits to add
int evil = 0; // the evil alignment stat
int good = 0; // the good alignment stat
int neutrala = 0; // the neautral alignment stat

struct weapon storage[10]; // stores the weapons the player has
struct monster inbox[20]; // stores the monsters the player has

int chapter; // what chapter the player is on?
int area; // where is the current player in the world of the game?
int x; // coords of the player
int y; // 
int day; // what day is it since the player started?
int timee; // what time is it? 

int food = 0; // the amount of food the player has

int floors[7] = {1,1,1,1,1,1,1}; // what floor the player is on for each dungeon
int maxFloors[7] = {1,1,1,1,1,1,1}; // what is the max floor that player has been on for each dungeon?
 
int coord1[2] = {1,1}; // organizes the coordinates of the player in each respective dungeon
int coord2[2] = {1,1}; //
int coord3[2] = {1,1}; //
int coord4[2] = {1,1}; //
int coord5[2] = {1,1}; //
int coord6[2] = {1,1}; //
int coord7[2] = {1,1}; //

int garland = 1; // what's the social rank with Garland?
int westland = 1; // what's the social rank with Westland?
int drake = 1; // what's the social rank with Drake?
int evelia = 1; // what's the social rank with evelia?
int sarah = 1; // what's the social rank with sarah?
int diantra = 1; // what's the social rank with diantra?
int kage = 1; // what's the social rank with kage?
int gilgahin = 1; // what's the social rank with gilgahin?
int gilagila = 0; // when conversating with gila in battle

bool Gar = false; // is a character in the party right now?
bool Wes = false; // Note: Besides Westland, true can also mean
bool Dra = false; // that the character cannot be accessed to anymore
bool Eve = false;
bool Sar = false;
bool Dia = false;
bool Kag = false;
bool Gil = false; 

bool demonKind; // did the player fuse with something?
int sparedFoes; // keeps track of how many enemies the player spared
bool visitedBack; // did the player visit the back room?
bool gilaSpare; // did the player spare Gila?
bool inJail; // did the player get thrown in jail?

int recentMember = 0; // which number inbox monster was recently added? (prevents them from leveling up

char user1[20]; // the name in the first file
char user2[20]; // the name in the second file
char user3[20]; // the name in the last file

bool talker = false; // did the player win by talking?

int enemyDodger; // used to determine what kind of attack the enemy will dodge

bool repellantUsed = false; // is the player using the repellant?

bool endingUsed = false; // did the player come back to life?

int fortune; // the player's fortune

int coordInfy = 20; // coordinates when walking in the infinity plane
int coordInfx = 20; 

bool demoStatus = false; // is the player in a demo? (this prevents them from getting to chapter 2)

int currentLocation; // what dungeon is the player current in?

bool drakeTransform = false; // is drake in his dragon form?

bool talkedThis = false; // used in combat to see if the player didn't already get a race specific conversation

bool talkedWith[7][7] = {{false,false,false,false,false,false,false},
						 {false,false,false,false,false,false,false},
						 {false,false,false,false,false,false,false},
						 {false,false,false,false,false,false,false},
						 {false,false,false,false,false,false,false},
						 {false,false,false,false,false,false,false},
						 {false,false,false,false,false,false,false}};  

int backRoom[20][80] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,C,C,C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,C,C,E,0,C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,5,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,C,0,0,C,E,0,C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,C,0,C,C,E,0,C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,C,0,C,0,C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,C,C,C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,5,3,0,0,5,0,0,0,0,0,0,0,0,0,6,6,6,7,7,7,7,7,0,0,0,0,0,0,0,0,A,0,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,5,5,0,3,0,5,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,7,0,0,0,0,0,0,0,0,0,8,0,8,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,5,0,5,0,0,3,5,0,0,0,0,0,0,0,0,6,0,0,0,0,6,7,0,0,0,0,0,0,0,0,0,0,8,8,0,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,5,0,0,3,3,3,3,3,0,0,0,0,0,0,0,6,6,0,0,0,0,7,6,0,0,0,0,0,0,0,0,0,0,8,9,9,9,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,0,0,0,6,0,0,6,0,0,7,0,0,6,0,0,0,0,0,0,0,0,0,8,0,0,0,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int library[20][80] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,A,B,C,E,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,2,0,0,0,0,A,B,0,C,E,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,7,8,7,6,0,0,0,0,0,2,0,0,0,A,B,0,0,C,E,2,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,E,E,E,E,0,0,6,8,7,8,7,6,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,2,B,C,D,A,5,7,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,E,F,F,0,0,0,6,8,7,8,7,6,0,6,6,6,6,2,9,A,0,0,5,A,6,5,8,2,0,0,0,0,0,2,B,C,D,A,5,7,2,0,0,0,E,E,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,E,F,F,0,0,0,6,8,7,8,G,6,0,0,F,F,6,2,9,0,A,0,5,A,6,5,8,2,0,0,0,0,0,2,B,C,D,A,5,7,2,0,0,0,0,F,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,E,E,E,E,0,0,6,8,7,8,7,6,0,6,6,6,6,2,9,0,0,A,5,A,6,5,8,2,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,E,E,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,C,C,C,C,0,0,6,8,7,8,7,6,0,9,9,9,9,2,2,2,2,2,2,2,2,2,2,2,0,8,8,8,0,2,7,A,0,0,B,C,2,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,0,F,F,C,0,0,6,8,7,8,7,6,0,9,F,F,0,2,6,6,6,6,2,6,6,6,6,2,0,0,F,8,0,2,0,7,A,0,B,C,2,0,0,0,6,F,F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,C,C,C,C,0,0,6,6,6,6,6,6,0,9,9,9,9,2,6,6,6,6,2,6,6,6,6,2,0,8,8,8,0,2,0,0,7,A,B,C,2,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,B,B,B,B,0,0,0,0,0,0,0,0,0,8,8,8,8,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,0,2,2,2,2,2,2,2,2,0,C,C,C,C,0,C,C,C,C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,B,F,F,0,0,0,0,0,0,0,0,0,0,0,F,F,8,0,0,0,0,0,0,0,0,0,0,0,F,F,F,5,0,0,0,0,0,0,0,0,0,0,C,F,F,0,0,C,F,F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,B,B,B,B,0,0,0,0,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,C,C,C,C,0,C,C,C,C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int starter[20][55] = { 0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,9,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,1,1,9,1,0,0,0,0,0,0,1,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,1,1,9,9,1,0,0,0,0,0,0,0,1,9,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,1,0,0,0,0,0,1,9,9,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,9,9,1,0,0,0,0,0,0,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,
						0,0,0,0,0,0,0,0,1,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,9,9,1,0,0,0,0,
						0,0,0,0,0,0,0,1,1,9,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,9,1,0,0,0,0,
						0,0,0,0,0,0,0,0,1,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int title[10][80] = { 0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					  0,4,0,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					  0,4,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				      0,0,4,4,4,0,0,0,4,0,0,0,0,4,4,0,0,4,0,4,4,0,0,0,4,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0,4,0,0,4,0,0,0,4,0,0,4,0,4,4,0,0,4,0,4,0,0,4,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,
					  0,0,0,0,0,4,0,0,4,0,0,0,4,0,0,4,0,4,0,0,0,4,0,4,4,4,4,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,
					  0,0,4,4,4,0,0,0,0,4,0,0,0,4,4,0,0,4,0,0,0,4,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,
					  0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,4,4,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
				      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0};
					  				  
int mainCamp[20][80] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,15,15,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,15,15,15,15,15,0,0,1,1,1,1,11,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,15,15,15,15,15,15,15,15,1,1,1,1,11,11,1,0,0,0,0,0,0,0,0,0,0,0,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,11,11,11,11,1,0,0,0,0,0,0,0,0,0,0,4,6,6,6,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,1,1,1,1,11,11,11,11,11,11,1,0,0,0,0,0,0,0,0,0,4,0,6,6,6,0,0,0,0,0,10,15,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,1,1,1,1,11,11,11,11,11,11,11,11,1,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,10,15,15,15,10,15,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,1,8,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,1,1,1,1,11,11,11,11,11,11,11,11,11,11,1,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,10,15,15,15,15,15,10,15,15,10,10,0,0,0,0,0,0,0,0,0,0,0,8,1,1,1,1,8,1,8,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,1,1,1,1,11,11,11,11,11,16,16,11,11,11,11,11,1,0,0,0,0,0,0,4,0,0,0,0,0,0,10,15,15,16,15,15,15,15,10,15,15,15,10,0,0,0,0,0,0,0,0,0,8,1,1,16,1,1,8,1,1,8,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,1,1,1,1,11,11,11,11,11,16,16,16,16,11,11,11,11,11,1,0,0,0,0,0,4,0,0,0,0,0,10,15,15,16,16,16,15,15,15,15,10,15,15,15,10,0,0,0,0,0,0,0,8,1,1,16,16,1,1,8,1,1,8,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,1,1,1,1,11,11,11,11,11,16,16,16,16,16,16,11,11,11,11,11,1,0,0,0,0,4,0,0,0,0,10,15,15,16,16,16,16,16,15,15,15,15,10,15,15,15,10,0,0,0,0,0,8,1,1,16,16,16,16,1,1,8,1,1,8,0,0,0,0,0,0,0,0,0,0,
						2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int shop[20][80] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,4,F,4,F,4,F,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,4,F,4,F,4,F,4,4,0,0,0,0,0,0,E,E,E,E,E,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,E,E,E,E,E,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,4,4,F,F,F,F,F,4,4,0,0,0,0,0,0,E,E,E,E,E,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,0,0,0,0,0,8,8,8,8,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,8,1,1,3,1,8,0,0,0,8,1,3,1,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,3,8,8,1,1,8,8,0,0,0,8,8,1,1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,G,G,G,G,G,G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,3,0,8,3,8,8,1,8,8,8,8,8,1,8,8,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,G,8,8,8,8,8,G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,3,0,0,8,1,6,1,1,8,0,8,0,8,3,6,1,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,8,G,8,8,8,8,8,G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,
					0,0,0,0,0,0,0,3,0,0,F,8,1,6,6,1,8,F,8,F,8,1,6,6,1,8,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,G,G,8,8,G,8,8,8,8,8,G,F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,
					0,0,0,0,0,0,3,0,0,F,F,8,1,6,3,1,8,F,8,F,8,1,1,6,1,8,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,G,8,8,G,8,8,8,8,8,G,F,F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,
					0,0,0,0,0,3,0,0,F,F,F,8,1,1,1,1,8,F,8,F,8,1,1,1,1,8,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,G,8,G,8,8,8,8,8,G,F,F,F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,
					0,0,0,0,3,0,0,F,F,F,F,F,8,8,8,8,F,F,8,F,F,8,8,8,8,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,G,G,8,8,8,8,8,G,F,F,F,F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,
					0,0,0,3,0,0,F,F,F,F,F,F,F,F,F,F,F,F,8,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,G,8,8,8,8,8,G,F,F,F,F,F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0};

int pub[20][80] = {	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,0,0,0,0,0,0,0,G,0,0,0,0,0,0,0,0,0,0,1,3,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,G,G,G,G,G,G,0,0,0,0,0,0,0,0,0,0,1,0,0,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,G,7,1,7,0,0,G,0,0,0,0,0,0,0,0,0,0,1,0,0,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,8,7,B,7,B,7,B,7,B,7,B,7,8,0,0,0,0,0,0,0,0,0,0,0,G,1,7,1,0,0,G,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,8,7,1,7,1,7,1,7,1,7,1,7,8,0,0,0,0,0,0,0,0,0,0,0,G,1,0,1,0,0,G,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,8,7,7,7,7,7,7,7,7,7,7,7,8,0,0,0,0,0,0,0,0,0,0,0,G,G,G,G,G,G,G,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,8,7,B,7,B,7,B,7,B,7,B,7,8,0,0,0,0,0,0,0,0,0,0,G,0,0,0,0,0,0,0,G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,4,1,1,4,1,1,4,1,1,4,1,4,6,6,6,6,E,6,6,6,6,4,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,0,0,0,0,4,4,4,4,4,4,0,0,0,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,4,4,1,1,4,1,1,4,1,1,4,4,6,6,E,6,6,6,E,6,6,4,0,0,0,0,0,0,0,0,4,6,6,6,6,6,6,4,0,0,4,6,6,6,6,6,6,4,0,0,4,6,6,6,6,6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,4,1,4,1,1,4,1,1,4,1,1,4,6,6,6,6,E,6,6,6,6,4,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,0,0,0,0,4,4,4,4,4,4,0,0,0,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,4,0,0,0,0,0,0,0,0,0,0,0,6,E,0,0,0,0,0,0,0,0,6,E,0,0,0,0,0,0,0,0,6,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,E,0,0,0,0,0,0,0,0,6,E,0,0,0,0,0,0,0,0,6,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,E,6,0,0,0,0,0,0,6,6,E,6,0,0,0,0,0,0,6,6,E,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int garlan[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  	  0,0,0,0,0,0,0,0,0,G,G,0,0,0,0,0,0,0,0,0,
				      0,0,0,0,0,0,0,0,G,8,7,G,0,0,0,0,0,0,0,0,
				  	  0,0,0,0,0,G,G,G,C,7,7,C,G,G,G,0,0,0,0,0,
				  	  0,0,0,0,G,4,4,8,8,C,C,7,7,4,4,G,0,0,0,0,
				  	  0,0,0,G,4,4,6,6,8,7,7,7,6,4,4,4,G,0,0,0,
				  	  0,0,0,G,4,6,6,6,6,8,7,4,4,4,4,4,4,G,0,0,
				  	  0,0,G,4,8,6,6,6,6,6,6,4,4,4,4,4,4,G,0,0,
				  	  0,G,4,8,8,8,6,6,6,6,6,4,4,4,4,4,4,G,0,0,
				  	  0,G,4,8,8,8,4,6,6,6,6,4,4,4,4,4,4,G,0,0,
				  	  0,G,8,8,8,8,4,1,6,6,6,6,4,4,4,4,4,G,0,0,
				  	  0,G,8,8,8,4,4,1,1,1,1,7,7,7,4,4,4,G,0,0,
				  	  0,G,7,7,7,4,1,1,1,1,1,1,7,7,7,4,4,G,0,0,
				  	  G,6,7,7,6,6,6,6,6,6,6,6,6,7,7,7,4,G,0,0,
				  	  0,G,4,7,7,1,1,1,1,0,G,4,7,7,7,4,G,0,0,0,
				  	  G,4,4,4,3,3,1,1,0,G,4,7,7,7,4,4,G,0,0,0,
				  	  G,4,4,4,3,3,3,0,G,4,4,4,4,4,4,4,G,0,0,0,
				  	  G,4,G,3,3,3,3,G,4,4,4,4,4,4,G,G,0,0,0,0,
				  	  G,G,0,G,G,G,G,G,G,G,G,G,G,G,0,0,0,0,0,0};	

int m1[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,G,G,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,G,G,G,G,B,8,8,G,0,0,
				  0,0,0,0,0,0,0,G,G,G,B,B,B,B,8,8,B,G,0,0,
				  0,0,0,0,0,G,G,8,8,8,8,B,B,8,8,B,B,G,0,0,
				  0,0,0,0,G,4,8,4,4,4,8,8,8,8,B,B,B,B,G,0,
				  0,0,0,G,4,F,F,4,4,4,4,4,4,4,B,B,B,B,G,0,
				  0,0,G,4,F,F,G,F,4,4,4,4,4,4,4,B,B,B,G,0,
				  0,0,G,F,G,F,G,G,F,4,4,4,4,4,4,G,B,B,G,0,
				  0,0,G,F,G,G,F,G,F,F,4,4,4,4,G,G,B,B,G,0,
				  0,0,G,F,F,G,F,F,F,F,4,4,4,4,G,0,G,G,0,0,
				  0,0,G,4,F,F,F,F,F,F,F,4,4,4,G,0,0,0,0,0,
				  0,G,4,4,4,F,F,F,F,F,F,4,4,4,G,0,0,0,0,0,
				  0,G,4,4,G,G,F,F,F,F,F,G,4,4,G,0,0,0,0,0,
				  0,G,4,4,G,0,G,G,F,F,F,G,4,4,G,0,0,0,0,0,
				  0,0,G,G,0,0,0,0,G,G,G,0,4,4,G,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,G,G,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int m2[20][20] = {0,0,0,0,0,0,0,0,0,0,G,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,G,B,G,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,G,B,B,B,G,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,G,B,B,B,B,B,G,0,0,0,0,0,0,
				  0,0,0,0,0,0,G,B,B,B,G,B,B,B,G,0,0,0,0,0,
				  0,0,0,0,0,G,B,E,8,B,G,B,B,B,B,G,G,G,G,0,
				  0,0,0,0,G,B,B,B,8,8,B,B,B,B,5,5,5,5,5,G,
				  0,0,0,G,B,B,B,8,B,E,B,B,B,2,2,2,2,5,G,0,
				  0,0,0,G,B,B,8,B,B,B,E,B,B,B,B,2,5,G,0,0,
				  0,0,G,B,B,8,B,B,B,B,B,E,B,B,B,B,5,G,0,0,
				  0,0,G,8,8,B,B,B,B,B,B,B,E,B,B,B,B,5,G,0,
				  0,G,8,8,8,E,E,B,B,B,B,B,B,E,B,B,B,5,5,G,
				  0,G,8,8,B,B,B,E,E,B,B,B,B,B,E,B,B,5,G,0,
				  0,0,G,G,B,B,B,B,B,E,E,E,E,E,E,E,G,G,0,0,
				  0,0,0,0,G,B,B,B,B,B,B,B,B,B,B,G,0,0,0,0,
				  0,0,0,0,0,G,B,B,B,B,B,B,B,B,G,0,0,0,0,0,
				  0,0,0,0,0,0,G,B,B,B,B,B,B,G,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,G,G,B,B,G,G,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,G,G,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int m3[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,G,0,0,0,G,G,0,0,0,
				  0,0,0,0,0,G,G,0,0,0,G,8,G,0,G,4,4,G,0,0,
				  0,0,0,0,G,4,4,G,G,G,8,8,8,G,4,4,F,4,G,0,
				  0,0,0,G,4,4,F,4,0,8,8,8,8,G,4,4,4,4,G,5,
				  0,0,0,G,4,4,4,F,8,8,8,8,B,0,B,4,4,0,5,5,
				  0,0,0,0,G,4,4,B,8,8,8,6,6,B,B,B,B,5,5,5,
				  0,0,0,G,B,6,6,6,6,6,6,6,B,F,B,B,5,5,5,5,
				  0,0,0,G,B,6,6,6,6,6,6,6,B,B,B,F,5,5,5,5,
				  0,0,G,B,B,B,6,6,6,6,6,6,6,B,B,5,5,5,5,5,
				  0,G,1,B,B,0,6,6,6,6,6,6,0,0,B,5,5,5,5,G,
				  G,1,1,1,G,0,1,6,6,6,6,0,0,0,1,1,F,5,5,G,
				  0,G,1,G,G,0,1,1,1,1,1,1,0,0,1,1,1,1,G,0,
				  0,0,G,0,G,1,1,1,1,1,1,1,1,0,1,1,1,G,0,0,
				  0,0,0,0,G,1,1,1,G,1,1,1,1,0,0,F,G,0,0,0,
				  0,0,0,0,G,8,8,G,0,G,1,1,1,1,0,F,G,0,0,0,
				  0,0,0,G,8,8,8,G,0,0,G,1,1,8,F,G,0,0,0,0,
				  0,0,0,0,G,G,G,0,0,0,G,8,8,8,F,G,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,G,8,8,8,G,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,G,8,8,8,0,0,0,0,0};

int m4[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,G,G,G,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,G,0,G,8,F,F,G,0,0,0,0,0,G,0,0,0,0,
				  0,0,G,2,G,8,8,F,F,F,G,0,0,0,G,2,G,0,0,0,
				  0,G,2,2,8,G,8,8,G,F,F,G,0,G,2,2,2,G,0,0,
				  G,2,4,2,8,G,8,F,G,F,F,G,G,2,2,2,4,2,G,0,
				  G,2,2,4,8,8,F,F,F,F,F,G,2,4,2,4,2,2,G,0,
				  G,0,2,2,4,8,2,B,F,F,G,2,2,2,4,2,2,2,G,0,
				  0,G,2,4,2,7,2,B,B,0,2,B,B,8,2,4,2,G,0,0,
				  0,0,G,2,2,2,7,4,4,B,B,2,8,2,2,2,G,0,0,0,
				  0,0,0,G,G,2,2,4,4,2,2,8,2,2,2,G,0,0,0,0,
				  0,0,0,G,2,2,2,B,B,2,2,2,2,G,G,0,0,0,0,0,
				  0,0,G,2,2,2,2,B,2,2,2,G,G,0,0,0,0,0,0,0,
				  0,G,2,2,2,2,B,B,2,2,2,2,G,0,0,0,0,0,0,0,
				  0,0,G,2,2,B,B,2,2,2,2,2,2,G,0,0,0,0,0,0,
				  0,0,0,G,B,B,G,G,2,2,2,2,2,G,0,0,0,0,0,0,
				  0,0,0,0,G,G,0,0,G,G,2,2,G,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,G,G,0,0,0,0,0,0,0,0};

int m5[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,G,G,G,G,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,G,F,F,F,F,G,0,0,0,0,0,
				  0,0,0,G,0,0,0,0,G,F,F,F,F,G,F,G,0,0,0,0,
				  0,0,G,4,G,0,0,G,F,F,F,G,F,F,F,G,0,0,0,0,
				  0,G,4,F,4,G,G,F,F,F,F,F,F,E,E,E,G,0,0,0,
				  G,4,4,4,F,1,F,F,F,F,F,F,E,E,E,E,E,G,0,0,
				  G,4,4,4,1,1,1,1,F,F,F,9,1,E,E,E,E,G,0,0,
				  G,4,4,1,1,1,1,1,9,1,1,1,9,1,4,4,G,0,0,0,
				  0,G,G,G,1,1,1,1,1,9,1,9,1,G,G,G,0,0,0,0,
				  0,0,0,0,G,1,1,1,9,1,1,1,G,0,0,0,0,0,0,0,
				  0,0,0,G,3,3,3,3,1,1,1,3,G,0,0,0,0,0,0,0,
				  0,0,0,G,3,3,3,3,3,3,3,3,G,0,0,0,0,0,0,0,
				  0,0,0,0,G,3,3,3,3,3,3,G,0,0,0,0,0,0,0,0,
				  0,0,0,0,G,F,3,3,3,G,F,G,0,0,0,0,0,0,0,0,
				  0,0,0,G,F,G,G,G,G,0,G,F,G,0,0,0,0,0,0,0,
				  0,0,G,F,G,0,0,0,0,0,0,G,F,G,0,0,0,0,0,0,
				  0,G,F,G,F,G,0,0,0,0,G,F,G,F,G,0,0,0,0,0,
				  0,0,G,0,G,0,0,0,0,0,0,G,0,G,0,0,0,0,0,0};

int m7[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,G,0,0,0,0,G,G,0,0,0,0,0,0,0,
				  0,0,0,0,0,G,4,G,0,0,G,4,G,0,0,0,0,0,0,0,
				  0,0,0,0,G,4,4,4,G,G,4,G,0,0,0,0,0,0,0,0,
				  0,0,0,G,4,4,4,4,4,4,G,0,0,0,0,0,0,0,0,0,
				  0,0,G,4,4,4,4,4,G,G,3,G,0,0,0,0,0,0,0,0,
				  0,0,0,G,4,4,4,4,3,3,G,3,G,G,G,G,0,0,0,0,
				  0,0,0,0,G,4,4,F,G,F,3,3,3,E,E,E,G,0,0,0,
				  0,0,0,0,G,4,3,F,G,F,3,3,3,E,E,E,E,G,0,0,
				  0,0,0,G,4,G,3,F,F,F,3,3,3,E,E,G,G,0,0,0,
				  0,0,G,4,G,0,G,3,3,3,3,3,3,G,G,0,0,0,0,0,
				  0,0,G,G,0,0,G,3,3,3,3,3,G,0,0,0,0,0,0,0,
				  0,0,0,0,0,G,B,B,G,G,G,B,B,G,0,0,0,0,0,0,
				  0,0,0,0,0,0,G,G,0,0,0,G,G,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int m6[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,0,0,
				  0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,G,G,6,G,0,
				  0,0,0,0,8,0,0,0,G,G,0,0,0,G,G,6,6,6,G,0,
				  0,0,8,0,0,0,0,G,5,5,G,G,G,6,6,6,6,G,0,0,
				  0,0,0,8,0,0,G,E,5,5,5,6,6,6,6,6,G,0,0,0,
				  0,0,0,0,0,G,5,5,5,E,E,6,6,6,6,G,0,0,0,0,
				  0,0,0,0,G,5,E,E,5,5,6,6,6,G,G,0,0,0,0,0,
				  0,0,0,0,G,5,5,5,E,5,6,G,G,0,0,0,8,0,0,0,
				  0,0,0,G,6,6,6,5,5,6,7,7,G,0,0,8,0,0,0,0,
				  0,0,G,6,6,6,6,6,6,6,7,7,G,0,0,0,0,0,0,0,
				  0,0,G,6,6,6,G,6,6,6,6,7,7,G,0,0,0,0,0,0,
				  0,G,6,6,6,G,0,G,6,6,6,7,7,G,0,0,0,0,0,0,
				  0,G,6,6,6,G,0,G,6,6,6,6,7,7,G,0,0,0,0,0,
				  0,0,G,6,6,6,G,0,G,6,6,6,7,7,G,0,0,0,0,0,
				  0,0,0,G,6,6,G,0,G,6,6,6,G,G,0,0,0,0,0,0,
				  0,0,0,0,G,G,0,0,0,G,6,G,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,8,0,0,0,G,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int m8[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,G,G,G,G,G,G,G,G,G,G,G,0,0,0,0,
				  0,0,0,0,G,4,4,4,4,5,5,5,5,5,5,5,G,0,0,0,
				  0,0,0,G,4,4,4,4,4,4,D,5,G,G,G,G,0,0,0,0,
				  0,0,0,G,4,4,4,4,4,4,D,D,5,5,5,G,0,0,0,0,
				  0,0,0,G,4,4,4,4,4,4,D,5,5,G,G,0,0,0,0,0,
				  0,0,0,G,4,3,4,3,3,4,5,G,G,0,0,0,0,0,0,0,
				  0,0,0,G,4,4,4,4,4,4,G,0,G,0,G,0,0,0,0,0,
				  0,0,0,G,4,4,3,4,4,4,G,G,4,G,4,G,0,0,0,0,
				  0,0,0,G,4,4,3,4,4,4,G,4,4,4,4,4,G,0,0,0,
				  0,0,0,0,G,4,4,4,4,0,5,4,4,4,4,4,G,0,0,0,
				  0,0,0,0,G,G,G,5,5,5,G,G,4,G,4,G,0,0,0,0,
				  0,0,0,G,4,5,5,D,D,5,G,0,G,0,G,0,0,0,0,0,
				  0,0,G,4,4,4,G,5,5,G,5,G,G,0,0,0,0,0,0,0,
				  0,G,4,4,4,4,G,5,G,0,G,5,4,G,0,0,0,0,0,0,
				  0,0,G,4,4,G,G,4,4,G,G,4,4,4,G,0,0,0,0,0,
				  0,0,0,G,G,G,4,4,4,G,G,4,4,4,4,G,0,0,0,0,
				  0,0,0,0,0,0,G,G,G,0,0,G,G,G,G,0,0,0,0,0};


int m9[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,G,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,G,9,G,0,G,G,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,G,9,G,G,3,3,G,0,0,
				  0,0,0,0,0,0,0,0,0,0,G,9,9,G,3,B,B,3,G,0,
				  0,0,0,0,0,0,0,0,0,0,G,9,1,9,B,B,B,B,3,G,
				  0,0,0,0,G,G,0,0,G,G,3,9,1,1,9,B,B,B,3,G,
				  0,0,0,G,3,3,G,G,3,3,9,1,B,1,1,9,B,B,3,G,
				  0,0,0,G,3,B,3,3,B,B,9,B,1,1,1,1,9,3,G,0,
				  0,0,0,G,3,B,B,B,B,B,9,B,1,1,1,9,B,3,G,0,
				  0,0,0,0,G,3,3,3,3,9,1,1,1,1,9,3,3,G,0,0,
				  0,0,0,0,0,G,G,G,G,9,1,1,9,9,G,G,G,0,0,0,
				  0,0,0,0,0,0,0,0,G,9,9,9,G,G,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,G,G,G,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


int m10[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,G,G,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,G,3,4,G,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,G,G,G,3,3,4,4,G,G,G,G,0,0,0,0,0,0,0,
				   0,G,1,9,G,3,3,3,4,G,1,9,1,G,0,0,0,0,0,0,
				   0,G,9,1,1,1,3,4,1,1,1,9,1,G,0,0,0,0,0,0,
				   G,1,9,1,1,1,1,1,6,1,1,1,9,1,G,0,0,0,0,0,
				   G,9,1,1,1,1,1,9,6,6,1,1,1,9,1,G,0,0,0,0,
				   0,G,9,1,1,1,1,9,1,6,6,1,1,1,9,G,0,0,0,0,
				   0,G,9,1,1,1,1,1,9,6,6,1,9,1,9,1,G,0,0,0,
				   G,9,1,1,1,1,1,1,9,1,G,1,9,1,1,1,G,0,0,0,
				   G,9,1,1,1,9,1,1,1,G,7,7,G,9,1,1,1,G,0,0,
				   0,G,9,1,1,1,9,1,G,7,7,G,1,9,1,1,1,G,0,0,
				   0,G,9,1,1,1,9,G,7,7,G,8,8,1,9,1,1,1,G,0,
				   0,0,G,9,G,1,G,7,7,G,9,8,8,1,9,1,9,1,G,0,
				   0,0,0,G,3,G,7,7,G,1,9,8,8,1,9,1,9,1,G,0,
				   0,0,G,3,3,7,7,G,9,1,1,9,8,1,9,1,9,1,G,0,
				   0,G,3,3,3,3,3,3,G,9,G,8,8,9,1,9,1,1,G,0,
				   0,G,3,3,3,3,G,G,G,G,0,G,9,9,1,9,1,1,G,0,
				   0,G,G,G,G,G,0,0,0,0,0,G,G,G,G,G,G,G,0,0};
				   
int m12[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,G,G,G,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,G,8,8,G,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,G,8,8,8,G,0,0,0,0,0,0,
				   0,0,0,0,G,G,0,0,G,8,8,8,G,0,0,0,0,0,0,0,
				   0,0,0,0,G,4,G,G,8,8,8,G,0,0,0,0,0,0,0,0,
				   0,0,G,G,G,G,4,8,8,8,G,0,0,0,0,0,0,0,0,0,
				   0,0,G,1,1,1,4,4,8,G,0,0,0,0,0,0,0,0,0,0,
				   0,0,G,1,1,1,1,4,4,G,0,0,0,0,0,0,0,0,0,0,
				   0,0,G,1,1,1,1,1,G,4,G,0,0,0,0,0,0,0,0,0,
				   0,0,G,4,1,1,1,1,1,G,G,0,0,0,0,0,0,0,0,0,
				   0,G,4,G,G,G,1,1,1,1,1,G,0,0,0,0,0,0,0,0,
				   G,4,G,0,0,0,G,1,1,1,1,1,G,0,0,0,0,0,0,0,
				   G,G,0,0,0,0,G,1,1,7,7,7,1,G,0,0,0,0,0,0,
				   0,0,0,G,G,G,1,1,1,7,G,7,1,1,G,G,G,0,0,0,
				   0,0,G,3,3,1,1,1,1,1,1,1,1,1,1,3,3,G,0,0,
			       0,G,3,G,G,3,3,3,3,3,3,3,3,3,3,3,G,3,G,0,
				   0,0,G,0,0,G,3,G,G,G,G,G,G,3,G,G,0,G,0,0,
				   0,0,0,0,0,0,G,0,0,0,0,0,0,G,0,0,0,0,0,0};

int m13[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,G,G,G,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,G,2,2,2,G,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,G,2,2,4,2,2,G,0,0,0,0,0,0,0,
				   0,0,0,0,0,G,2,4,2,2,4,2,2,G,0,0,0,0,0,0,
				   0,0,0,0,0,G,2,2,4,2,2,2,2,G,0,0,0,0,0,0,
				   0,0,0,0,0,G,2,2,2,2,4,2,2,G,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,2,2,4,2,2,G,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,G,3,2,2,2,3,G,0,0,0,0,0,0,0,
				   0,0,0,0,0,G,3,3,3,3,3,3,3,G,0,0,0,0,0,0,
				   0,0,0,0,0,G,3,3,3,3,3,3,3,G,0,0,0,0,0,0,
				   0,0,0,0,0,0,G,3,3,3,3,3,G,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,G,7,7,G,7,7,G,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,G,7,7,G,7,7,G,0,0,0,0,0,0,0,
			       0,0,0,0,0,0,0,G,G,0,G,G,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int m14[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,G,G,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,G,3,3,G,0,G,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,G,3,3,3,3,G,4,G,0,0,0,0,0,0,0,0,0,
				   0,0,G,1,3,3,1,3,4,G,4,G,0,0,0,0,0,0,0,0,
				   0,0,G,1,3,0,1,3,3,0,G,4,G,0,0,0,0,0,0,0,
				   0,0,0,G,1,G,1,3,3,3,0,G,4,G,0,0,0,0,0,0,
				   0,0,0,0,G,4,1,1,3,3,G,4,G,0,0,0,0,0,0,0,
				   0,0,0,G,4,0,0,1,3,4,4,G,0,0,0,0,0,0,0,0,
				   0,0,0,0,G,4,0,4,4,3,3,G,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,G,4,G,1,3,3,G,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,G,0,1,3,3,G,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,G,1,1,3,3,3,G,0,0,0,0,0,0,0,
				   0,0,0,0,0,G,1,1,1,3,G,G,3,G,0,0,0,0,0,0,
				   0,0,0,0,0,G,1,1,3,G,3,3,3,G,0,0,0,0,0,0,
			       0,0,0,0,0,0,G,1,G,0,G,3,G,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,G,0,0,0,G,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int m15[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,G,G,0,0,0,G,G,G,G,0,0,0,0,0,0,
				   0,0,0,0,G,3,3,G,0,G,3,3,F,7,G,0,0,0,0,0,
				   0,0,0,G,3,3,3,3,G,3,3,F,G,F,7,G,0,0,0,0,
				   0,0,0,G,3,3,3,3,3,4,4,F,G,F,7,G,0,0,0,0,
				   0,0,G,3,3,3,3,3,1,1,4,4,F,F,7,G,0,0,0,0,
				   0,0,G,2,3,3,3,1,1,1,4,4,1,F,7,G,0,0,0,0,
				   0,G,3,3,2,3,1,1,1,4,4,3,1,1,7,G,0,0,0,0,
				   0,G,3,3,3,1,1,1,4,4,4,4,3,1,3,3,G,0,0,0,
				   G,3,3,G,3,1,1,3,4,4,4,4,4,3,G,G,0,0,0,0,
				   G,3,G,0,G,3,G,2,3,4,4,4,4,4,G,0,0,0,0,0,
				   0,G,0,0,0,G,0,G,2,8,0,4,4,G,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,G,8,8,8,G,G,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,G,8,8,8,G,0,0,0,0,0,0,0,
			       0,0,0,0,0,0,0,0,0,G,8,8,G,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,G,G,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


int m16[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,G,G,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,G,E,E,G,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,G,1,E,1,E,G,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,G,1,4,E,1,1,E,G,0,0,0,0,
				   0,0,0,0,0,0,0,G,1,4,4,E,1,1,1,E,G,0,0,0,
				   0,0,0,0,0,0,G,1,4,4,1,5,E,1,1,1,E,G,0,0,
				   0,0,0,0,0,G,1,4,4,1,F,F,5,E,1,1,1,E,G,0,
				   0,0,0,0,G,1,4,4,1,F,G,G,F,5,E,E,E,E,G,0,
				   0,0,0,G,E,E,E,E,5,F,G,G,F,1,4,4,1,G,0,0,
				   0,0,0,0,G,E,1,1,E,5,F,F,1,4,4,1,G,0,0,0,
				   0,0,0,0,0,G,E,1,1,E,5,1,4,4,1,8,G,0,0,0,
				   0,0,0,0,0,0,G,E,1,1,E,4,4,1,8,8,8,G,0,0,
				   0,0,0,0,0,0,0,G,E,1,E,4,1,8,8,8,8,8,G,0,
				   0,0,0,0,0,0,0,0,G,E,E,1,G,G,8,8,8,8,G,0,
				   0,0,0,0,0,0,0,0,0,G,E,G,0,0,G,8,8,8,G,0,
			       0,0,0,0,0,0,0,0,0,0,G,0,0,0,0,G,G,G,G,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


int m17[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,G,G,0,0,0,0,0,0,
				   0,0,0,0,0,G,G,0,0,0,G,G,7,F,G,G,0,0,0,0,
				   0,0,0,0,G,B,3,G,0,G,7,F,F,F,F,F,G,0,0,0,
				   0,0,0,0,G,B,B,3,G,7,F,G,G,F,F,F,F,G,0,0,
				   0,0,0,0,0,G,B,B,3,G,7,F,7,F,F,F,G,0,0,0,
				   0,0,0,0,0,0,G,B,1,1,G,G,7,F,B,3,G,0,0,0,
				   0,0,0,0,0,G,B,3,1,1,1,1,B,B,3,G,0,0,0,0,
				   0,0,0,0,G,B,B,B,3,9,9,3,3,3,G,0,0,0,0,0,
				   0,0,0,0,G,B,9,9,B,1,9,1,G,G,0,0,0,0,0,0,
				   0,0,0,0,0,G,9,9,1,1,G,G,0,0,0,0,0,0,0,0,
			       0,0,0,0,0,0,G,G,9,G,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,G,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
				   
int m18[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			       0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int m19[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			       0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int m20[20][20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			       0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


int swordr[10][10] = {0,0,0,0,0,0,0,0,4,0,
					  0,0,0,0,0,0,0,4,4,4,
					  0,0,0,B,B,0,4,4,4,0,
					  0,0,0,0,B,B,B,4,0,0,
					  0,0,0,0,8,8,B,B,0,0,
					  0,0,0,8,8,8,0,B,0,0,
					  0,0,8,8,8,0,0,0,0,0,
					  0,0,8,8,0,0,0,0,0,0,
					  0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0,0,0,0,0,0};

int lancer[10][10] = {0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0,0,8,8,0,0,
					  0,0,0,0,0,8,8,8,0,0,
					  0,0,0,0,0,1,8,0,0,0,
					  0,0,0,0,1,4,0,0,0,0,
					  0,0,0,1,0,0,4,0,0,0,
					  0,0,1,4,0,4,0,0,0,0,
					  0,1,0,0,4,0,0,0,0,0,
					  0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0,0,0,0,0,0};

int axer[10][10] = { 0,0,0,0,0,0,0,0,0,0,
					 0,0,0,0,0,0,0,0,0,0,
					 0,0,0,0,8,8,0,4,0,0,
					 0,0,0,8,8,8,4,0,0,0,
					 0,0,8,8,8,4,8,8,8,0,
					 0,0,0,0,4,8,8,8,0,0,
					 0,0,0,4,0,0,8,0,0,0,
					 0,9,4,0,0,0,0,0,0,0,
					 0,9,9,0,0,0,0,0,0,0,
					 0,0,0,0,0,0,0,0,0,0};

int gunr[10][10] = { 0,0,0,0,0,0,8,8,0,0,
					 0,0,0,0,0,8,8,0,0,0,
					 0,0,0,0,8,4,1,0,0,0,
					 0,0,0,8,4,0,1,0,0,0,
					 0,0,0,4,1,0,0,0,0,0,
					 0,0,4,4,1,1,1,0,0,0,
					 0,4,4,4,1,1,0,0,0,0,
					 0,0,4,4,0,0,0,0,0,0,
					 0,0,0,4,0,0,0,0,0,0,
					 0,0,0,0,0,0,0,0,0,0};

int bowr[10][10] = { 0,0,0,0,0,0,0,0,0,0,
					 0,0,0,0,0,0,0,9,0,0,
					 0,0,4,4,4,0,9,3,0,0,
					 0,0,4,8,0,9,0,3,0,0,
					 0,0,4,0,8,0,0,3,0,0,
					 0,0,0,9,0,8,0,3,0,0,
					 0,0,9,0,0,0,3,0,0,0,
					 0,9,3,3,3,3,0,0,0,0,
					 0,0,0,0,0,0,0,0,0,0,
					 0,0,0,0,0,0,0,0,0,0};

int combr[10][10] = {0,0,0,0,0,0,8,8,8,4,
					 0,0,0,0,8,8,8,8,4,0,
					 0,0,8,8,8,8,8,4,0,0,
					 0,0,0,8,0,0,4,0,0,0,
					 0,0,0,0,0,4,0,0,0,0,
					 0,0,0,0,4,3,3,0,0,0,
					 0,0,0,4,8,3,3,0,0,0,
					 0,0,4,8,8,3,0,0,0,0,
					 0,0,8,8,0,0,0,0,0,0,
					 0,8,8,0,0,0,0,0,0,0};

int persons[4] = {0,0,0,0}; // used to determine who is in the bar
// 1 - Garland | 2 - Evelia | 3 - Diantra | 4 - Kage | 5 - Gilgahin | 6 - Drake | 7 - Westland | 8 - Sarah

char faker[20]; // the fake name of the player if they decide to make one

bool hasHired() // checks if the player hired a mercenary
{
	int x;
	for(x=0;x<20;x++)
	{
		if(inbox[x].personality == hired)
			return true;
	}
	return false;
}

void peopleSetting() // sorts who is at the pub during the day
{
	srand((unsigned)time(NULL));
	int x;
	
	if(day%2 == 0 && alignmentCheck() != unknown)
	{
		switch(rand()%2+1)
		{
			case 1:
			if(garlandInParty() == true)
				persons[0] = 0;
			else
				persons[0] = 1;
			break;
			case 2:
			persons[0] = 0;
			break;
		}
		switch(rand()%2+1)
		{
			case 1:
			persons[1] = 2;
			break;
			case 2:
			persons[1] = 0;
			break;
		}
		switch(rand()%2+1)
		{
			case 1:
			persons[2] = 3;
			break;
			case 2:
			persons[2] = 0;
			break;
		}
		switch(rand()%2+1)
		{
			case 1:
			persons[3] = 4;
			break;
			case 2:
			persons[3] = 0;
			break;
		}
	}
	else if(alignmentCheck() != unknown)
	{
		switch(rand()%2+1)
		{
			case 1:
			persons[0] = 5;
			break;
			case 2:
			persons[0] = 0;
			break;
		}
		switch(rand()%2+1)
		{
			case 1:
			persons[1] = 6;
			break;
			case 2:
			persons[1] = 0;
			break;
		}
		switch(rand()%2+1)
		{
			case 1:
			persons[2] = 1;
			break;
			case 2:
			persons[2] = 3;
			break;
		}
		switch(rand()%2+1)
		{
			case 1:
			persons[3] = 4;
			break;
			case 2:
			persons[3] = 2;
			break;
		}
	}
	else
	{
		persons[0] = 7;
		persons[1] = 8;
		persons[2] = 0;
		persons[3] = 0;
	}
	
	for(x=0;x<4;x++)
	{
		if(persons[x] == 1 && Gar == true)
		{
			persons[x] = 0;	
		}
		else if(persons[x] == 2 && Eve == true)
		{
			persons[x] = 0;
		}
		else if(persons[x] == 3 && Dia == true)
		{
			persons[x] = 0;
		}
		else if(persons[x] == 4 && Kag == true)
		{
			persons[x] = 0;
		}
		else if(persons[x] == 5 && Gil == true)
		{
			persons[x] = 0;
		}
		else if(persons[x] == 6 && Dra == true)
		{
			persons[x] = 0;
		}
		else if(persons[x] == 7 && Wes == true)
		{
			persons[x] = 0;
		}
		else if(persons[x] == 8 && Sar == true)
		{
			persons[x] = 0;
		}
	}
	
}

void preEnter() // for spacing out dialogue and prompts
{
	printf("\nPress enter");
	getchar();
	fflush(stdin); // clears any extra enter presses
	fseek(stdin,0,SEEK_END);
}

void printAt(char c, int x, int y) // prints a character at an x and y location on the screen
{
    HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
    COORD p = {x,y};
    SetConsoleCursorPosition(h,p);
    putchar(c);
    setCursor(0,0);
}

void setCursor(int x, int y) // sets the cursor to a position on the screen 
{
	hideCursor();
	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
    COORD p = {x,y};
    SetConsoleCursorPosition(h,p);
}	

void printString(char c[100],int x, int y) // prints a string at an x and y location on the screen
{
	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD p = {x,y};
	SetConsoleCursorPosition(h,p);
	printf("%s",c);
}

void printStat(char c[100],int stat,int x, int y) // prints a string and variable
{
	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD p = {x,y};
	SetConsoleCursorPosition(h,p);
	printf("%s:%d",c,stat);
}


void setColor(int ForgC)
{
 WORD wColor;

  HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
  CONSOLE_SCREEN_BUFFER_INFO csbi;

                       //We use csbi for the wAttributes word.
 if(GetConsoleScreenBufferInfo(hStdOut, &csbi))
 {
                 //Mask out all but the background attribute, and add in the forgournd color
      wColor = (csbi.wAttributes & 0xF0) + (ForgC & 0x0F); // 0xF0 is red
      SetConsoleTextAttribute(hStdOut, wColor);
 }
 return;
}

int alignmentCheck() // returns the current alignment of the player
{
	if(good > neutral && good > evil)
	{
		if(evil > neutral)
		{
			return bright;
		}
		else
		{
			return optimist;
		}
	}
	else if(evil > good && evil > neutral)
	{
		if(good > neutral)
		{
			return complex;
		}
		else
		{
			return harsh;
		}
	}
	else if(neutral > evil && neutral > good)
	{
		if(good > evil)
		{
			return mysteriousCar;
		}
		else
		{
			return mysterious;
		}
	}
	else
	{
		return unknown;
	}
}	

void printPattern(scene test, int maxX, int maxY)
{
	int x;
	int y;
	for(y = 0;y<maxY;y++)
	{
		for(x = 0;x<maxX;x++)
		{
			switch(test)
			{
				case LIBRARY:
				if(library[y][x] != 0)
					setColor(library[y][x]);
				else if(y < 15)
				{
					setColor(DARK_RED);
				}
				else
				{
					setColor(DARK_BLUE);
				}
				break;
				case PUB:
				if(pub[y][x] != 0)
					setColor(pub[y][x]);	
				else
				{
					if(y < 15)
						setColor(12);
					else
					{
						if(x%2 == 1 || y % 2 ==1)
							setColor(9);
						else
							setColor(15);
					}
				}
				break;
				case BACK_ROOM:
				if(backRoom[y][x] != 0)
					setColor(backRoom[y][x]);	
				else if(y <= 14)
				{
					setColor(4);
				}
				else if(y>14)
				{
					if(x%2 == 1 || y % 2 ==1)
						setColor(9);
					else
						setColor(15);
				}
				break;
				case TESTER:
				setColor(title[y][x]);	
				break;
				case CAMPER:
				if(mainCamp[y][x] == 0 && y < 14)
					setColor(9);
				else if(y >= 14 && (mainCamp[y][x] == 2 || mainCamp[y][x] == 0))
					setColor(2);
				else
					setColor(mainCamp[y][x]);
				break;
				case NIGHTER:
				if(y >= 14 && (mainCamp[y][x] == 2 || mainCamp[y][x] == 0))
					setColor(2);
				else
					setColor(mainCamp[y][x]);
				break;
				case SHOPPER:
				if(shop[y][x] == 0)
					setColor(3);
				else
					setColor(shop[y][x]);
				break;
				case START:
				setColor(starter[y][x]);
				break;
			}
			setCursor(x,y);
			printf("%c",219);
		}
	}
	setColor(WHITE);
	printf("\n");
}

int pause(int he) // pauses for he number of seconds
{
    time_t then;
    
    time(&then);
    while(difftime(time(NULL),then) < he);
    fflush(stdin); // clears any extra enter presses
}

void gameOver() // when the player loses
{
	srand((unsigned)time(NULL));
	int x;
	
	if(level <= 2)
	{
		system("cls");
		health = maxHealth;
		printf("For some reason you woke up later...");
		preEnter();
	}
	else if(fortune != 11)
	{
		hell:
		system("cls");
		printf("\nGAME OVER");
		pause(2);
		printf("\nUninstalling soul.exe....");
		for(x=0;x<20;x++)
		{
			switch(rand()%3+1)
			{
				case 3:
				printf("%c",219);	
				case 2:
				printf("%c",219);
				case 1:
				printf("%c",219);	
				break;
			}
			pause(1);
		}
		exit(1);	
	}
	else
	{
		if(endingUsed == false)
		{
			system("cls");
			printf("\nRebooting systems...");
			preEnter();
			health = maxHealth;
			system("cls");
			endingUsed = true;
		}
		else 
			goto hell;
	}
}

void hideCursor() // hides the cursor so the player can't see it
{
   HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
   CONSOLE_CURSOR_INFO info;
   info.dwSize = 1;
   info.bVisible = FALSE;
   SetConsoleCursorInfo(consoleHandle, &info);
}

void clearBottom() // clears the bottom when the player is in a scene
{
	int x,y;
	for(y=21;y<40;y++)
	{
		for(x=0;x<80;x++)	
			printAt(' ',x,y);
	}
	setCursor(0,21);
}

int options(char question[40], char option1[20], char option2[20], char option3[20], char option4[20], int options, int x,int y)
{
	int input;
	int looper;
	int selection = 1;
	printString(question,x,y);
	while(input != 13)
	{
		printAt('>',x,selection+y);
		printString(option1,x+1,y+1);
		printString(option2,x+1,y+2);
		printString(option3,x+1,y+3);
		printString(option4,x+1,y+4);
		input = getch();
		switch(input)
		{
			case 72:
			if(selection != 1)
				selection--;
			break;
			case 80:
			if(selection != options)
				selection++;
			break;
		}
		for(looper = 0;looper<options;looper++)
			printAt(' ',x,1+y+looper);
	}
	return selection;
}

int availableBonus() // looks for available bonus files 
{
	FILE *reader;
	char fileName[30];
	int x;
	
	system("cls");
	printf("\nWhat is the name of the bonus content (It's the file name)?");
	scanf("%s",&fileName);
	while(fileName[x] != ' ')
	{
		x++;
	}	
	fileName[x] = '.';
	fileName[x+1] = 'd';
	fileName[x+2] = 'a';
	fileName[x+3] = 't';
	reader = fopen(fileName,"r");
	if(reader == NULL)
	{
		printf("\nThere is no file named that!");
	}	
	else
	{
		
	}	
}	

int availableFiles() // looks for available files to load and returns the open file #
{
	FILE *reader;
	int fileNumber = 0;
	reader = fopen("./Save Files/playerInfo.dat","r");
	if(reader == NULL)
	{
		fclose(reader);
	}
	else
	{
		fscanf(reader,"%s",&user1);
		fileNumber++;
		fclose(reader);
	}
	reader = fopen("./Save Files/playerInfo1.dat","r");
	if(reader == NULL)
	{
		fclose(reader);
	}
	else
	{
		fscanf(reader,"%s",&user2);
		fileNumber++;
		fclose(reader);
	}
	reader = fopen("./Save Files/playerInfo2.dat","r");
	if(reader == NULL)
	{
		fclose(reader);
	}
	else
	{
		fscanf(reader,"%s",&user3);
		fileNumber++;
		fclose(reader);
	}
	
	return fileNumber;
}

int loadFile() // loads a new selected file
{
	int x; // for loading arrays in
	int a; // for loading strings in
	bool there = false; // did the player select a file?
	
	FILE *reader; // reading player stats
	FILE *reader2;  // reading inbox files
	FILE *reader3; // reading storage files
	int fileLoad; // which file will be loaded
	
	system("cls");
	switch(availableFiles()) // checks which file to load from
	{
		case 0:
		printf("\nThere is no loadable save file!");
		preEnter();
		system("cls");
		return 1;
		case 3:
		case 2:
		case 1:
		while(there == false)
		{
			setCursor(0,1);
			printf("\nFile 1 - %s",user1);
			printf("\n File 2 - %s",user2);	
			printf("\n File 3 - %s",user3);
			switch(options("Which file do you want to load?","File 1","File 2","File 3","Don't Load",4,0,1))
			{
				case 1:
				reader = fopen("./Save Files/playerInfo.dat","r");	
				fileLoad = 1;
				if(reader != NULL)
				{
					there = true;
				}
				break;
				case 2:
				reader = fopen("./Save Files/playerInfo1.dat","r");	
				fileLoad = 2;
				if(reader != NULL)
				{
					there = true;
				}
				break;
				case 3:
				reader = fopen("./Save Files/playerInfo2.dat","r");	
				fileLoad = 3;
				if(reader != NULL)
				{
					there = true;
				}
				break;
				case 4:
				system("cls");
				return 1;
				break;
			}	
		}
		break;
	}
	fscanf(reader,"%s %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d",&name, &health, &maxHealth, &attack, &ammunition, &defense, &agility, &level, &experience, &money, &spirit, &weakness, &maxXP, &evil, &good, &neutrala, &equipped);
	fprintf(reader, "\n");
	for(x = 0;x<3;x++) // scans in party numbers into the file
	{
		fscanf(reader,"%d ",&party[x]);
	}
	fprintf(reader, "\n");
	fscanf(reader, "%d %d %d %d",&plasmaLv,&magicSwordLv,&aid,&createSprtlv);
	fclose(reader);
	switch(fileLoad) // checks which file to load
	{
		case 1:
		reader = fopen("./Save Files/inboxInfo.dat","r");
		break;
		case 2:
		reader = fopen("./Save Files/inboxInfo2.dat","r");
		break;
		case 3:
		reader = fopen("./Save Files/inboxInfo3.dat","r");
		break;
	}
	for(x = 0;x<20;x++) // scans inbox from the file
	{
		fscanf(reader,"%s %d %d %d %d %d %d %d %d %d %d %d %d %d",&inbox[x].data,&inbox[x].health,&inbox[x].maxHP,&inbox[x].attac,&inbox[x].speed,&inbox[x].reflect,&inbox[x].lv,&inbox[x].exp,&inbox[x].maxExp,&inbox[x].personality,&inbox[x].weakness,&inbox[x].type,&inbox[x].look,&inbox[x].humanPerson);
		for(a = 0;a<20;a++)
		{
			if(inbox[x].data[a] == '_')
			{
				inbox[x].data[a] = ' ';
			}
		}
	}	
	fclose(reader);
	switch(fileLoad) // checks which file to load in
	{
		case 1:
		reader = fopen("./Save Files/storageInfo.dat","r");
		break;
		case 2:
		reader = fopen("./Save Files/storageInfo2.dat","r");
		break;
		case 3:
		reader = fopen("./Save Files/storageInfo3.dat","r");
		break;
	}
	for(x = 0;x<10;x++) // scans storage stats into the file
	{
		fscanf(reader,"%s %d %d %d %d %d",&storage[x].label,&storage[x].ATT,&storage[x].lvl,&storage[x].value,&storage[x].type,&storage[x].chamber);
		if(x+1 != 10)
			fprintf(reader, "\n");
		for(a = 0;a<20;a++)
		{
			if(storage[x].label[a] == '_')
			{
				storage[x].label[a] = ' ';
			}
		}
	}
	fclose(reader);
	switch(fileLoad) // prepares for scanning location info
	{
		case 1:
		reader = fopen("./Save Files/locationInfo.dat","r");
		break;
		case 2:
		reader = fopen("./Save Files/locationInfo2.dat","r");
		break;
		case 3:
		reader = fopen("./Save Files/locationInfo3.dat","r");
		break;
	}
	fscanf(reader,"%d %d %d %d %d %d",&chapter,&area,&x,&y,&day,&timee);
	fprintf(reader,"\n");
	fscanf(reader,"%d %d ",&coord1[0],&coord1[1]);
	fscanf(reader,"%d %d ",&coord2[0],&coord2[1]);
	fscanf(reader,"%d %d ",&coord3[0],&coord3[1]);
	fscanf(reader,"%d %d ",&coord4[0],&coord4[1]);
	fscanf(reader,"%d %d ",&coord5[0],&coord5[1]);
	fscanf(reader,"%d %d ",&coord6[0],&coord6[1]);
	fscanf(reader,"%d %d ",&coord7[0],&coord7[1]);
	for(x=0;x<7;x++)
	{
		fscanf(reader,"%d ",&floors[x]);
	}
	fprintf(reader,"\n");
	for(x=0;x<7;x++)
	{
		fscanf(reader,"%d ",&maxFloors[x]);
	}
	fclose(reader);
	switch(fileLoad) // checks which file to load in
	{
		case 1:
		reader = fopen("./Save Files/socialInfo.dat","r");
		break;
		case 2:
		reader = fopen("./Save Files/socialInfo2.dat","r");
		break;
		case 3:
		reader = fopen("./Save Files/socialInfo3.dat","r");
		break;
	}
	fscanf(reader,"%d %d %d %d %d %d %d %d",&garland,&westland,&drake,&evelia,&sarah,&diantra,&kage,&gilgahin);
	fprintf(reader,"\n");
	fscanf(reader,"%d %d %d %d %d %d %d %d",&Gar,&Wes,&Dra,&Eve,&Sar,&Dia,&Kag,&Gil);
	fclose(reader);
	switch(fileLoad)
	{
		case 1:
		reader = fopen("./Save Files/tough.dat","r");
		break;	
		case 2:
		reader = fopen("./Save Files/tough2.dat","r");
		break;
		case 3:
		reader = fopen("./Save Files/tough3.dat","r");	
		break;
	}
	fscanf(reader,"%d %d %d %d %d %d",&demonKind,&sparedFoes,&visitedBack,&gilaSpare,&inJail,&food);
	fprintf(reader,"\n");
	for(a=0;a<7;a++)
	{
		for(x=0;x<7;x++)
		{
			fscanf(reader,"%d",&talkedWith[a][x]);
		}
		fprintf(reader,"\n");
	} 
	fclose(reader);
	peopleSetting();
}

void saveFile() // saves the game
{
	FILE *reader; // reading player stats
	int fileLoad; // which file position will be saved
	
	int x; // used for loops when getting party and inventory
	int a; // for loading strings in
	
	system("cls");
	switch(availableFiles()) // checks which file to load in
	{
		case 0:
		switch(options("Create a new save file?","Yes","No","","",2,0,2))
		{
			case 1:
			reader = fopen("./Save Files/playerInfo.dat","w+");
			break;
			case 2:
			goto nope;
			break;
		}
		case 3:
		case 2:
		case 1:
		system("cls");
		setCursor(0,1);
		printf("\nFile 1 - %s",user1);
		printf("\n File 2 - %s",user2);	
		printf("\n File 3 - %s",user3);
		switch(options("Which file do you want to save on?","File 1","File 2","File 3","Don't Save",4,0,1))
		{
			case 1:
			fileLoad = 1;
			reader = fopen("./Save Files/playerInfo.dat","w+");	
			break;
			case 2:
			fileLoad = 2;
			reader = fopen("./Save Files/playerInfo1.dat","w+");	
			break;
			case 3:
			fileLoad = 3;
			reader = fopen("./Save Files/playerInfo2.dat","w+");	
			break;
			case 4:
			goto nope;
			break;
		}
		break;
	}	
	fprintf(reader,"%s %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d",name, health, maxHealth, attack, ammunition, defense, agility, level, experience, money, spirit, weakness, maxXP, evil, good, neutrala, equipped);
	fprintf(reader, "\n");
	for(x = 0;x<3;x++) // scans in party numbers into the file
	{
		fprintf(reader,"%d ",party[x]);
	}	
	fprintf(reader, "\n");
	fprintf(reader, "%d %d %d %d",plasmaLv,magicSwordLv,aid,createSprtlv);
	fclose(reader);
	switch(fileLoad) // checks which file to load from
	{
		case 1:
		reader = fopen("./Save Files/inboxInfo.dat","w+");
		break;
		case 2:
		reader = fopen("./Save Files/inboxInfo2.dat","w+");
		break;
		case 3:
		reader = fopen("./Save Files/inboxInfo3.dat","w+");
		break;
	}
	for(x = 0;x<20;x++) // scans in inbox into the file
	{
		for(a = 0;a<20;a++) // used to process spaces as a character and prevent name loss
		{
			if(inbox[x].data[a] == ' ')
			{
				inbox[x].data[a] = '_';
			}
		}
		fprintf(reader,"%s %d %d %d %d %d %d %d %d %d %d %d %d %d",inbox[x].data,inbox[x].health,inbox[x].maxHP,inbox[x].attac,inbox[x].speed,inbox[x].reflect,inbox[x].lv,inbox[x].exp,inbox[x].maxExp,inbox[x].personality,inbox[x].weakness,inbox[x].type,inbox[x].look,inbox[x].humanPerson);
		fprintf(reader, "\n");
		for(a = 0;a<20;a++) // takes space substitutes out
		{
			if(inbox[x].data[a] == '_')
			{
				inbox[x].data[a] = ' ';
			}
		}
	}
	fclose(reader);
	switch(fileLoad) // checks which file to load from
	{
		case 1:
		reader = fopen("./Save Files/storageInfo.dat","w+");
		break;
		case 2:
		reader = fopen("./Save Files/storageInfo2.dat","w+");
		break;
		case 3:
		reader = fopen("./Save Files/storageInfo3.dat","w+");
		break;
	}
	for(x = 0;x<10;x++) // scans in storage stats into the file
	{	
		for(a = 0;a<20;a++)
		{
			if(storage[x].label[a] == ' ')
			{
				storage[x].label[a] = '_';
			}
		}
		fprintf(reader,"%s %d %d %d %d %d",storage[x].label,storage[x].ATT,storage[x].lvl,storage[x].value,storage[x].type,storage[x].chamber);
		fprintf(reader, "\n");
		for(a = 0;a<20;a++)
		{
			if(storage[x].label[a] == '_')
			{
				storage[x].label[a] = ' ';
			}
		}
	}
	fclose(reader);
	switch(fileLoad) // prepares for scanning location info
	{
		case 1:
		reader = fopen("./Save Files/locationInfo.dat","w+");
		break;
		case 2:
		reader = fopen("./Save Files/locationInfo2.dat","w+");
		break;
		case 3:
		reader = fopen("./Save Files/locationInfo3.dat","w+");
		break;
	}
	fprintf(reader,"%d %d %d %d %d %d",chapter,area,x,y,day,timee);
	fprintf(reader,"\n");
	fprintf(reader,"%d %d ",coord1[0],coord1[1]);
	fprintf(reader,"%d %d ",coord2[0],coord2[1]);
	fprintf(reader,"%d %d ",coord3[0],coord3[1]);
	fprintf(reader,"%d %d ",coord4[0],coord4[1]);
	fprintf(reader,"%d %d ",coord5[0],coord5[1]);
	fprintf(reader,"%d %d ",coord6[0],coord6[1]);
	fprintf(reader,"%d %d ",coord7[0],coord7[1]);
	for(x=0;x<7;x++)
	{
		fprintf(reader,"%d ",floors[x]);
	}
	fprintf(reader,"\n");
	for(x=0;x<7;x++)
	{
		fprintf(reader,"%d ",maxFloors[x]);
	}
	fclose(reader);
	switch(fileLoad) // checks which file to load in
	{
		case 1:
		reader = fopen("./Save Files/socialInfo.dat","w+");
		break;
		case 2:
		reader = fopen("./Save Files/socialInfo2.dat","w+");
		break;
		case 3:
		reader = fopen("./Save Files/socialInfo3.dat","w+");
		break;
	}
	fprintf(reader,"%d %d %d %d %d %d %d %d",garland,westland,drake,evelia,sarah,diantra,kage,gilgahin);
	fprintf(reader,"\n");
	fscanf(reader,"%d %d %d %d %d %d %d %d",Gar,Wes,Dra,Eve,Sar,Dia,Kag,Gil);
	fclose(reader);
	switch(fileLoad)
	{
		case 1:
		reader = fopen("./Save Files/tough.dat","w+");
		break;	
		case 2:
		reader = fopen("./Save Files/tough2.dat","w+");
		break;
		case 3:
		reader = fopen("./Save Files/tough3.dat","w+");	
		break;
	}
	fprintf(reader,"%d %d %d %d %d %d",demonKind,sparedFoes,visitedBack,gilaSpare,inJail, food);
	fprintf(reader,"\n");
	for(a=0;a<7;a++)
	{
		for(x=0;x<7;x++)
		{
			fprintf(reader,"%d",talkedWith[a][x]);
		}
		fprintf(reader,"\n");
	}
	fclose(reader);
	nope:
	system("cls");
	switch(options("Do you want to quit the game?","Yes","No","","",2,0,1))
	{
		case 1:
		exit(1);
		break;
	}	
}

void printSprite(scene test,int a, int b) // prints a sprite at a specific coordinate
{
	int maxX;
	int maxY;
	int x;
	int y;
	int currentValue;
	switch(test)
	{
		case TESTER:
		maxX = 80+a;
		maxY = 10+b;
		break;
		case CAMPER:
		break;
		case SHOPPER:
		maxX = 80+a;
		maxY = 20+b;
		break;
		case START:
		maxX = 55+a;
		maxY = 20+b;
		break;
		case M1:
		case M2:
		case M3:
		case M4:
		case M6:
		case M5:
		case M7:
		case M8:
		case M9:
		case M10:
		case M12:
		case M13:
		case M14:
		case M15:
		case M16:
		case M17:
		case M18:
		case M19:
		case M20:	
		case THE_TEST:	
		maxX = 20+a;
		maxY = 20+b;
		break;
		case SWOR:
		case LANR:
		case AXER:
		case GUNR:
		case BOWR:
		case COMR:
		maxX = 10+a;
	 	maxY = 10+b;
		break;
	}
	
	for(y = b;y<maxY;y++)
	{
		for(x = a;x<maxX;x++)
		{
			switch(test)
			{
				case TESTER:
				setColor(title[y-b][x-a]);	
				break;
				case CAMPER:
				if(mainCamp[y-b][x-a] == 0 && y < 14)
					setColor(9);
				else if(y >= 14 && (mainCamp[y-b][x-a] == 2 || mainCamp[y-b][x-a] == 0))
					setColor(2);
				else
					setColor(mainCamp[y-b][x-a]);
				break;
				case SHOPPER:
				if(shop[y-b][x-a] == 0)
					setColor(3);
				else
					setColor(shop[y-b][x-a]);
				break;
				case START:
				setColor(starter[y-b][x-a]);
				break;
				case M1:
				currentValue = m1[y-b][x-a];	
				setColor(m1[y-b][x-a]);
				break;
				case M2:
				currentValue = m2[y-b][x-a];
				setColor(m2[y-b][x-a]);
				break;
				case M3:
				currentValue = m3[y-b][x-a];
				setColor(m3[y-b][x-a]);
				break;
				case M4:
				currentValue = m4[y-b][x-a];
				setColor(m4[y-b][x-a]);
				break;
				case M5:
				currentValue = m5[y-b][x-a];
				setColor(m5[y-b][x-a]);	
				break;
				case M6:
				currentValue = m6[y-b][x-a];
				setColor(m6[y-b][x-a]);	
				break;
				case M7:
				currentValue = m7[y-b][x-a];
				setColor(m7[y-b][x-a]);	
				break;
				case M8:
				currentValue = m8[y-b][x-a];
				setColor(m8[y-b][x-a]);
				break;
				case M9:
				currentValue = m9[y-b][x-a];
				setColor(m9[y-b][x-a]);
				break;
				case M10:
				currentValue = m10[y-b][x-a];
				setColor(m10[y-b][x-a]);
				break;
				case M12:
				currentValue = m12[y-b][x-a];
				setColor(m12[y-b][x-a]);
				break;
				case M13:
				currentValue = m13[y-b][x-a];
				setColor(m13[y-b][x-a]);
				break;
				case M14:
				currentValue = m14[y-b][x-a];
				setColor(m14[y-b][x-a]);
				break;
				case M15:
				currentValue = m15[y-b][x-a];
				setColor(m15[y-b][x-a]);
				break;
				case M16:
				currentValue = m16[y-b][x-a];
				setColor(m16[y-b][x-a]);
				break;
				case M17:
				currentValue = m17[y-b][x-a];
				setColor(m17[y-b][x-a]);	
				break;
				case M18:
				currentValue = m18[y-b][x-a];
				setColor(m18[y-b][x-a]);
				break;
				case M19:
				currentValue = m19[y-b][x-a];
				setColor(m19[y-b][x-a]);
				break;
				case M20:
				currentValue = m20[y-b][x-a];
				setColor(m20[y-b][x-a]);
				break;
				case THE_TEST:
				currentValue = garlan[y-b][x-a];
				setColor(garlan[y-b][x-a]);
				break;
				case SWOR:
				setColor(swordr[y-b][x-a]);	
				break;
				case LANR:
				setColor(lancer[y-b][x-a]);	
				break;	
				case AXER:
				setColor(axer[y-b][x-a]);	
				break;	
				case GUNR:
				setColor(gunr[y-b][x-a]);	
				break;	
				case BOWR:
				setColor(bowr[y-b][x-a]);	
				break;
				case COMR:
				setColor(combr[y-b][x-a]);	
				break;
			}
			if(currentValue != 0)
				printAt(219,x,y);
		}
	}
	setColor(WHITE);
}

bool soloMember() // is the player by themselves?
{
	int x;
	for(x=0;x<3;x++)
	{
		if(partyMemberHere(x) == true)
			return false;
	}
	return true;
}

void updateHealth()
{
	printString(name,61,2);
	setCursor(61,3);
	if(health>=10)
		printf("%d/%d",health,maxHealth);
	else
	{	
		printf(" %d/%d",health,maxHealth);
	}
	for(x=0;x<3;x++)
	{
		if(partyMemberHere(x))
		{
			printString(inbox[party[x]].data,61,((x*6)+8));
			setCursor(61,((x*6)+9));
			if(inbox[party[x]].health >= 10)
				printf("%d/%d",inbox[party[x]].health,inbox[party[x]].maxHP);
			else
			{
				printf(" %d/%d",inbox[party[x]].health,inbox[party[x]].maxHP);
			}
		}
	}
	setCursor(1,22);
}

void printBattle() // prints the battle GUI
{
	srand((unsigned)time(NULL));
	
	int x,y;	
	switch(rand()%11+1) // creates background pattern
	{
		case 1:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if(x%2 == 1)
					setColor(1);
				else 
					setColor(4);
				printAt(219,x,y);
			}
		}	
		break;
		case 2:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if(x%3 == 1)
					setColor(2);
				else if(y%2 == 1)
					setColor(1);
				else 
					setColor(6);
				printAt(219,x,y);
			}
		}	
		break;
		case 3:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if(x%4 == 0 && y%4 == 0)
					setColor(15);
				else if(x%2 == 0 && y % 3 == 1)
					setColor(8);
				else
					setColor(4);
				printAt(219,x,y);
			}
		}	
		break;
		case 4:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if(x%6 == 0 && y%5 == 1)
					setColor(14);
				else if(x%2 == 0 && y % 3 == 1)
					setColor(2);
				else
					setColor(3);
				printAt(219,x,y);
			}
		}	
		break;
		case 5:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if(x%4 == 1 && y%2 == 1)
					setColor(10);
				else if(x%2 == 0 && y % 3 == 0)
					setColor(11);
				else
					setColor(12);
				printAt(219,x,y);
			}
		}	
		break;
		case 6:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if(y == x || (y/2) == x)
					setColor(2);
				else if(y % 3 == 0)
					setColor(1);
				else if(x <= 55 && x >= 40 && y <= 10)
					setColor(4);
				else 
					setColor(3);
				printAt(219,x,y);
			}
		}
		break;
		case 7:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if((y&10/2) == x%10)
					setColor(2);
				else if(y % 7 == 0)
					setColor(14);
				else if(x <= 12 && x >= 4 && y <= 10 && y >= 2)
					setColor(10);
				else 
					setColor(3);
				printAt(219,x,y);
			}
		}	
		break;
		case 8:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if((y%6*5) == x%10)
					setColor(DARK_RED);
				else if(y & 7 == 0)
					setColor(14);
				else if(y%10==x%2)
					setColor(DARK_BLUE);
				else if(x & 12 == 5 && x >= 4 && y <= 10 && y >= 2)
					setColor(10);
				else 
					setColor(3);
				printAt(219,x,y);
			}
		}
		break;
		case 9:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if(y % 2 == 1)
					setColor(DARK_RED);
				else if(x % 5 == 1)
					setColor(DARK_BLUE);
				else
					setColor(5);
				printAt(219,x,y);
			}
		}
		break;
		case 10:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if(x&2 == y)
					setColor(DARK_RED);
				else if(x % 5 == 1)
					setColor(BABY_BLUE);
				else if(y%2 == 1)
					setColor(PINK);
				else
					setColor(5);
				printAt(219,x,y);
			}
		}	
		break;
		case 11:
		for(y=0;y<21;y++)
		{
			for(x=0;x<60;x++)
			{
				if(x%4 == y)
					setColor(DARK_RED);
				else if(y%4 ==x)
					setColor(DARK_RED);
				else if(y+4 ==x)
					setColor(DARK_BLUE);
				else if(y+8 ==x)
					setColor(DARK_BLUE);
				else
					setColor(DARK_GREEN);
				printAt(219,x,y);
			}
		}	
		break;
	}
	setColor(WHITE);
	printSprite(enemy.look,20,0);
	for(x=0;x<60;x++)
	{
		printAt('=',x,21);
	}
	for(y=21;y<32;y++)
	{
		printAt('|',59,y);
	}
	for(y = 0;y<24;y++)
	{
		for(x=60;x<80;x++)
		{
			if(y<6)
			{
				setColor(alignmentCheck());
			}
			else 
			{
				if(soloMember() == true)
					break;
				else if(y<12 && partyMemberHere(0) == true)
					setColor(inbox[party[0]].personality);
				else if(y<18 && partyMemberHere(1) == true)
					setColor(inbox[party[1]].personality);
				else if(y<24 && partyMemberHere(2) == true)
					setColor(inbox[party[2]].personality);
				else
					setColor(BLACK);
			}
			printAt(219,x,y);
			setColor(WHITE);
		}
	}
	updateHealth();
}

void clearBox() // clears the text box in the battle
{
	int x,y;
	for(y=22;y<33;y++)
	{
		for(x=0;x<59;x++)
		{
			printAt(' ',x,y);
		}
	}
	setCursor(1,22);
}

bool monsterThere(int spot) // checks to see if a monster is in a space
{
	if(inbox[spot].lv <= 0)
		return false;
	else
		return true;
}

bool partyMemberHere(int x) // checks if there is a party member in an array value
{
	int pep = party[x];
	
	if(pep == -1)
		return false;
	else 
		return true;
}

int inboxCount() // returns how many members the inbox has
{
	int x;
	int count = 0;
	for(x=0;x<20;x++)
	{
		if(monsterThere(x) == true)
			count = count + 1;
	}
	return count;	
}

int partyCount() // returns how many members are in the party right now
{
	int count = 0;
	int a;
	for(a=0;a<4;a++)
	{
		if(partyMemberHere(a) == true)
		{
			count = count + 1;
		}
	}	
	return count-1;
}	

void deleteMember(int x) // takes out a member from the party
{
	int a;
	int empty;
	int input;
	bool ready = false;
	
	if(monsterThere(x) == true) // checks if the monster exists
	{
		for(a = 0;a<3;a++) // checks if the monster is in the main party array
		{
			if(party[a] == x)
			{
				party[a] = -1; // sets it to where they are out of the party and takes their inbox value out
			}	
		}	
		for(a = 0;a<20;a++)
		{
			inbox[x].data[a] = 0;
		}
		inbox[x].health = 0;
		inbox[x].maxHP = 0;
		inbox[x].attac = 0;
		inbox[x].speed = 0;
		inbox[x].reflect = 0;
		inbox[x].lv = 0;
		inbox[x].exp = 0;
		inbox[x].maxExp = 0;
		inbox[x].personality = 0;
		inbox[x].weakness = 0;
		inbox[x].type = 0;
	}	
	
}

void printInbox() // prints the party members and inbox and all their stats
{
	int x;
	int checky;
	
	printf("\nCurrent Inbox");
	for(x = 0;x<20;x++)
	{
		if(monsterThere(x) == true)
		{
			printf("\nMONSTER #:%d %s\nHP:%d/%d\nLEVEL:%d",x,inbox[x].data,inbox[x].health,inbox[x].maxHP,inbox[x].lv);
			printf("\nATTACK:%d\nDEFENSE:%d\nAGILITY:%d\nEXPERIENCE:%d/%d",inbox[x].attac,inbox[x].reflect,inbox[x].speed,inbox[x].exp,inbox[x].maxExp);
			printf("\nATTACK TYPE:");
			switch(inbox[x].type)
			{
				case sword:
				printf("SWORDS");
				break;
				case lance:
				printf("LANCES");
				break;
				case gun:
				printf("GUNS");
				break;
				case bow:
				printf("BOWS");
				break;
				case axe:
				printf("AXES");
				break;
				case combo:
				printf("COMBINATION WEAPONS");
				break;
			}
			printf("\n");
		}
	}	
}

void printPartyBox(int x, int y) // used for printing box of party members
{
	int starX;
	int starY;
	
	for(starY = y;starY < y+8;starY++)
	{
		for(starX = x;starX < x+8;starX++)
		{
			printAt(219,starX,starY);
		}
	}
}

void printWeaponBox(int x, int y) // used for printing box of weapons
{
	int starX;
	int starY;
	
	for(starY = y;starY < y+15;starY++)
	{
		for(starX = x;starX < x+15;starX++)
		{
			printAt(219,starX,starY);
		}
	}
}

void printWeapons() // prints all the weapons in storage
{
	int x = 0;
	int z = 0;
	int y = 0;
	int w;
	int picker;
	bool picked = false;
	int checky;
	for(x=0;x<10;x++)
	{
		if(x>= 5)
		{
			if(x%8==5)
			{
				y+=16;
				z = 0;
			}
		}
		if(weaponHere(x) == true)
		{
			setColor(storage[x].type);
			printWeaponBox(z,y);
			setColor(WHITE);
			setCursor(z,y);
			printf("%d",x);
			setCursor(z,y+1);
			if(strlen(storage[x].label) >= 15)
			{
				for(w=0;w<8;w++)
				{
					if(storage[x].label[w] != ' ')
						printf("%c",storage[x].label[w]);
					else
					{
						setCursor(z,y+2);
						for(picker = w;picker<strlen(storage[x].label);picker++)
						{
							if(storage[x].label[picker] != ' ')
								printf("%c",storage[x].label[picker]);
						}
						picked = true;
						break;
					}
				}
				if(picked == false)
				{
					setCursor(z,y+2);
					for(w=15;w<strlen(storage[x].label);w++)
					{
						printf("%c",storage[x].label[w]);
					}
				}
				picked =false;
			}
			else
				printf("%s",storage[x].label);
			setCursor(z,y+3);
			printf("ATT:%d",storage[x].ATT);
			setCursor(z,y+4);
			printf("LV:%d",storage[x].lvl);
			setCursor(z,y+5);
			printf("TYPE:");
			switch(storage[x].type)
			{
				case sword:
				printf("SWORD");
				break;
				case lance:
				printf("LANCE");
				break;
				case gun:
				printf("GUN");
				break;
				case bow:
				printf("BOW");
				break;
				case combo:
				printf("COMBO");
				break;
				case axe:
				printf("AXE");
				break;
			}
			if(storage[x].type == gun || storage[x].type == bow)
			{
				setCursor(z,y+6);
				printf("Chambers:%d",storage[x].chamber);
			}
			setCursor(z,y+7);
			printf("Value:%d",storage[x].value);
		}
		else
		{
			setColor(BLACK);
			printWeaponBox(z,y);
			setCursor(z,y+1);
			setColor(WHITE);
		}
		z += 15;
	}
}

void printParty() // printParty but with graphics finally
{
	int x = 0;
	int z = 0;
	int y = 0;
	int w;
	int picker;
	bool picked = false;
	int checky;
	for(x=0;x<20;x++)
	{
		if(x>= 8)
		{
			if(x%8==0)
			{
				y+=9;
				z = 0;
			}
		}
		if(monsterThere(x) == true)
		{
			setColor(inbox[x].personality);
			printPartyBox(z,y);
			setColor(WHITE);
			setCursor(z,y);
			printf("%d",x);
			for(checky = 0;checky<3;checky++)
			{
				if(party[checky] == x)
				{
					setCursor(z+6,y);
					printf("P%d",checky+1);
				}
			}
			setCursor(z,y+1);
			if(strlen(inbox[x].data) >= 8)
			{
				for(w=0;w<8;w++)
				{
					if(inbox[x].data[w] != ' ')
						printf("%c",inbox[x].data[w]);
					else
					{
						setCursor(z,y+2);
						for(picker = w;picker<strlen(inbox[x].data);picker++)
						{
							if(inbox[x].data[picker] != ' ')
								printf("%c",inbox[x].data[picker]);
						}
						picked = true;
						break;
					}
				}
				if(picked == false)
				{
					setCursor(z,y+2);
					for(w=8;w<strlen(inbox[x].data);w++)
					{
						printf("%c",inbox[x].data[w]);
					}
				}
				picked =false;
			}
			else
				printf("%s",inbox[x].data);
			setCursor(z,y+3);
			printf("%d/%d",inbox[x].health,inbox[x].maxHP);
			setCursor(z,y+4);
			printf("LV:%d",inbox[x].lv);
			setCursor(z,y+5);
			switch(inbox[x].type)
			{
				case sword:
				printf("SWORD");
				break;
				case lance:
				printf("LANCE");
				break;
				case gun:
				printf("GUN");
				break;
				case bow:
				printf("BOW");
				break;
				case combo:
				printf("COMBO");
				break;
				case axe:
				printf("AXE");
				break;
			}
			setCursor(z,y+6);
			if(inbox[x].humanPerson == true)
				printf("HUMAN");
		}
		else
		{
			setColor(BLACK);
			printPartyBox(z,y);
			setColor(WHITE);
		}
		z += 9;
	}
}
	
bool storageFull() // checks if the weapon storage is full
{
	int x = 0;
	int y;
	for(y=0;y<10;y++)
	{
		if(weaponHere(y) == true)
		{
			x++;
		}
	}
	if(x == 10)
		return true;
	else 
		return false;
}

bool weaponHere(int x) // checks if a weapon exists in the storage array at that certain instance
{
	if(storage[x].lvl <= 0)
		return false;		
	else
		return true;
} 

void deleteWeapon(int x) // deletes a weapon
{
	int a;
	
	if(weaponHere(x) == true)
	{
		for(a=0;a<20;a++)
		{
			storage[x].label[a] = ' ';
		}	
		storage[x].type = 0;
		storage[x].ATT = 0;
		storage[x].value = 0;
		storage[x].lvl = 0;
		storage[x].chamber = 0;
	}	
}	

int numberInbox() // returns how many demons the player has
{
	int x = 0;
	int a;
	for(a=0;a<20;a++)
	{
		if(monsterThere(a) == true)
			x++;
	}	
	return x;
}	

void addMembera(int x) // adds the enemy to the party when reorganizing 
{
	strcpy(inbox[x].data,enemy.data);
	inbox[x].health = enemy.maxHP;
	inbox[x].maxHP = enemy.maxHP;
	inbox[x].attac = enemy.attac;
	inbox[x].speed = enemy.speed;
	inbox[x].reflect = enemy.reflect;
	inbox[x].lv = enemy.lv;
	inbox[x].exp = enemy.exp;
	inbox[x].maxExp = enemy.maxExp;
	inbox[x].personality = enemy.personality;
	inbox[x].weakness = enemy.weakness;
	inbox[x].type = enemy.type;
}

void organizeInbox() // organizes inbox
{
	int x;
	int a;
	int b;
	for(x =0;x<20;x++)
	{
		for(a=0;a<20;a++)
		{
			enemy.data[a] = ' ';
		}	
		if(monsterThere(x) == false && monsterThere(x+1) == true && inbox[x].humanPerson == false) // checks if the space before the monster is empty
		{
			for(b=0;b<3;b++) // checks if this moved monster is in the party
			{
				if(party[b] == x+1)
				{
					party[b] = x;
				}	
			}	
			strcpy(enemy.data,inbox[x+1].data);
			enemy.health = inbox[x+1].health;
			enemy.maxHP = inbox[x+1].maxHP;
			enemy.attac = inbox[x+1].attac;
			enemy.speed = inbox[x+1].speed;
			enemy.reflect = inbox[x+1].reflect;
			enemy.lv = inbox[x+1].lv;
			enemy.exp = inbox[x+1].exp;
			enemy.maxExp = inbox[x+1].maxExp;
			enemy.personality = inbox[x+1].personality;
			enemy.weakness = inbox[x+1].weakness;
			enemy.type = inbox[x+1].type;
			deleteMember(x+1);
			addMembera(x);
		}
	}	
}	

void organizeStorage() // organizes storage
{
	int x;
	for(x = 0;x<10;x++)
	{
		if(weaponHere(x) == false && weaponHere(x+1) == true)
		{
			strcpy(storage[x].label,storage[x+1].label);
			storage[x].ATT = storage[x+1].ATT;
			storage[x].lvl = storage[x+1].lvl;
			storage[x].value = storage[x+1].value;
			storage[x].type = storage[x+1].type;
			storage[x].chamber = storage[x+1].chamber;
			deleteWeapon(x+1);
		}	
	}	
}	

void whiteSprite(int test, int a, int b) // for animation use
{
	int maxX;
	int maxY;
	int x;
	int y;
	int currentValue;
	switch(test)
	{
		case M1:
		case M2:
		case M3:
		case M4:
		case M5:
		case M6:
		case M7:
		case M8:
		maxX = 20+a;
		maxY = 20+b;
		break;
	}
	
	for(y = b;y<maxY;y++)
	{
		for(x = a;x<maxX;x++)
		{
			switch(test)
			{
				case M1:
				currentValue = m1[y-b][x-a];	
				if(m1[y-b][x-a] != 0)
					setColor(WHITE);
				break;
				case M2:
				currentValue = m2[y-b][x-a];
				if(m2[y-b][x-a] != 0)
					setColor(WHITE);
				break;
				case M3:
				currentValue = m3[y-b][x-a];
				if(m3[y-b][x-a] != 0)
					setColor(WHITE);
				break;
				case M4:
				currentValue = m4[y-b][x-a];
				if(m4[y-b][x-a] != 0)
					setColor(WHITE);
				break;
				case M5:
				currentValue = m5[y-b][x-a];
				if(m5[y-b][x-a] != 0)
					setColor(WHITE);	
				break;
				case M6:
				currentValue = m6[y-b][x-a];
				if(m6[y-b][x-a] != 0)
					setColor(WHITE);	
				break;
				case M7:
				currentValue = m7[y-b][x-a];
				if(m7[y-b][x-a] != 0)
					setColor(WHITE);
				break;
				case M8:
				currentValue = m8[y-b][x-a];
				if(m8[y-b][x-a] != 0)
					setColor(WHITE);
				break;
			}
			if(currentValue != 0)
				printAt(219,x,y);
		}
	}
	setColor(WHITE);
}
	
void fusionSprite(int test,int a,int b)
{
	int maxX;
	int maxY;
	int x;
	int y;
	int currentValue;
	switch(test)
	{
		case M1:
		case M2:
		case M3:
		case M4:
		case M5:
		case M6:
		case M7:
		case M8:
		maxX = 20+a;
		maxY = 20+b;
		break;
	}
	
	for(y = b;y<maxY;y++)
	{
		for(x = a;x<maxX;x++)
		{
			switch(test)
			{
				case M1:
				currentValue = m1[y-b][x-a];	
				if(m1[y-b][x-a] != 0)
				{
					if(y%2 == 0)
						setColor(DARK_RED);	
					else
						setColor(11);
				}
				break;
				case M2:
				currentValue = m2[y-b][x-a];
				if(m2[y-b][x-a] != 0)
				{
					if(y%2 == 0)
						setColor(DARK_RED);	
					else
						setColor(11);
				}
				break;
				case M3:
				currentValue = m3[y-b][x-a];
				if(m3[y-b][x-a] != 0)
				{
					if(y%2 == 0)
						setColor(DARK_RED);	
					else
						setColor(11);
				}
				break;
				case M4:
				currentValue = m4[y-b][x-a];
				if(m4[y-b][x-a] != 0)
				{
					if(y%2 == 0)
						setColor(DARK_RED);	
					else
						setColor(11);
				}
				break;
				case M5:
				currentValue = m5[y-b][x-a];
				if(m5[y-b][x-a] != 0)
				{
					if(y%2 == 0)
						setColor(DARK_RED);	
					else
						setColor(11);
				}		
				break;
				case M6:
				currentValue = m6[y-b][x-a];
				if(m6[y-b][x-a] != 0)
				{
					if(y%2 == 0)
						setColor(DARK_RED);	
					else
						setColor(11);
				}		
				break;
				case M7:
				currentValue = m7[y-b][x-a];
				if(m7[y-b][x-a] != 0)
				{
					if(y%2 == 0)
						setColor(DARK_RED);	
					else
						setColor(11);
				}		
				break;
				case M8:
				currentValue = m8[y-b][x-a];
				if(m8[y-b][x-a] != 0)
				{
					if(y%2 == 0)
						setColor(DARK_RED);	
					else
						setColor(11);
				}		
				break;
			}
			if(currentValue != 0)
				printAt(219,x,y);
		}
	}
	setColor(WHITE);
}
		
void fusionAnimation(int thing,int weapon) // animation when fusing
{
	printSprite(inbox[thing].look,20,1);
	pause(1);
	whiteSprite(inbox[thing].look,20,1);
	pause(1);
	fusionSprite(inbox[thing].look,20,1);
	setCursor(0,30);
}	

void twoFusionAnimation(int thing,int thingDos) // animation when fusing
{
	printSprite(inbox[thing].look,10,1);
	printSprite(inbox[thingDos].look,40,1);
	pause(1);
	whiteSprite(inbox[thing].look,10,1);
	whiteSprite(inbox[thingDos].look,40,1);
	pause(1);
	fusionSprite(inbox[thing].look,10,1);
	fusionSprite(inbox[thingDos].look,40,1);
	setCursor(0,30);
}
	
int fusion() // used when the player fuses with a monster/weapon
{
	int input = 0; // used for general input 
	int inputB; // used to make sure the player wants to fuse
	bool done = false; // checks to see if the player is done selecting a monster
	bool doneB = false; // checks if the player REALLY does want to fuse
	int x;
	int z = 0;
	int clearY;
	int clearX;
	int y = 8;
	int inputting;
	
	if(numberInbox() > 0)
	{
		system("cls");
		printParty();
		while(done == false)
		{	
			doneB = false;
			setCursor(0,30);
			printf("\nWARNING: Fusing with the monster will delete them forever and you will take");
			printf("\n         damage correlating with the monster's current health if you fuse");
			printf("\n         with them!");
			printf("\nWhich monster do you want to fuse with right now? \n(Move the arrow keys to navigate, press escape to exit, & press enter to select the member):");
			printString("^^^^^^^^",z,y);
			switch(getch())
			{
				case 72: // up
				if(y!=8)
				{
					input = input - 8;
					printString("        ",z,y);
					y-=9;
				}
				break;
				case 77: // right
				if(z< 63)
				{
					input = input + 1;
					printString("        ",z,y);
					z+=9;
				}
				break;
				case 80: // down
				if(y<18)
				{
					input = input + 8;
					printString("        ",z,y);
					y+=9;
				}
				break;
				case 75: // left
				if(z> 0)
				{
					input = input - 1;
					printString("        ",z,y);
					z-=9;
				}
				break;
				case 27: // escape
				return 1;
				break;
				case 13: // enter
				setCursor(0,36);
				if(monsterThere(input) == true && inbox[input].humanPerson == false)
				{
					while(doneB == false)
					{
						printf("\nAre you sure you want to use fusion on %s?(y/n)",inbox[input].data);
						inputB = getch();
						if(inputB == 'y')
						{
							faker:
							system("cls");
							doneB = true;
							done = true;
							switch(options("Do you want to fuse them into a weapon or fuse them into yourself?","Weapon","Fuse with you","","",2,0,3))
							{
								case 1:
								system("cls");
								if(storageFull() == true)
								{
									printf("\nYou have too many weapons!");
									preEnter();
									goto faker;
								}
								else
								{
									fusionAnimation(input,inbox[input].type);
									printf("\n%s turned into...",inbox[input].data);
									pause(2);
									system("cls");
									switch(inbox[input].type)
									{
										case sword:
										printSprite(SWOR,20,1);
										setCursor(0,10);	
										printf("\nA sword!");
										break;
										case lance:
										printSprite(LANR,20,1);	
										setCursor(0,10);
										printf("\nA lance!");
										break;
										case gun:
										printSprite(GUNR,20,1);
										setCursor(0,10);
										printf("\nA gun!");
										break;
										case bow:
										printSprite(BOWR,20,1);	
										setCursor(0,10);
										printf("\nA bow!");
										break;
										case axe:
										printSprite(AXER,20,1);	
										setCursor(0,10);
										printf("\nAn axe!");
										break;
										case combo:
										printSprite(COMR,20,1);	
										setCursor(0,10);
										printf("\nA combination weapon!");
										break;
									}	
									x = 0;
									while(weaponHere(x) == true)
									{
										x++;	
									}
									printf("\nWhat will you call the weapon (must be 20 letters and have no spaces)?:");
									scanf("%s",storage[x].label);
									storage[x].ATT = inbox[input].attac;
									storage[x].lvl = inbox[input].lv;
									storage[x].value = inbox[input].maxExp;
									storage[x].type = inbox[input].type;
									if(storage[x].type == gun || storage[x].type == combo || storage[x].type == bow)
										storage[x].chamber = rand()%inbox[input].reflect+1; 
									else
										storage[x].chamber = 0;
									deleteMember(input);
								}
								break;
								case 2:
								system("cls");	
								fusionAnimation(input,inbox[input].type);
								if(fortune != 8)
								{
									demonKind = true;	
								}
								printf("\nYou feel goosebumps, you fused with %s!",inbox[input].data);
								preEnter();
								attack = attack + inbox[input].attac;
								defense = defense + inbox[input].reflect;
								weakness = inbox[input].weakness;
								experience = experience + inbox[input].exp;
								health = health - inbox[input].health;
								if(health <=0)
								{
									printf("\n%s died in a fusion accident!?",name);
									preEnter();
									gameOver();
								}	
								break;
							}
							organizeStorage();
							deleteMember(input);
						}	
						else if(inputB == 'n')
						{
							doneB = true;
						}	
					}
				}	
				else 
				{
					printf("\nThere is no monster at that location in your inbox");
					printf("\nor is a human who cannot be used in fusion");
					preEnter();
				}
				clearBottom();
				break;
			}
		}	
	}
	else
	{
		printf("\nYou have no monsters to fuse!");
		preEnter();
	}
	return 0;
}

void addSpirit(int healther, int maxHPR, int attacker, int speeder, int reflecter, int lvlr, int expr, int maxExpr, int prso, int wknr, int typr) // used when the player creates a spirit
{
	int x = 0;
	int a;
	char tester[20];
	
	system("cls");
	health = health - 10;
	setCursor(0,30);
	printf("What do you want to name the spirit?:");
	scanf("%s",&tester);
	clearBottom();
	while(monsterThere(x) == true && x != 21)
	{
		x++;
	}
	if(x!= 20)
	{
		doner:
		strcpy(inbox[x].data,tester);
		inbox[x].health = healther;
		inbox[x].maxHP = maxHPR;
		inbox[x].attac = attacker;
		inbox[x].speed = speeder;
		inbox[x].reflect = reflecter;
		inbox[x].lv = lvlr;
		inbox[x].exp = 0;
		inbox[x].maxExp = maxExpr;
		inbox[x].personality = prso;
		inbox[x].weakness = wknr;
		inbox[x].type = typr;
		inbox[x].humanPerson = false;
		inbox[x].look = rand()%8+7;
		for(a = 0;a<3;a++)
		{
			if(partyMemberHere(a) == false)
			{
				party[a] = x;
				a = 3;
			}
		}
		recentMember = x;
	}
	printSprite(inbox[x].look,10,5);
	setCursor(0,30);
	printf("%s was created!",tester);
	preEnter();
}

void addHuman(char tester[20], int healther, int maxHPR, int attacker, int speeder, int reflecter, int lvlr, int expr, int maxExpr, int prso, int wknr, int typr) // adds a human member to the party
{
	int x = 0;
	int a = 0;
	bool doneYet = false;
	int input;
	good = good + 1;
	
	while(monsterThere(x) == true && x != 21)
	{
		x++;
	}
	if(x!= 20)
	{
		doner:
		strcpy(inbox[x].data,tester);
		inbox[x].health = healther;
		inbox[x].maxHP = maxHPR;
		inbox[x].attac = attacker;
		inbox[x].speed = speeder;
		inbox[x].reflect = reflecter;
		inbox[x].lv = lvlr;
		inbox[x].exp = 0;
		inbox[x].maxExp = maxExpr;
		inbox[x].personality = prso;
		inbox[x].weakness = wknr;
		inbox[x].type = typr;
		inbox[x].humanPerson = true;
		for(a = 0;a<3;a++)
		{
			if(partyMemberHere(a) == false)
			{
				party[a] = x;
				a = 3;
			}
		}
		recentMember = x;
	}
	else
	{
		printf("\n%s can't join the party because you have too many/nmonsters so they left.",enemy.data);
		preEnter();
	}
}

void addMember() // adds the enemy to the party
{
	int x = 0;
	int a = 0;
	bool doneYet = false;
	int input;
	char tester[20];
	
	talker = true;
	while(monsterThere(x) == true && x != 21)
	{
		x++;
	}
	if(x!= 20)
	{
		while(doneYet == false)
		{
			regret:
			printf("\nWould you like to name the new member(y/n)?");
			input = getch();
			switch(input)
			{
				case 'y':
				printf("\nWhat will their new name be\n(use 20 characters and have no spaces)?:");
				scanf("%s",tester);
				doneYet = false;
				while(doneYet == false)
				{
					printf("\nIs %s what you want to call them(y/n)?",tester);
					input = getch();
					switch(input)
					{
						case 'y':
						strcpy(inbox[x].data,tester);
						doneYet = true;
						goto doner;
						case 'n':
						goto regret;
						break;
					}
				}
				break;
				case 'n':
				strcpy(inbox[x].data,enemy.data);
				doneYet = true;
				break;
			}
		}
		doner:
		inbox[x].health = enemy.maxHP;
		inbox[x].maxHP = enemy.maxHP;
		inbox[x].attac = enemy.attac;
		inbox[x].speed = enemy.speed;
		inbox[x].reflect = enemy.reflect;
		inbox[x].lv = enemy.lv;
		inbox[x].exp = 0;
		inbox[x].maxExp = enemy.lv*10+enemy.maxHP;
		inbox[x].personality = enemy.personality;
		inbox[x].weakness = enemy.weakness;
		inbox[x].type = enemy.type;
		inbox[x].look = enemy.look;
		for(a = 0;a<3;a++)
		{
			if(partyMemberHere(a) == false)
			{
				party[a] = x;
				a = 3;
			}
		}
		recentMember = x;
	}
	else
	{
		printf("\n%s can't join the party because you \nhave too many monsters so they left.",enemy.data);
		preEnter();
	}
	enemy.health = 0;
	talker = true;
	//organizeInbox();
}	

bool inboxFull() // checks if the whole inbox is full
{
	int x = 0;
	int a;
	for(a=0;a<20;a++)
	{
		if(monsterThere(a) == true)
			x++;
	}	
	if(x >= 20)
		return true;
	else 
		return false;
}

bool isPartyFull() // checks to see if the party is full
{
	int x = 0;
	int a;
	for(a=0;a<3;a++)
	{
		if(partyMemberHere(a) == true)
			x++;
	}	
	if(x == 3)
		return true;
	else 
		return false;
}	

void fusionTwo() // when fusing monsters together
{
	srand((unsigned)time(NULL));
	
	int x = 0;
	int a = 0;
	int z = 0;
	int y = 8;
	bool doneYet = false;
	bool finishUp = false; // is the player done selecting the two monsters?
	int input = -1;
	int inputa = 0;
	int inputb = -1;
	char tester[20];
	struct monster inputc;
	
	system("cls");
	if(numberInbox() >= 2)
	{
		system("cls");
		printParty();
		while(doneYet == false)
		{	
			setCursor(0,30);
			printf("\nMAX LEVEL:%d",level);
			printf("\nWARNING: Fusing with the monster will delete them forever and you will take");
			printf("\n         damage correlating with the monster's current health if you fuse");
			printf("\n         with them!");
			printf("\nWhich monster will you use first for the fusion? (Press escape to exit):");
			if(input != -1)
				printf("\nFIRST MONSTER:%d  ",input);
			else
				printf("\nFIRST MONSTER:N/A");
			if(inputb != -1)
				printf("\nSECOND MONSTER:%d  ",inputb);
			else
				printf("\nSECOND MONSTER:N/A");
			if(inputb != -1 && input != -1)
				printf("\nPRESS ENTER");
			printString("^^^^^^^^",z,y);
			switch(getch())
			{
				case 72: // up
				if(y!=8)
				{
					inputa = inputa - 8;
					printString("        ",z,y);
					y-=9;
				}
				break;
				case 77: // right
				if(z< 63)
				{
					inputa = inputa + 1;
					printString("        ",z,y);
					z+=9;
				}
				break;
				case 80: // down
				if(y<18)
				{
					inputa = inputa + 8;
					printString("        ",z,y);
					y+=9;
				}
				break;
				case 75: // left
				if(z> 0)
				{
					inputa = inputa - 1;
					printString("        ",z,y);
					z-=9;
				}
				break;
				case 27: // escape
				doneYet = true;
				break;
				case 13: // enter
				if(input == -1 && monsterThere(inputa) == true)
				{
					input = inputa;
				}
				else if(inputb == -1 && monsterThere(inputa) == true)
				{
					inputb = inputa;
				}
				if(inputb != -1 && input != -1)
				{
					setCursor(0,30);
					if(monsterThere(inputb) == true && monsterThere(input) == true && inbox[input].humanPerson == false && inbox[inputb].humanPerson == false)
					{	
						if(inbox[input].lv + inbox[inputb].lv <= level)
						{
							system("cls");
							printf("\nFusing %s and %s together...",inbox[input].data,inbox[inputb].data);
							finishUp = true;	
							printf("\nWhat would you like to name the new fusion \n(must be 20 characters and have no spaces)?:");
							scanf("%s",&tester);
							inputc.maxHP = inbox[input].maxHP + inbox[inputb].maxHP;
							inputc.health = inputc.maxHP;
							inputc.attac = inbox[input].attac + inbox[inputb].attac;
							inputc.reflect = inbox[input].reflect + inbox[inputb].reflect;
							inputc.speed = inbox[input].speed + inbox[inputb].speed;
							inputc.lv = inbox[input].lv + inbox[inputb].lv;
							inputc.exp = 0;
							inputc.maxExp = inbox[input].maxExp + inbox[inputb].maxExp; 
							inputc.personality = neutral;
							switch(rand()%2+1)
							{
								case 1:
								inputc.weakness = inbox[inputb].type;
								inputc.type = inbox[inputb].type;
								inputc.look = inbox[inputb].look;
								break;
								case 2:
								inputc.weakness = inbox[input].weakness;
								inputc.type = inbox[input].type;
								inputc.look = inbox[input].look;
								break;	
							}
							system("cls");
							twoFusionAnimation(inbox[input].look,inbox[inputb].look);
							deleteMember(input);
							deleteMember(inputb);
							strcpy(inbox[input].data,tester);
							inbox[input].maxHP = inputc.maxHP;
							inbox[input].health = inbox[input].maxHP;
							inbox[input].attac = inputc.attac;
							inbox[input].reflect = inputc.reflect;
							inbox[input].speed = inputc.speed;
							inbox[input].lv = inputc.lv;
							inbox[input].exp = 0;
							inbox[input].maxExp = inputc.maxExp;
							inbox[input].personality = inputc.personality;
							inbox[input].weakness = inputc.weakness;
							inbox[input].type = inputc.type;
							system("cls");
							printSprite(inbox[input].look,30,0);
							printf("\n%s was created from the fusion!",inbox[input].data);
							preEnter();
							system("cls");
							printParty();
							inputb = -1;
							input = -1;
						}
						else
						{
							system("cls");
							printf("\nThe resulting monster would have too high of a level");
							finishUp = true;
							preEnter();
							system("cls");
							printParty();
							inputb = -1;
							input = -1;
						}			
					}
					else
					{
						system("cls");
						printf("\nThere is no monster there or it is a human");
						printf("\nwho cannot be used in fusion!");
						preEnter();
						system("cls");
						printParty();
					}
				}
				break;
			}
		}				
	}
	else
	{
		printf("\nYou don't have more than two monsters!");
		preEnter();
	}	
}

int changeParty() // switch out the current party members in play
{
	int x;
	int input = 0;
	bool ready = false;
	int inputb = 0;
	int inputa = 0;
	int z =0;
	int y = 8;
	
	system("cls");
	merp:
	if(partyCount() < 4)
	{
		printf("\nYou don't have a lot of party members so you can't move them.");
		preEnter();
		return 1;
	}
	printParty();
	while(ready == false)
	{
		printString("^^^^^^^^",z,y);
		setCursor(0,30);
		printf("\nWhich number monster do you want to summon? \n(The monsters with P and a number are in the party):");
		switch(getch())
		{
			case 72: // up
			if(y!=8)
			{
				inputa = inputa - 8;
				printString("        ",z,y);
				y-=9;
			}
			break;
			case 77: // right
			if(z< 63)
			{
				inputa = inputa + 1;
				printString("        ",z,y);
				z+=9;
			}
			break;
			case 80: // down
			if(y<18)
			{
				inputa = inputa + 8;
				printString("        ",z,y);
				y+=9;
			}
			break;
			case 75: // left
			if(z> 0)
			{
				inputa = inputa - 1;
				printString("        ",z,y);
				z-=9;
			}
			break;
			case 27: // escape
			ready = true;
			return 1;
			break;
			case 13: // enter
			if(monsterThere(inputa) == true)
			{
				if(isPartyFull() == false) // if there's no open slot in party
				{
					x = 0;
					while(partyMemberHere(x)) // checks for open party spaces
					{
						x++;
					}	
					party[x] = inputa;
					ready = true;
				}
				else
				{
					meeper:
					printf("\nWhich number party member do you want to swap out with?\n(enter -1 if you want to exit)");
					scanf("%d",&inputb);
					if(inputb == -1)
						return 1;
					else if(partyMemberHere(inputa) == true)
					{
						party[inputb] = inputa;
					}
					else 
					{
						printf("\nThat monster doesn't exist!");
						preEnter();
						system("cls");
						printParty();
						goto meeper;
					}
				}	
				ready = true;		
			}
			else
			{
				printf("\nThat monster doesn't exist!");
				preEnter();
				system("cls");
				printParty();
			}	
			break;
		}
		
	}	
	regret:
	system("cls");
	printf("");
}

void partyMemberTurn() // used for when the player controls the party member(s)
{
	int x;
	int looper;
	int pep;
	int power;
	int healer;
	int dealings;
	int position;
	int enemyDodger;
	bool triedAgain = false;
	
	srand((unsigned)time(NULL));
	
	for(x=0;x<3;x++)
	{
		pep = party[x];
		if(strcmp("Garland",inbox[pep].data) == 0 && enemy.health > 0 && inbox[pep].health > 0 && talker != true && inbox[pep].humanPerson == true && inbox[pep].personality == garl) // checks if garland is in the party
		{
			clearBox();
			printf("\n%s HP:%d",enemy.data,enemy.health);
			printf("\nWhat will %s do?",inbox[pep].data);
			switch(options("","Thrust - A stab attack","Lance Special - Garland's Lance Tech","Kick-Kick the enemy","Talk with the enemy",4,1,24))
			{
				case 1: // thrust
				if(enemyDodger == 1)
				{
					clearBox();
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();
				}
				else if(inbox[pep].speed < enemy.speed)
				{
					switch(rand()%2+1)
					{
						case 1:
						printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
						preEnter();
						break;
						case 2:
						power = rand()%inbox[pep].speed+1;
						printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
						break;
					}
				}
				else
				{
					clearBox();
					power = rand()%inbox[pep].speed + inbox[pep].attac;
					if(enemy.speed > inbox[pep].speed)
					{
						switch(rand()%2+1)
						{
							case 1:
							power = 0;
							printf("\nGarland wasn't fast enough to land a hit!");
							
							break;
							case 2:
							printf("\nGarland barely got %d damage on %s",power,enemy.data);
								
							enemy.health = enemy.health - power;
							break;
						}
					}
					else
					{
						switch(rand()%6+1)
						{
							case 6:
							printf("\nGarland's attack missed!");
							power = 0;
							preEnter();
							break;
							case 1:
							printf("\nGarland:\"Cross Thrust!\"");
							preEnter();
							printf("\nGarland thrusted his spear into");
							printf("\n%s for %d damage",enemy.data,power);
							break;
							case 2:
							printf("\nGarland:\"Hyper Thrust!\"");
							preEnter();
							printf("\nGarland quickly attacked");
							printf("\n%s for %d damage",enemy.data,power);
							break;
							case 3:
							printf("\nGarland:\"Breaking Point!\"");
							preEnter();
							printf("\nGarland spun his around and");
							printf("\nrammed into %s for %d damage",enemy.data,power);
							break;
							case 4:
							printf("\nGarland:\"Advent Blade!\"");
							preEnter();
							printf("\nGarland slammed his spear into");
							printf("\n%s for %d damage",enemy.data,power);
							break;
							case 5:
							printf("\nGarland:\"A Thousand Words!\"");
							power = power + 10;
							preEnter();
							printf("\nGarland rapidly stabbed %s",enemy.data);
							printf("\nwith his spear for %d damage",power);	
							break;
						}
						enemy.health = enemy.health - power;
					}
					preEnter();
					enemyDodger = 1;
				}
				break;
				case 2: // lance tech
				if(enemyDodger == 4)
				{
					clearBox();
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();
				}
				else
				{
					clearBox();
					switch(rand()%inbox[pep].lv+1)
					{
						case 1:
						power = inbox[pep].attac+(inbox[pep].attac%2);
						printf("\nGarland:\"Dark Necessities!\"");
						preEnter();
						printf("\nGarland's spear turned pitch black,");
						printf("\nGarland threw the spear at %s for",enemy.data);
						printf("\n%d damage!",power);
						enemy.health = enemy.health - power;
						break;
						case 2:
						case 3:
						power = inbox[pep].attac*(rand()%3+1);
						printf("\nGarland:\"Soul Spear!\"");
						preEnter();
						printf("\nGarland's lance ignited into flames and charged");
						printf("\ninto %s for %d damage.",enemy.data,power);
						enemy.health = enemy.health - power;
						break;
						case 4:
						case 5:
						default:	
						case 6:
						power = inbox[pep].attac + inbox[pep].speed;
						printf("\nGarland:\"Dread Fire!\"");
						preEnter();
						printf("\nGarland's spear turned black and ignited");
						printf("\ninto a blue flame. Garland thrusted the");
						printf("\nspear into %s for %d damge!",enemy.data,power);
						enemy.health = enemy.health - power;
						break;
						case 7:
						case 8:
						case 9:
						power = inbox[pep].attac%6 * 4 + inbox[pep].speed;
						printf("\nGarland:\"Invincible Flame!\"");
						preEnter();
						printf("\nGarland ignited into black flame and rushed");
						printf("\nat %s for %d damage",enemy.data,power);
						enemy.health = enemy.health - power;
						break;
					}
					enemyDodger = 4;
				}
				preEnter();
				break;
				case 3:
				clearBox();
				power = rand()%inbox[pep].lv+1;
				printf("\nGarland kicked %s for %d damage",enemy.data,power);
				enemy.health = enemy.health - power;
				preEnter();
				break;	
				case 4:
				clearBox();
				printf("\nGarland talked with %s",enemy.data);
				preEnter();
				clearBox();
				printf("\nGarland:\"Hey what do you want?\"");
				switch(enemy.personality)
				{
					case boss1:
					printf("\nGila:\"I want to join the best of the");
					printf("\n       best in combat, to live in freedom");
					printf("\n       without the Great Lord ruling over us\"");
					preEnter();
					clearBox();
					printf("\nGarland:\"I see, I actually sort of agree with");
					printf("\n          you... Maybe we are not enemies, what");
					printf("\n          do you say %s? Let him join?\"",name);
					switch(options("Let Gila join?","Yes","No","","",2,0,26))
					{
						case 1:
						evil = evil + 4;
						clearBox();
						printf("\nGarland:\"Hey why don't you join us?");
						printf("\n          my partner doesn't mind and");
						printf("\n          we're fighting for a similar");
						printf("\n          cause even in the Great Lord's");
						printf("\n          shadow...\"");
						preEnter();
						if(inboxFull() == false)
						{
							printf("\nGila:\"Sure thing\"");
							enemy.health = 0;
							addHuman("Gila",100,100,8,2,4,4,0,1000,boss1,gun,lance);
							talker = true;
						}
						else
						{
							printf("\nGila:\"No thanks\"");
						}
						break;
						case 2:
						good = good + 2;
						clearBox();
						printf("\nGarland:\"Ah okay then, well Gila lets continue");
						printf("\n          this fight then\"");
						break;
					}
					break;
					case 0:
					printf("\nThe guard is ignoring Garland\"");
					break;
					case 1:
					printf("\n%s:\"I want to play haha!\"",enemy.data);
					printf("\nGarland:\"Go play somewhere else then\"");	
					preEnter();
					switch(rand()%2+1)
					{
						case 1:
						printf("\n%s:\"No thanks haha!\"",enemy.data);
						break;
						case 2:
						printf("\n%s:\"Ah okay then\"",enemy.data);
						printf("\n%s left",enemy.data);
						enemy.health = 0;
						talker = true;
						sparedFoes = sparedFoes + 1;	
						break;
					}
					break;
					case 2:
					printf("\n%s:\"I don't know... I'm so sad...\"",enemy.data);
					switch(rand()%2+1)
					{
						case 1:
						if(isPartyFull() == false)	
						{
							printf("\nGarland:\"Then come with us, we'll help you find happiness\"");
							preEnter();
							printf("\n%s:\"Okay!\"",enemy.data);
							preEnter();
							clearBox();
							addMember();
						}
						else
						{
							printf("\nGarland:\"Then stop fighting, depressing emotions aren't fit");
							printf("\n          for a battlefield\"");
							preEnter();
							printf("\n%s:\"Okay...\"",enemy.data);
							preEnter();
							sparedFoes = sparedFoes + 1;
							enemy.health = 0;
							talker = true;
						}
						break;
						case 2:
						printf("\nGarland:\"Who cares! You're in our way!\"");	
						break;
					}
					break;
					case 3:
					printf("\n%s:\"NOTHING! I'm so angry!\"",enemy.data);	
					switch(rand()%2+1)
					{
						case 1:
						printf("\nGarland:\"Then use that anger and fight me!\"");
						break;
						case 2:
						printf("\nGarland:\"I don't care fool, you're wasting my time\"");
						switch(rand()%2+1)
						{
							case 1:
							printf("\n%s:\"Oh...\"",enemy.data);
							enemy.personality = sad;	
							break;
							case 2:
							printf("\n%s:\"AHH!!\"",enemy.data);
							break;
						}	
						break;
					}
					break;
					case 4:
					printf("\n%s:\"I don't know, I'm sort of wandering\"",enemy.data);
					switch(rand()%2+1)
					{
						case 1:
						printf("\nGarland:\"Then wander away, leave us be\"");
						preEnter();
						printf("\n%s:\"Fine then\"",enemy.data);
						preEnter();
						printf("\n%s left",enemy.data);
						sparedFoes = sparedFoes + 1;
						enemy.health = 0;
						talker = true;
						break;
						case 2:
						if(isPartyFull() == false)
						{
							printf("\nGarland:\"We're sort of wandering as well,");
							printf("\n          how about you join us?");
							preEnter();
							clearBox();
							switch(rand()%2+1)
							{
								case 1:
								if(inboxFull() == false)
								{
									printf("\n%s:\"Sure I'll join you\"",enemy.data);
									addMember();
									enemy.health = 0;
									talker = true;
								}
								else
								{
									printf("%s:\"NAHHH\"",enemy.data);
								}
								break;
								case 2:
								printf("\n%s:\"NAHHH\"",enemy.data);	
								break;
							}																	
						}
						else
						{
							printf("\nGarland:\"Okay then\"");
						}	
						break;
					}	
					break;
					case 5:
					printf("\n%s:\"I want to rule the world! Haha!\"",enemy.data);	
					switch(rand()%2+1)
					{
						case 1:
						printf("\nGarland:\"The only world you'll rule is the one");
						printf("\n          I'm about to kick you to.\"");
						preEnter();
						printf("\n%s:\"HAHA! Bring it on!\"",enemy.data);
						enemy.personality = happy;
						break;
						case 2:
						printf("\nGarland:\"Who cares, you're just some random guy\"");
						preEnter();
						printf("\n%s:\"What...\"",enemy.data);
						enemy.personality = sad;
						break;
					}
					break;
					case 6:
					printf("\n%s:\"Can... Can I join you..?\"",enemy.data);
					printf("\nGarland:\"I don't know, ask %s\"",enemy.data,name);
					break;
				}	
				preEnter();
				clearBox();
				break;
			}
		}
		else if(strcmp("Evelia",inbox[pep].data) == 0 && enemy.health > 0 && inbox[pep].health > 0 && talker != true && inbox[pep].humanPerson == true && inbox[pep].personality == evel) // checks if evelia is in the party
		{
			clearBox();
			printf("\n%s HP:%d",enemy.data,enemy.health);
			printf("\nWhat will %s do?",inbox[pep].data);
			switch(options("","Slash - A cut attack","Axe Special - Evelia's Axe Tech","Potion Shower - Heal everyone for a small amount","Talk with the enemy",4,1,24))
			{
				case 1:
				clearBox();
				if(enemyDodger == 2)
				{
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();	
				}
				else if(inbox[pep].speed < enemy.speed)
				{
					switch(rand()%2+1)
					{
						case 1:
						printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
						preEnter();
						break;
						case 2:
						power = rand()%inbox[pep].speed+1;
						printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
						break;
					}
				}
				else
				{
					power = inbox[pep].attac + rand()%inbox[pep].lv+1;
					printf("\n%s slashed at %s for %d damage!",inbox[pep].data,enemy.data,power);
					preEnter();
					enemy.health = enemy.health - power;
				}
				break;
				case 2:
				clearBox();
				if(enemyDodger == 6)
				{
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();
				}
				else
				{
					power = inbox[pep].attac*2;
					printf("\n%s:\"Hyper Cut!\"",inbox[pep].data);
					printf("\n%s attacked %s for %d damage!",inbox[pep].data,enemy.data,power);
					enemy.health = enemy.health - power;
				}	
				break;
				case 3:
				clearBox();
				healer = rand()%inbox[pep].lv+1;
				printf("\nEvelia threw a potion up in the air, small droplets of the");
				printf("\npotion fall on the party and health them for %d health.",healer);
				preEnter();
				health = health + healer;
				if(health > maxHealth)
					health = maxHealth;
				for(looper = 0;looper<4;looper++)
				{
					if(partyMemberHere(looper) == true)
					{
						inbox[party[looper]].health = inbox[party[looper]].health + healer;
						if(inbox[party[looper]].health > inbox[party[looper]].maxHP)
							inbox[party[looper]].health = inbox[party[looper]].maxHP;
					}
				}	
				updateHealth();
				break;
				case 4:
				clearBox();
				printf("\nEvelia started talking with %s",enemy.data);
				preEnter();
				clearBox();
				if(enemy.personality == boss1)
				{
					printf("\nEvelia:\"So Gila, why do you want");
					printf("\n         to fight us? We sort of");
					printf("\n         have the same goal in mind,");
					printf("\n         we don't really even want");
					printf("\n         to serve the Great Lord at");
					printf("\n         least in my opinion...\"");
					preEnter();
					clearBox();
					printf("\nGila:\"Interesting, well I'm fighting you");
					printf("\n       because I believe that you are lying");
					printf("\n       and we did just meet, but maybe we");
					printf("\n       should reconsider...\"");
					preEnter();
					clearBox();
					printf("\nEvelia:\"What do you think %s? What should");
					printf("\n         we do?\"");
					switch(options("","\"Stop fighting Gila and let him go\"","\"Let Gila join up with us\"","\"We should continue fighting\"","",3,0,26))
					{
						case 1:
						evil = evil + 2;
						neutrala = neutrala + 2;
						clearBox();
						gilaSpare = true;
						enemy.health = 0;
						talker = true;
						printf("\nGila:\"Fine, we will fight another day...\"");
						printf("\nGila left");
						break;
						case 2:
						evil = evil + 4;	
						clearBox();
						printf("\nEvelia:\"So what do you say? Want to join us?\"");
						preEnter();
						if(enemy.health <= 10 && inboxFull() == false)
						{
							enemy.health = 0;
							talker = true;
							printf("\nGila:\"Sure... You're strong so I think this will");
							printf("\n       be interesting...\"");
							preEnter();
							clearBox();
							printf("\nGila joined the party");
							addHuman("Gila",100,100,8,2,4,4,0,1000,boss1,gun,lance);
						}
						else
						{
							clearBox();
							printf("\nGila:\"No thanks, you barely even got a dent");
							printf("\n       in me haha! I'm just getting started!\"");
							preEnter();
							printf("\nEvelia:\"Ugh fine then\"");
							preEnter();
							printf("\nGila went back to fighting");
						}
						break;
						case 3:
						good = good + 3;
						clearBox();	
						printf("\nGila:\"Haha! I like that! Let us continue!\"");
						preEnter();
						printf("\nEvelia:\"Ugh okay then...\"");
						break;
					}
				}
				else if(enemy.personality == 0)
				{
					printf("\nThe Guard ignored her!");
				}
				else
				{
					switch(rand()%3+1)
					{
						case 1:
						printf("\nEvelia:\"Hey there, want to come along");
						printf("\n         with us... fella?\"");
						preEnter();
						switch(rand()%3+1)
						{
							case 1:
							case 2:
							enemy.personality = neutral;
							printf("\n%s:\"Uh... I'll think about it...\"",enemy.data);
							break;
							case 3:
							if(inboxFull() == false)
							{
								printf("\n%s:\"Sure! I'll join ya!\"",enemy.data);
								addMember();
								enemy.health = 0;
								talker = true;
							}
							else
							{
								printf("\n%s:\"BUT YOUR PARTY IS FULL!\"",enemy.data);
								preEnter();
								clearBox();
								printf("\nEvelia:\"Crap...");
							}	
							break;	
						}
						break;
						case 2:
						printf("\n%s:\"Who are you!?\"",enemy.data);
						preEnter();
						switch(rand()%2+1)
						{
							case 1:
							printf("\nEvelia:\"My name is Evelia, want to join us?\"");
							preEnter();
							switch(rand()%3+1)
							{
								case 1:
								case 2:
								printf("\n%s:\"NO!\"",enemy.data);
								break;
								case 3:
								if(inboxFull() == false)
								{
									printf("\n%s:\"Sure!\"",enemy.data);
									addMember();
									enemy.health = 0;
									talker = true;
								}
								else
								{
									printf("\n%s:\"NO!\"",enemy.data);
								}
								break;
							}
							break;
							case 2:
							printf("\nEvelia:\"My name is Evelia, can you let us go?\"");
							preEnter();
							switch(rand()%2+1)
							{
								case 1:
								printf("\n%s:\"NO!\"",enemy.data);	
								break;
								case 2:
								clearBox();
								printf("\n%s:\"Sure thing!\"",enemy.data);	
								switch(options("Let the enemy go?","Yes","No","","",2,0,24))
								{
									case 1:
									good = good + 1;
									clearBox();
									printf("\n%s left",enemy.data);
									sparedFoes = sparedFoes + 1;
									enemy.health = 0;
									talker = true;
									break;
									case 2:
									evil = evil + 1;
									printf("\n%s:\"WHAT!\"",enemy.data);
									printf("\n%s got ready to fight",enemy.data);	
									break;
								}
								break;
							}
							break;
						}
						break;
						case 3:
						printf("\nEvelia:\"Hey my partner has an offer for");
						printf("\n         you.\"");
						preEnter();
						switch(rand()%2+1)
						{
							case 1:
							clearBox();
							if(makeDeal() == 1)
							{
								enemy.health = 0;
								talker = 0;
							}
							break;
							case 2:
							printf("\n%s:\"NO!\"",enemy.data);
							break;
						}
						break;
					}
				}
				preEnter();
				clearBox();
				break;
			}
		}
		else if(strcmp("Diantra",inbox[pep].data) == 0 && enemy.health > 0 && inbox[pep].health > 0 && talker != true && inbox[pep].humanPerson == true && inbox[pep].personality == dian) // checks if diantra is in the party
		{
			clearBox();
			printf("\n%s HP:%d",enemy.data,enemy.health);
			printf("\nWhat will %s do?",inbox[pep].data);
			switch(options("","Slash - A cut attack","Sword Special - Diantra's Axe Tech","Soul Absorb - Steal health from the enemy","Purify the enemy - Use magic to control enemy",4,1,24))
			{
				case 1:
				clearBox();
				if(enemyDodger == 2)
				{
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();
				}
				else if(inbox[pep].speed < enemy.speed)
				{
					switch(rand()%2+1)
					{
						case 1:
						printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
						preEnter();
						break;
						case 2:
						power = rand()%inbox[pep].speed+1;
						printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
						break;
					}
				}
				else
				{
					power = inbox[pep].attac+good%evil;
					printf("\n%s slashed at %s for %d damage",inbox[pep].data,enemy.data,power);
					preEnter();
					enemy.health = enemy.health - power;
					enemyDodger = 2;
				}	
				break;
				case 2:
				clearBox();
				if(enemyDodger == 3)
				{
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();
				}
				else
				{
					enemyDodger = 3;
					power = inbox[pep].attac + good;
					printf("\nDiantra's sword was engulfed in light!");
					preEnter();
					printf("\nDiantra slashed at %s for %d damage!",enemy.data,power);
					preEnter();
					enemy.health = enemy.health - power;
				}	
				break;
				case 3:
				clearBox();
				power = rand()%inbox[pep].lv+good%evil;
				printf("\nDiantra reached out her hand and took away");
				printf("\n%d of %s's soul!",power,enemy.data);
				preEnter();
				enemy.health = enemy.health - power;
				inbox[pep].health = inbox[pep].health + power;
				if(inbox[pep].maxHP < inbox[pep].health)
					inbox[pep].health = inbox[pep].maxHP;
				break;
				case 4:
				clearBox();
				printf("\nDiantra casted a purifying spell on %s",enemy.data);
				preEnter();
				switch(enemy.personality)
				{
					default:
					printf("\nDiantra:\"The spell didn't work!\"");
					preEnter();
					break;
					case happy:
					case sad:
					switch(rand()%3+1)
					{
						case 1:
						printf("\nDiantra:\"I was able to get them under my control!");
						preEnter();
						clearBox();
						printf("\nDiantra:\"Want me to set them free or recruit them?\"");
						switch(options("What will you do?","Set the spirit free","Recruit the spirit","","",2,0,25))
						{
							case 1:
							clearBox();
							printf("\nDiantra set the spirit free...");
							preEnter();
							enemy.health = 0;
							break;
							case 2:
							clearBox();
							if(inboxFull() == false)
							{
								addMember();
								talker = true;
								enemy.health = 0;
							}
							else
							{
								printf("\nDiantra:\"We don't have enough space... I can't");
								printf("\n          hold on the spell much longer...\"");
								preEnter();
							}	
							break;
						}
						break;
						case 2:
						case 3:
						printf("\nDiantra:\"The spell didn't work!\"");
						preEnter();
						break;
					}
					break;
					case angry:
					case neutral:
					switch(rand()%6+1)
					{
						case 1:
						printf("\nDiantra:\"I was able to get them under my control!");
						preEnter();
						clearBox();
						printf("\nDiantra:\"Want me to set them free or recruit them?\"");
						switch(options("What will you do?","Set the spirit free","Recruit the spirit","","",2,0,25))
						{
							case 1:
							clearBox();
							printf("\nDiantra set the spirit free...");
							preEnter();
							enemy.health = 0;
							break;
							case 2:
							clearBox();
							if(inboxFull() == false)
							{
								addMember();
								talker = true;
								enemy.health = 0;
							}
							else
							{
								printf("\nDiantra:\"We don't have enough space... I can't");
								printf("\n          hold on the spell much longer...\"");
								preEnter();
							}	
							break;
						}
						break;
						case 4:
						case 5:
						enemy.personality = happy;
						case 6:
						case 2:
						case 3:
						printf("\nDiantra:\"The spell didn't work!\"");
						preEnter();
						break;
					}
					break;
					case bossy:
					switch(rand()%10+1)
					{
						case 1:
						printf("\nDiantra:\"I was able to get them under my control!");
						preEnter();
						clearBox();
						printf("\nDiantra:\"Want me to set them free or recruit them?\"");
						switch(options("What will you do?","Set the spirit free","Recruit the spirit","","",2,0,25))
						{
							case 1:
							clearBox();
							printf("\nDiantra set the spirit free...");
							preEnter();
							enemy.health = 0;
							break;
							case 2:
							clearBox();
							if(inboxFull() == false)
							{
								addMember();
								talker = true;
								enemy.health = 0;
							}
							else
							{
								printf("\nDiantra:\"We don't have enough space... I can't");
								printf("\n          hold on the spell much longer...\"");
								preEnter();
							}	
							break;
						}
						break;
						case 10:
						case 9:
						case 8:
						enemy.personality = angry;
						printf("\nDiantra:\"The spell didn't work!\"");
						preEnter();
						break;
						case 7:
						case 6:
						case 5:
						enemy.personality = sad;
						printf("\nDiantra:\"The spell didn't work!\"");
						preEnter();
						break;
						case 4:
						case 2:
						case 3:
						printf("\nDiantra:\"The spell didn't work!\"");
						preEnter();
						break;
					}
					break;
					case lonely:
					printf("\nDiantra:\"I was able to get them under my control!");
					preEnter();
					clearBox();
					printf("\nDiantra:\"Want me to set them free or recruit them?\"");
					switch(options("What will you do?","Set the spirit free","Recruit the spirit","","",2,0,25))
					{
						case 1:
						clearBox();
						printf("\nDiantra set the spirit free...");
						preEnter();
						enemy.health = 0;
						break;
						case 2:
						clearBox();
						if(inboxFull() == false)
						{
							addMember();
							talker = true;
							enemy.health = 0;
						}
						else
						{
							printf("\nDiantra:\"We don't have enough space... I can't");
							printf("\n          hold on the spell much longer...\"");
							preEnter();
						}	
						break;
					}	
					break;
				}
				break;
			}
		}
		else if(strcmp("Kage",inbox[pep].data) == 0 && enemy.health > 0 && inbox[pep].health > 0 && talker != true && inbox[pep].humanPerson == true && inbox[pep].personality == kageP) // checks if kage is in the party
		{
			clearBox();
			printf("\n%s HP:%d",enemy.data,enemy.health);
			printf("\nWhat will %s do?",inbox[pep].data);
			switch(options("","Throw a Card - Throw a card to attack","Gambler Special - Kage's Card Tech","Bribe - Use money to convince the enemy to leave","",3,1,24))
			{
				case 1:
				clearBox();	
				if(inbox[pep].speed < enemy.speed)
				{
					switch(rand()%2+1)
					{
						case 1:
						printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
						preEnter();
						break;
						case 2:
						power = rand()%inbox[pep].speed+1;
						printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
						preEnter();
						break;
					}
				}	
				else
				{
					printf("\nKage threw a card at %s",enemy.data);
					preEnter();
					switch(rand()%4+1)
					{
						case 1:
						power = 0;
						printf("\nThe card didn't land!");
						break;
						case 2:
						case 3:	
						power = inbox[pep].attac + inbox[pep].speed%10;
						printf("\nGot a card in for %d damage!",power);
						break;
						case 4:
						power = inbox[pep].attac * 2;
						printf("\nCritcal hit! %d damage landed",power);
						break;
					}
					preEnter();
					enemy.health = enemy.health - power;
				}	
				break;
				case 2:
				clearBox();
				printf("\nKage holds up four cards at you");
				printf("\nKage:\"Pick a card, any card!\"");
				switch(options("","The first card","The second card","The third card","The fourth card",4,0,26))
				{
					case 1:
					clearBox();
					if(good > evil)
					{
						power = inbox[pep].attac + good;
						printf("\nKage:\"Burning Dread!\"");
						printf("\nA red flame engulfed the card and Kage threw it");
						printf("\nresulting in %d damage!",power);
					}
					else
					{
						power = inbox[pep].attac + evil;
						printf("\nKage:\"Conception Thunder!\"");;
						printf("\nA black bolt of lightning sprung from");
						printf("\nthe card and struck %s for %d damage.",enemy.data,power);
					}
					break;
					case 2:
					clearBox();
					if(money%20+1 > sparedFoes)
					{
						power = inbox[pep].attac + money%20+1;
						printf("\nKage:\"Gambler's Greed\"");
						printf("\nThe card turned golden and Kage threw it");
						printf("\nfor %d damage.",power);
					}
					else
					{
						power = inbox[pep].attac + sparedFoes;
						printf("\nKage:\"Kind Revelation\"");
						printf("\nThe card turned blue and Kage threw it");
						printf("\nfor %d damage.",power);
					}
					break;
					case 3:
					clearBox();
					if(attack > defense)
					{
						power = inbox[pep].attac + attack;
						printf("\nKage:\"Buster Brave!\"");
						printf("\nKage threw the card for %d damage.",power);
					}
					else
					{
						power = inbox[pep].attac + defense;
						printf("\nKage:\"Goofy Defense!\"");
						printf("\nKage spun the card and threw it for");
						printf("\n%d damage.",power);
					}
					break;
					case 4:
					clearBox();
					if(fortune >= 0 && fortune <  5)
					{
						power = inbox[pep].attac + rand()%20+1;
						printf("\nKage:\"Hyper Light Dancer!\"");
						printf("\nKage threw the card and an extra");
						printf("\ncard for %d damage.",power);
					}
					else if(fortune >= 5 && fortune < 8)
					{
						power = inbox[pep].attac + inbox[pep].maxHP;
						printf("\nKage:\"Shovel Knife!\"");
						printf("\nKage jumped into the air and hit");
						printf("\n%s with the flat part of the card");
						printf("\nfor %d damage.",power);
						preEnter();
					}
					else
					{
						power = inbox[pep].attac;
						printf("\nKage just threw the card noramlly");
						printf("\nfor %d damage",power);
					}	
					break;
				}
				preEnter();
				enemy.health = enemy.health - power;
				break;
				case 3:
				clearBox();
				printf("\nKage:\"Yo %s, I have a deal for ya\"",enemy.data);
				preEnter();
				dealings = rand()%enemy.maxHP+rand()%inbox[pep].health+1;
				if(dealings > money)
					dealings = rand()%20+1;
				printf("\nKage:\"I'll offer you %d if you leave us alone\"",dealings);
				preEnter();
				clearBox();
				switch(enemy.personality)
				{
					default:
					printf("\n%s:\"No thanks\"",enemy.data);
					preEnter();
					break;
					case bossy:
					case angry:
					dealings = dealings + rand()%20+1;	
					printf("\n%s:\"Nah how about %d?\"",enemy.data,dealings);
					switch(options("Take up the deal?","Yes","No","","",2,0,25))
					{
						case 1:
						clearBox();
						if(dealings > money)
						{
							printf("\n%s:\"Ah come on man you don't have enough!\"",enemy.data);
						}
						else
						{
							printf("\n%s:\"hehe thanks\"",enemy.data);
							talker = true;
							enemy.health = 0;
							money = money - dealings;
						}
						preEnter();
						break;
						case 2:
						clearBox();
						printf("\n%s:\"Fine then buster!\"",enemy.data);
						preEnter();
						break;	
					}
					break;
					case happy:
					printf("\n%s:\"YAY FREE MONEY!\"",enemy.data);
					printf("\n%s took the cash and ran off",enemy.data);
					money = money - dealings;
					talker = true;
					enemy.health = 0;
					preEnter();
					break;
					case sad:
					case neutral:
					switch(rand()%2+1)
					{
						case 1:
						dealings = dealings + rand()%20+1;	
						printf("\n%s:\"Nah how about %d?\"",enemy.data,dealings);
						switch(options("Take up the deal?","Yes","No","","",2,0,25))
						{
							case 1:
							clearBox();
							if(dealings > money)
							{
								printf("\n%s:\"Ah come on man you don't have enough!\"",enemy.data);
							}
							else
							{
								printf("\n%s:\"hehe thanks\"",enemy.data);
								talker = true;
								enemy.health = 0;
								money = money - dealings;
							}
							preEnter();
							break;
							case 2:
							clearBox();
							printf("\n%s:\"Fine then buster!\"",enemy.data);
							preEnter();
							break;	
						}
						break;
						case 2:
						printf("\n%s:\"Sure.\"",enemy.data);
						printf("\n%s took the cash and ran off",enemy.data);
						money = money - dealings;
						talker = true;
						enemy.health = 0;
						preEnter();
						break;	
					}	
					break;
				}
				break;
			}
		}
		else if(strcmp("Gilgahin",inbox[pep].data) == 0 && enemy.health > 0 && inbox[pep].health > 0 && talker != true && inbox[pep].humanPerson == true && inbox[pep].personality == gilg) // checks if gilgahin is in the party
		{
			clearBox();
			printf("\n%s HP:%d",enemy.data,enemy.health);
			printf("\nWhat will %s do?",inbox[pep].data);
			switch(options("","Fire Shotgun - A gun attack","Flamethrower - Gilgahin's Special","Demonic Blast","",3,1,24))
			{
				case 1:
				clearBox();
				if(enemyDodger == 5)
				{
					power = 0;
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();
				}
				else if(inbox[pep].speed < enemy.speed)
				{
					switch(rand()%2+1)
					{
						case 1:
						power = 0;
						printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
						preEnter();
						break;
						case 2:
						power = rand()%inbox[pep].speed+1;
						printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
						preEnter();
						break;
					}
				}
				else
				{
					enemyDodger = 5;
					power = inbox[pep].attac + neutrala;
					printf("\n%s fired his shotgun at",inbox[pep].data);
					printf("\n%s for %d damage",enemy.data,power);
					preEnter();
				}
				enemy.health = enemy.health - power;
				break;
				case 2:
				clearBox();
				power = inbox[pep].attac + rand()%(neutrala*2)+1;
				printf("\nGilgahin loaded a flame cartridge into his");
				printf("\nshotgun and blew flames at %s for %d damage",enemy.data,power);
				preEnter();
				enemy.health = enemy.health - power;
				break;
				case 3:
				clearBox();
				printf("\nGilgahin blasted a gray beam at");
				printf("\n%s for %d damage",enemy.data,neutrala);
				preEnter();	
				enemy.health = enemy.health - neutrala;
				break;
			}
			
		}
		else if(strcmp("Drake",inbox[pep].data) == 0 && enemy.health > 0 && inbox[pep].health > 0 && talker != true && inbox[pep].humanPerson == true && inbox[pep].personality == drakP) // checks if drake is in the party
		{
			clearBox();
			printf("\n%s HP:%d",enemy.data,enemy.health);
			printf("\nWhat will %s do?",inbox[pep].data);
			if(drakeTransform == false)
			{
				switch(options("","Slash - A cut attack","Transform into Dragon Form - Transform into dragon form","Capture enemy","Canon Arm - A gun attack",4,1,24))
				{
					case 1:
					clearBox();
					if(enemyDodger == 2)
					{
						power = 0;
						printf("\n%s saw the attack coming and dodged!",enemy.data);
						preEnter();
					}
					else if(inbox[pep].speed < enemy.speed)
					{
						switch(rand()%2+1)
						{
							case 1:
							power = 0;
							printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
							preEnter();
							break;
							case 2:
							power = rand()%inbox[pep].speed+1;
							printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
							preEnter();
							break;
						}
						enemy.health = enemy.health - power;
					}
					else
					{
						enemyDodger = 2;
						power = inbox[pep].attac + rand()%inbox[pep].reflect+1;
						printf("\nDrake slashed at %s for %d damage",enemy.data,power);
						preEnter();
						enemy.health = enemy.health - power;
					}
					break;
					case 2:
					clearBox();
					printf("\nDrake transformed into");
					printf("\nis dragon form!");
					preEnter();
					drakeTransform = true;
					break;
					case 3:
					clearBox();
					printf("\nDrake ran at %s and grabbed them!",enemy.data);
					preEnter();
					if(inboxFull() == false || enemy.personality <= 6)
					{
						if(inbox[pep].health >= enemy.health)
						{
							switch(rand()%6+1)
							{
								case 1:
								case 2:
								printf("\n%s was caught instantly!",enemy.data);
								addMember();
								enemy.health = 0;
								talker = true;
								break;
								default:
								printf("\n%s escaped!",enemy.data);
								preEnter();
								break;
							}
						}
						else
						{
							printf("\nDrake wasn't strong enough to capture");
							printf("\n%s",enemy.data);
						}
					}
					else
					{
						printf("\n%s broke out of Drake's grab!",enemy.data);
						preEnter();
					}
					break;
					case 4:
					clearBox();
					if(enemyDodger == 5)
					{
						power = 0;
						printf("\n%s saw the attack coming and dodged!",enemy.data);
						preEnter();
					}
					else if(inbox[pep].speed < enemy.speed)
					{
						switch(rand()%2+1)
						{
							case 1:
							power = 0;
							printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
							preEnter();
							break;
							case 2:
							power = rand()%inbox[pep].speed+1;
							printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
							preEnter();
							break;
						}
						enemy.health = enemy.health - power;		
					}
					else
					{
						power = inbox[pep].attac;
						enemyDodger = 5;
						printf("\nDrake fired his canon arm");
						printf("\nfor %d damage",power);
						preEnter();	
						enemy.health = enemy.health - power;
					}	
					break;
				}
			}
			else
			{
				power = inbox[pep].attac * 2;
				if(power < defense)
				 power = inbox[pep].attac;	
				switch(rand()%3+1)
				{
					case 1:
					printf("\nDrake went berserk and slashed");
					printf("\nat %s for %d damage!",enemy.data,power);
					enemy.health = enemy.health - power;
					break;
					case 2:	
					printf("\nDrake attacked you for %d!",power);
					health = health - power;
					updateHealth();
					break;
					case 3:
					power = rand()%inbox[pep].lv+1;
					printf("\nDrake roared and regained health");
					preEnter();
					inbox[pep].health = inbox[pep].health + power;
					if(inbox[pep].health > inbox[pep].maxHP)
						inbox[pep].health = inbox[pep].maxHP;
					break;
				}
				preEnter();
			}
		}
		else if(strcmp("Westland",inbox[pep].data) == 0 && enemy.health > 0 && inbox[pep].health > 0 && talker != true && inbox[pep].humanPerson == true && inbox[pep].personality == west) // checks if westland is in the party
		{
			gamer:
			clearBox();
			printf("\n%s HP:%d",enemy.data,enemy.health);
			printf("\nWhat will %s do?",inbox[pep].data);
			switch(options("","Thurst - A stab attack","Slash - A cut attack","Last Surprise - Deal damage using health","",3,1,24))
			{
				case 2:
				clearBox();
				if(enemyDodger == 2)
				{
					power = 0;
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();
				}
				else if(inbox[pep].speed < enemy.speed)
				{
					switch(rand()%2+1)
					{
						case 1:
						power = 0;
						printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
						preEnter();
						break;
						case 2:
						power = rand()%inbox[pep].speed+1;
						printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
						preEnter();
						break;
					}
					enemy.health = enemy.health - power;
				}
				else
				{
					enemyDodger = 2;
					power = inbox[pep].attac + rand()%inbox[pep].reflect+1;
					printf("\nWestland slashed at %s for %d damage",enemy.data,power);
					preEnter();
					enemy.health = enemy.health - power;
				}
				break;
				case 1:
				clearBox();
				if(enemyDodger == 1)
				{
					power = 0;
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();
				}
				else if(inbox[pep].speed < enemy.speed)
				{
					switch(rand()%2+1)
					{
						case 1:
						power = 0;
						printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
						preEnter();
						break;
						case 2:
						power = rand()%inbox[pep].speed+1;
						printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
						preEnter();
						break;
					}
					enemy.health = enemy.health - power;
				}
				else
				{
					enemyDodger = 1;
					power = inbox[pep].attac + rand()%inbox[pep].reflect+1;
					printf("\nWestland stabbed %s for %d damage",enemy.data,power);
					preEnter();
					enemy.health = enemy.health - power;
				}
				break;
				case 3:
				clearBox();
				power = rand()%inbox[pep].health+1;
				inbox[pep].health = inbox[pep].health - power;
				printf("\nWestland sacrificed %d health and",power);
				printf("\nshot a beam of darkness at %s",enemy.data);
				printf("\nfor %d damage!",power);
				preEnter();
				enemy.health = enemy.health - power;
				break;
			}		
		}
		else if(strcmp("Sarah",inbox[pep].data) == 0 && enemy.health > 0 && inbox[pep].health > 0 && talker != true && inbox[pep].humanPerson == true && inbox[pep].personality == sarahP) // checks if sarah is in the party
		{
			clearBox();
			printf("\n%s HP:%d",enemy.data,enemy.health);
			printf("\nWhat will %s do?",inbox[pep].data);
			switch(options("","Fire Arrows - A bow attack","Knife Stab - A stab attack","Kick - kick the enemy","",3,1,24))
			{
				case 1:
				clearBox();
				if(enemyDodger == 5)
				{
					power = 0;
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();
					
				}
				else if(inbox[pep].speed < enemy.speed)
				{
					switch(rand()%2+1)
					{
						case 1:
						power = 0;
						printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
						preEnter();
						break;
						case 2:
						power = rand()%inbox[pep].speed+1;
						printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
						preEnter();
						enemyDodger = 5;
						break;
					}
				}
				else
				{
					enemyDodger = 5;
					power = inbox[pep].attac + rand()%10+1;
					printf("\n%s fired arrows from her bow at",inbox[pep].data);
					printf("\n%s for %d damage",enemy.data,power);
					preEnter();
				}
				enemy.health = enemy.health - power;
				break;
				case 2:
				clearBox();
				if(enemyDodger == 1)
				{
					power = 0;
					printf("\n%s saw the attack coming and dodged!",enemy.data);
					preEnter();
				}
				else if(inbox[pep].speed < enemy.speed)
				{
					switch(rand()%2+1)
					{
						case 1:
						power = 0;
						printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
						preEnter();
						break;
						case 2:
						power = rand()%inbox[pep].speed+1;
						printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
						preEnter();
						break;
					}
				}
				else
				{
					enemyDodger = 1;
					power = inbox[pep].attac + rand()%inbox[pep].reflect+1;
					printf("\nSarah stabbed at %s for %d damage",enemy.data,power);
					preEnter();
				}
				enemy.health = enemy.health - power;
				break;
				case 3:
				clearBox();
				if(inbox[pep].speed < enemy.speed)
				{
					switch(rand()%2+1)
					{
						case 1:
						power = 0;
						printf("\n%s wasn't fast enough to land a blow!",inbox[pep].data);
						preEnter();
						break;
						case 2:
						power = rand()%inbox[pep].speed+1;
						printf("\n%s barely landed %d damage on %s",inbox[pep].data,power,enemy.data);	
						preEnter();
						break;
					}
				}
				else
				{
					power = rand()%inbox[pep].attac+1;
					printf("\n%s kicked %s for %d damage",inbox[pep].data,enemy.data,power);
				}
				enemy.health = enemy.health - power;	
				break;
			}
		}
		else if(partyMemberHere(x) == true && enemy.health > 0 && inbox[pep].health > 0 && talker != true)
		{
			clearBox();
			power = power-enemy.reflect;
			if(power < 0)
			{
				power = 1;
			}
			printf("\n%s HP:%d",enemy.data,enemy.health);
			printf("\nWhat will %s do?",inbox[pep].data);
			switch(options("","Attack","Convince enemy to join your side","Pass turn","",3,1,24))
			{
				case 1:
				tryHard:	
				position = ((rand()%10+agility)*10)%100;
				enemyDodger = ((rand()%10+enemy.speed)*10)%100;
				clearBox();	
				power = inbox[pep].attac;
				switch(inbox[pep].type)
				{
					case sword:
					case lance:
					case axe:
					printf("%s attacked %s!",inbox[pep].data,enemy.data);
					break;
					case bow:
					case gun:
					printf("%s fired a projectile at %s",inbox[pep].data,enemy.data);
					break;	
					case combo:
					printf("%s slashed and fired a projectile \nat %s!",inbox[pep].data,enemy.data);
					break;	
				}
				preEnter();
				clearBox();
				if(enemyDodger > position) // if the enemy is faster it'll reduce the damage even if it hits
				{
					power = power - rand()%enemy.speed+1;
				}
				if(power < 0) // makes sure the damage isn't negative
				{
					power = 1;
				}
				if(position > enemyDodger && triedAgain != true)
				{
					power = power * 2;
					if(enemy.weakness == inbox[pep].type)
					{
						printf("\n%s was weak against the attack!");
						power = power + rand()%inbox[pep].attac;
					}
					printf("\n%s successfully lands a blow on \n%s for %d damage and \ncan attack again",inbox[pep].data,enemy.data,power);
					if(fortune == 2)
					{
						power = power + rand()%5+1;
					}
					enemy.health = enemy.health - power;
					preEnter();
					triedAgain = true;		
					goto tryHard;
				}	
				else if(position == enemyDodger || position > enemy.speed*10 || (triedAgain == true && position > enemyDodger))
				{
					if(enemy.weakness == inbox[pep].type)
					{
						printf("\n%s was weak against the attack!");
						power = power + rand()%inbox[pep].attac;
					}
					printf("\n%s landed a blow on %s with a \nnormal attack for %d damage",inbox[pep].data,enemy.data,power);
					preEnter();
					if(fortune == 2)
					{
						power = power + rand()%5+1;
					}
					enemy.health = enemy.health - power;
				}
				else
				{		
					printf("\n%s's attack missed!?",inbox[pep].data);
					preEnter();	
				}
				break;
				case 2:
				clearBox();
				printf("\n%s tried to convince \n%s to hear you out",inbox[pep].data,enemy.data);
				preEnter();
				if(strcmp(enemy.data,"Guard") == 0 || enemy.personality == boss1)
				{
					printf("\n%s:\"What the hell are you!?\"",enemy.data);
					preEnter();
					clearBox();
				}
				else if(inbox[pep].personality == enemy.personality)
				{
					printf("\n%s was able to convince them and they seem to",inbox[pep].data);
					printf("\nwant to join you.");
					enemy.personality = lonely;
					preEnter();
					clearBox();
					talkTime();
				}
				else if(enemy.personality == inbox[pep].personality+1 || enemy.personality == inbox[pep].personality-1)
				{
					printf("\n%s got them to listen to you",inbox[pep].data);
					preEnter();
					clearBox();
					if(makeDeal() == 1)
					{
						enemy.health = 0;
						talker = 0;
					}
				}
				else
				{
					switch(rand()%4+1)
					{
						case happy:
						printf("\n%s got them excited",inbox[pep].data);
						enemy.personality = happy;
						break;
						case sad:
						printf("\n%s made them depressed",inbox[pep].data);
						enemy.personality = sad;	
						break;
						case angry:
						printf("\n%s got them angry!!",inbox[pep].data);
						enemy.personality = angry;
						break;
						case neutral:
						printf("\n%s didn't care what they said",enemy.data);
						enemy.personality = neutral;
						break;
					}
					preEnter();
				}	
				break;
				case 3:
				clearBox();
				printf("\n%s passed their turn",inbox[pep].data);
				preEnter();
				break;
			}
		}
	}
}		

void levelUp (int partyMember) // used when a party member levels up
{
	srand((unsigned)time(NULL));
	bool leveler = false; // checks if the player is done
	int pointer = rand()%2+1; // the amount of points the player gets for increasing stats
	int input; // input of the player
	int attackPoints = 0; // points added to attack
	int defensePoints = 0; // points added to defense
	int agilityPoints = 0; // points added to agility;
	int selection = 1; // the position of the cursor
	int checker;
	int x;
	int pep;
	
	system("cls");
	
	if(partyMember == 0) // the player levels up
	{
		level = level + 1;
		experience = 0;
		maxXP = maxXP + (25*level*pointer);
		maxHealth = maxHealth + 10;
		health=maxHealth;
		switch(alignmentCheck())
		{
			case optimist:
			case unknown:
			case bright:
			aid++;
			break;
			case mysterious:
			case mysteriousCar:
			createSprtlv++;	
			break;
			case complex:
			case harsh:
			switch(rand()%2+1)
			{
				case 1:
				plasmaLv++;
				break;
				case 2:
				magicSwordLv++;	
				break;
			}
			break;
		}
		while(leveler == false)
		{
			system("cls");
			printf("\n%s's spirit grew",name);
			printf("\nExtra Points:%d",pointer);
			printf("\nPress the left and right keys to increase points and escape when you are done");
			printf("\n  Attack:%d",attack+attackPoints);
			printf("\n  Defense:%d",defense+defensePoints);
			printf("\n  Agility:%d",agility+agilityPoints);
			printAt('>',0,selection+3);
			input = getch();
			switch(input)
			{
				case 72:
				if(selection!=1)
					selection = selection - 1;
				break;
				case 80:
				if(selection != 3)
					selection = selection + 1;
				break;
				case 77: // right
				switch(selection)
				{
					case 1:
					if(pointer != 0)
					{
						pointer = pointer - 1;
						attackPoints = attackPoints + 1;
					}
					break;
					case 2:
					if(pointer != 0)
					{
						pointer = pointer - 1;
						defensePoints = defensePoints + 1;
					}
					break;
					case 3:
					if(pointer != 0)
					{
						pointer = pointer - 1;
						agilityPoints = agilityPoints + 1;
					}
					break;
				}	
				break;
				case 75: // left
				switch(selection)
				{
					case 1:
					if(attackPoints != 0)
					{
						attackPoints = attackPoints - 1;
						pointer = pointer + 1;
					}
					break;
					case 2:
					if(defensePoints != 0)
					{
						defensePoints = defensePoints - 1;
						pointer = pointer + 1;
					}
					break;
					case 3:
					if(agilityPoints != 0)	
					{	
						agilityPoints = agilityPoints - 1;
						pointer = pointer + 1;
					}
					break;
				}
				break;
				system("cls");
				case 27:
				setCursor(0,10);
				printf("\nAre you sure you're done?(y/n):");
				checker = getch();
				if(checker == 'y')
				{
					leveler = true;
				}	
				else if(checker == 'n')
				{
					system("cls");
				}	
				break;
			}	
		}
		attack = attack + attackPoints;
		defense = defense + defensePoints;
		agility = agility + agilityPoints;
	}
	else // other party members level up
	{
		partyMember = partyMember - 1;
		pep = party[partyMember];
		inbox[pep].lv = inbox[pep].lv +1;
		inbox[pep].exp = 0;
		inbox[pep].maxExp = inbox[pep].maxExp + 40*inbox[pep].lv*pointer;
		inbox[pep].maxHP = inbox[pep].maxHP + inbox[pep].maxHP/inbox[pep].lv;
		inbox[pep].health= inbox[pep].maxHP;
		while(leveler == false)
		{
			system("cls");
			printf("\n%s leveled up!",inbox[pep].data);
			printf("\nExtra Points:%d",pointer);
			printf("\nPress the left and right keys to increase points and escape when you are done");
			printf("\n  Attack:%d",inbox[pep].attac+attackPoints);
			printf("\n  Defense:%d",inbox[pep].reflect+defensePoints);
			printf("\n  Agility:%d",inbox[pep].speed+agilityPoints);
			printAt('>',0,selection+3);
			input = getch();
			switch(input)
			{
				case 72:
				if(selection!=1)
					selection = selection - 1;
				break;
				case 80:
				if(selection != 3)
					selection = selection + 1;
				break;
				case 77: // right
				switch(selection)
				{
					case 1:
					if(pointer != 0)
					{
						pointer = pointer - 1;
						attackPoints = attackPoints + 1;
					}
					break;
					case 2:
					if(pointer != 0)
					{
						pointer = pointer - 1;
						defensePoints = defensePoints + 1;
					}
					break;
					case 3:
					if(pointer != 0)
					{
						pointer = pointer - 1;
						agilityPoints = agilityPoints + 1;
					}
					break;
				}	
				break;
				case 75: // left
				switch(selection)
				{
					case 1:
					if(attackPoints != 0)
					{
						attackPoints = attackPoints - 1;
						pointer = pointer + 1;
					}
					break;
					case 2:
					if(defensePoints != 0)
					{
						defensePoints = defensePoints - 1;
						pointer = pointer + 1;
					}
					break;
					case 3:
					if(agilityPoints != 0)	
					{	
						agilityPoints = agilityPoints - 1;
						pointer = pointer + 1;
					}
					break;
				}
				break;
				case 27:
				system("cls");
				printf("\nAre you sure you're done?(y/n):");
				checker = getch();
				if(checker == 'y')
				{
					leveler = true;
				}	
				else if(checker == 'n')
				{
					system("cls");
				}	
				break;
			}	
		}
		inbox[pep].attac = inbox[pep].attac + attackPoints;
		inbox[pep].reflect = inbox[pep].reflect + defensePoints;
		inbox[pep].speed = inbox[pep].speed + agilityPoints;
	}
}	

void genericMelee(int mag) /// used when a thrust or slash attack is used
{
	srand((unsigned)time(NULL));
	
	int power;
	int input = 0;
	int enemyDodge;
	int position;
	int x;
	bool triedAgain = false; // did the player loop back because they had more agility when they missed?
	
	power = attack+storage[mag].ATT;
		
	tryAgain:	
	
	input = 0;
	power = attack+storage[mag].ATT+(rand()%level+1);
	position = ((rand()%10+agility)*10)%100;
	enemyDodger = ((rand()%10+enemy.speed)*10)%100;
	clearBox();
	power = power-enemy.reflect;
	if(power <= 0) // makes sure the damage isn't negative
	{
		power = 1;
	}
	if(position > enemyDodger && triedAgain != true)
	{
		power = power * 2;
		printf("\n%s successfully lands a blow on \n%s for %d damage and \ncan attack again",name,enemy.data,power);
		if(fortune == 2)
		{
			power = power + rand()%5+1;
		}
		enemy.health = enemy.health - power;
		power = attack+storage[mag].ATT;
		preEnter();
		triedAgain = true;
		goto tryAgain;
	}	
	else if(position == enemyDodger || position > enemy.speed*10 || (triedAgain == true && position > enemyDodger))
	{
		printf("\n%s landed a blow on %s with a \nnormal attack for %d damage",name,enemy.data,power);
		preEnter();
		if(fortune == 2)
		{
			power = power + rand()%5+1;
		}
		enemy.health = enemy.health - power;
	}
	else
	{	
		if(power < enemy.reflect)
		{
			printf("\n%s's attack was deflected",name);
		}
		else
			printf("\n%s's attack missed!?",name);
		preEnter();	
		goto misses;
	}
	if(enemy.health <= 0)
		goto misses;
	misses:
	clearBox();		
}

void gunAttack(int mag) // processes gun attacks in combat
{
	srand((unsigned)time(NULL));
	
	int input = 0;
	int hitter;
	int accura = 0;
	int power = 0;
	int load = 1;	
	int y;
	
	clearBox();
	while(input != 13)
	{
		for(y=28;y<30;y++)
			printString("                                             ",0,y);
		setCursor(0,22);
		if(power > enemy.reflect)
		{
			power = (attack + storage[mag].ATT)*load;
		}
		else
		{
			power = (attack)*load;
		}
		accura = ((storage[mag].lvl*10 - load)*10)%100;
		printf("\nHow much ammunition will you load into the %s?",storage[mag].label);
		printf("\nUse the right arrow to increase the number \nof bullets and left to decrease,");
		printf("\nwhen you are done press enter");
		printf("\nAmmunition:%d",ammunition);
		printf("\nAccuracy:%d percent",accura);
		printf("\nDamage:%d",power);
		if(storage[mag].type == gun || storage[mag].type == combo)
			printf("\nBullets Loaded:%d/%d",load,storage[mag].chamber);
		else
			printf("\nArrows Loaded:%d/%d",load,storage[mag].chamber);
		input = getch();
		switch(input)
		{
			case 75:
			if(load > 1)
				load = load - 1;
			break;
			case 77:
			if(load != storage[mag].chamber && load != ammunition)
				load = load + 1;
			break;
		}
	}
	clearBox();
	printf("\n%s fired the %s",name,storage[mag].label);
	preEnter();
	clearBox();
	hitter = rand()%accura+10;
	if(hitter <= 40) // if the shot(s) missed
	{
		if(load > 1)
			printf("\nThe shots missed");
		else	
			printf("\nThe shot missed");
		storage[mag].value = storage[mag].value - 1;
	}
	else // if the shot(s) hit
	{	
		if(hitter <= 90 && power > enemy.reflect)
		{
			if(fortune == 2)
		    {
		    	power = power + rand()%5+1;
		    }
			enemy.health = enemy.health - power;
			if(load > 1)
				printf("\nThe shots hit %s for %d damage",enemy.data,power);
			else		
				printf("\nThe shot hit %s for %d damage",enemy.data,power);
			if(enemy.weakness == gun)
			{
				printf("\n%s was weak against the attack!",enemy.data);
				enemy.health = enemy.health - rand()%storage[mag].ATT+1;
			}
		}
		else
		{
			power = power * 2;
			if(fortune == 2)
			{
				power = power + rand()%5+1;
			}
			enemy.health = enemy.health - power;
			if(load > 1)
				printf("\nThe shots successfully hit %s \nfor a critical hit and %d damage",enemy.data,power);
			else	
				printf("\nThe shot successfully hit %s \nfor a critical hit and %d damage",enemy.data,power);
			if(enemy.weakness == gun)
			{
				printf("\n%s was weak against the attack!",enemy.data);
				enemy.health = enemy.health - rand()%storage[mag].ATT+1;
			}
		}	
	}
	preEnter();
	ammunition = ammunition - load;
}

void weaponTech(int mag) // used for weapon techs
{
	int x;
	int inputs[storage[mag].lvl];
	int power = 0;
	
	int enemyDodge;
	
	enemyDodge = rand()%4+1;
	
	clearBox();
	
	printf("\nEnter an arrow key:"); // gets input for the techniques
	for(x=0;x<storage[mag].lvl;x++)
	{
		mistake:
		switch(getch())
		{
			case 72:
			printf("UP ");
			inputs[x] = 1;
			break;
			case 75:
			printf("LEFT ");
			inputs[x] = 2;
			break;
			case 80:
			printf("DOWN ");
			inputs[x] = 3;
			break;
			case 77:
			printf("RIGHT ");
			inputs[x] = 4;
			break;
			default:
			goto mistake;
			break;
		}
		if(x == 5)
		{
			printf("\n");
		}
	}
	preEnter();
	// processes inputs to define what move the player did
	clearBox();
	for(x=0;x<storage[mag].lvl;x++) // adds damage multiplier depending on the enemy position
	{
		switch(inputs[x])
		{
			case 1:
			switch(storage[mag].type)
			{
				case sword:
				printf("Red ");
				break;	
				case axe:
				printf("Savage ");
				break;
				case lance:
				printf("Stardust ");	
				break;
				case combo:
				printf("Laser ");	
				break;	
			}
			if(enemyDodge == 1)
			{
				power = power + 2;
			}
			else if(enemyDodge != 3)
			{
				power = power + 1;
			}
			break;
			case 2:
			switch(storage[mag].type)
			{
				case sword:
				printf("Raging ");	
				break;		
				case axe:
				printf("Screaming ");	
				break;
				case lance:
				printf("Eligant ");	
				break;
				case combo:
				printf("Storming ");
				break;	
			}
			if(enemyDodge == 2)
			{
				power = power + 2;
			}
			else if(enemyDodge != 4)
			{
				power = power + 1;
			}
			break;
			case 3:
			switch(storage[mag].type)
			{
				case sword:
				printf("Intelligent ");	
				break;	
				case axe:
				printf("Berserk ");	
				break;
				case lance:
				printf("Smart ");	
				break;
				case combo:
				printf("Unique ");	
				break;	
			}
			if(enemyDodge == 3)
			{
				power = power + 2;
			}
			else if(enemyDodge != 1)
			{
				power = power + 1;
			}
			break;
			case 4:
			switch(storage[mag].type)
			{
				case sword:
				printf("Diagonal ");	
				break;	
				case axe:
				printf("Sideways ");	
				break;
				case lance:
				printf("Fallen ");	
				break;
				case combo:
				printf("Rising ");	
				break;	
			}	
			if(enemyDodge == 4)
			{
				power = power + 2;
			}
			else if(enemyDodge != 2)
			{
				power = power + 1;
			}
			break;	
		}
	}
	switch(storage[mag].type)
	{
		case sword:
		switch(rand()%2+1)
		{
			case 1:
			printf("Slash!");	
			break;
			case 2:
			printf("Cut!");
			break;
		}
		break;	
		case axe:
		printf("Chop!");	
		break;
		case lance:
		printf("Diver!");
		break;
		case combo:
		switch(rand()%2+1)
		{
			case 1:
			printf("Buster!");	
			break;
			case 2:
			printf("Slash!");
			break;
		}
		break;	
	}
	preEnter();
	if(power == 0)
	{
		printf("\n%s's move missed!?",name);
	}
	else
	{
		power = power * storage[mag].ATT;
		if(fortune == 2)
		{
			power = power + rand()%5+1;
		}
		printf("\n%s used a custom move for %d damage!",name,power);
		enemy.health = enemy.health - power;
	}
	preEnter();
}

void meleeAttack(int mag) // processes melee attack in combat and specifies which attack type
{
	clearBox();
	switch(storage[mag].type)
	{
		case sword:
		switch(options("What attack would you like to use?","Thrust - A stab attack","Slash - Swing your sword","Sword Tech - Use a combo attack using arrow key input","",3,0,24))	
		{
			case 1: // thrust
			if(enemyDodger == 1)
			{
				clearBox();
				printf("\n%s saw the attack coming and dodged!",enemy.data);
				preEnter();
			}
			else
			{
				genericMelee(mag);
				enemyDodger = 1;
			}
			break;
			case 2: // slash
			if(enemyDodger == 2)
			{
				clearBox();
				printf("\n%s saw the attack coming and dodged!",enemy.data);
				preEnter();
			}
			else
			{
				genericMelee(mag);
				enemyDodger = 2;
			}	
			break;
			case 3: // sword tech
			if(enemyDodger == 3)
			{
				clearBox();
				printf("\n%s saw the attack coming and dodged!",enemy.data);
				preEnter();
			}
			else
			{
				weaponTech(mag);
				enemyDodger = 3;	
			}
			break;	
		}
		break;
		case lance:
		switch(options("What attack would you like to use?","Thrust - A stab attack","Lance Tech - Use a combo attack using arrow key input","","",2,0,24))	
		{
			case 1: // thrust
			if(enemyDodger == 1)
			{
				clearBox();
				printf("\n%s saw the attack coming and dodged!",enemy.data);
				preEnter();
			}
			else
			{
				genericMelee(mag);
				enemyDodger = 1;
			}
			break;
			case 2: // lance tech
			if(enemyDodger == 4)
			{
				clearBox();
				printf("\n%s saw the attack coming and dodged!",enemy.data);
				preEnter();
			}
			else
			{
				weaponTech(mag);
				enemyDodger = 4;
			}
			break;	
		}
		break;
		case axe:
		switch(options("What attack would you like to use?","Slash - Swing your axe","Axe Tech - Use a combo attack using arrow key input","","",2,0,24))	
		{
			case 1: // thrust
			if(enemyDodger == 2)
			{
				clearBox();
				printf("\n%s saw the attack coming and dodged!",enemy.data);
				preEnter();
			}
			else
			{
				genericMelee(mag);
				enemyDodger = 2;
			}
			break;
			case 2: // axe tech
			if(enemyDodger == 6)
			{
				clearBox();
				printf("\n%s saw the attack coming and dodged!",enemy.data);
				preEnter();
			}
			else
			{
				weaponTech(mag);
				enemyDodger = 6;	
			}
			break;	
		}
		break;
		case combo:
		switch(options("What attack would you like to use?","Thrust - A stab attack","Slash - Swing your weapon","Combination Tech - Use a combo attack using arrow key input","",3,0,24))	
		{
			case 1: // thrust
			if(enemyDodger == 1)
			{
				clearBox();
				printf("\n%s saw the attack coming and dodged!",enemy.data);
				preEnter();
			}
			else
			{
				genericMelee(mag);
				enemyDodger = 1;
			}
			break;
			case 2: // slash
			if(enemyDodger == 2)
			{
				clearBox();
				printf("\n%s saw the attack coming and dodged!",enemy.data);
				preEnter();
			}
			else
			{
				genericMelee(mag);
				enemyDodger = 1;
			}	
			break;
			case 3: // sword tech
			if(enemyDodger == 7)
			{
				clearBox();
				printf("\n%s saw the attack coming and dodged!",enemy.data);
				preEnter();
			}
			else
			{
				weaponTech(mag);
				enemyDodger = 7;	
			}
			break;	
		}	
		break;	
	}
}

int makeDeal() // when the player can make a deal with the enemy
{
	int casher; // for when cash is involved
	bool barg = false; // did the player bargain with the enemy?
	
	srand((unsigned)time(NULL));
	
	clearBox();
	printf("\n%s:\"Okay I'll make a deal with you\"",enemy.data);
	switch(options("What do you want?","To get them on my team","To get money from them","To stop fighting them","",3,0,24))
	{
		case 1:
		clearBox();
		switch(alignmentCheck())
		{
			case bright:
			case optimist:
			if(enemy.personality <= 2)
			{
				printf("\n%s:\"I'll gladly join you on your journey\"",enemy.data);	
				if(inboxFull() == false)
				{
					addMember();
					return 1;
				}	
				else
				{
					printf("\n%s:\"Oh well I guess I'll leave since your party is full'\"",enemy.data);
				}
			}
			else if(enemy.personality == 3 || enemy.personality == 5)
			{
				printf("\n%s:\"Nah, I don't think we would do well together\"",enemy.data);
				switch(options("What will you say?","\"I agree\"","\"How do you know?\"","","",2,0,27))
				{
					case 1:
					clearBox();
					printf("\n%s:\"Yeah\"",enemy.data);
					break;
					case 2:
					clearBox();
					switch(rand()%3+1)
					{
						case 1:
						printf("\n%s:\"I just do man\"",enemy.data);
						break;
						case 2:
						printf("\n%s:\"Be quiet!\"",enemy.data);
						break;
						case 3:
						if(inboxFull() == false)
						{
							printf("\n%s:\"Hmmm well I guess you're right...\"",enemy.data);
							preEnter();
							printf("\n%s:\"Yeah I'll join ya\"",enemy.data);
							addMember();
							return 1;
						}
						else
						{
							printf("\n%s:\"I just do man\"",enemy.data);
						}	
						break;
					}	
					break;
				}
			}
			else
			{
				printf("\n%s:\"No thanks, but I will stop fighting you.\"",enemy.data);
				switch(options("Let them leave?","Yes","No","","",2,0,24))
				{
					case 1:
					good = good + 1;
					return 1;
					break;
					case 2:
					evil = evil + 1;
					clearBox();
					printf("\n%s:\"Fine then!\"",enemy.data);
					break;
				}
			}
			break;
			case harsh:
			if(enemy.personality <= 2)
			{
				printf("\n%s:\"Nah, I don't think we would do well together\"",enemy.data);
				switch(options("What will you say?","\"I agree\"","\"How do you know?\"","","",2,0,27))
				{
					case 1:
					clearBox();
					printf("\n%s:\"Yeah\"",enemy.data);
					break;
					case 2:
					clearBox();
					switch(rand()%3+1)
					{
						case 1:
						printf("\n%s:\"I just do man\"",enemy.data);
						break;
						case 2:
						printf("\n%s:\"Be quiet!\"",enemy.data);
						break;
						case 3:
						if(inboxFull() == false)
						{
							printf("\n%s:\"Hmmm well I guess you're right...\"",enemy.data);
							preEnter();
							printf("\n%s:\"Yeah I'll join ya\"",enemy.data);
							addMember();
							return 1;
						}
						else
						{
							printf("\n%s:\"I just do man\"",enemy.data);
						}	
						break;
					}	
					break;
				}	
			}
			else if(enemy.personality == 3 || enemy.personality == 5)
			{
				printf("\n%s:\"I'll gladly join you on your journey\"",enemy.data);	
				if(inboxFull() == false)
				{
					addMember();
					return 1;
				}	
				else
				{
					printf("\n%s:\"Oh well I guess I'll leave since your party is full\"",enemy.data);
				}
			}
			else
			{
				printf("\n%s:\"No thanks, but I will stop fighting you.\"",enemy.data);
				switch(options("Let them leave?","Yes","No","","",2,0,24))
				{
					case 1:
					good = good + 1;
					return 1;
					break;
					case 2:
					evil = evil + 1;
					clearBox();
					printf("\n%s:\"Fine then!\"",enemy.data);
					break;
				}
			}
			break;
			case complex:
			case mysteriousCar:
			case mysterious:
			if(enemy.personality <= 2)
			{
				printf("\n%s:\"No thanks, but I will stop fighting you.\"",enemy.data);
				switch(options("Let them leave?","Yes","No","","",2,0,24))
				{
					case 1:
					good = good + 1;
					return 1;
					break;
					case 2:
					evil = evil + 1;
					clearBox();
					printf("\n%s:\"Fine then!\"",enemy.data);
					break;
				}
			}
			else if(enemy.personality == 3 || enemy.personality == 5)
			{
				printf("\n%s:\"Nah, I don't think we would do well together\"",enemy.data);
				switch(options("What will you say?","\"I agree\"","\"How do you know?\"","","",2,0,27))
				{
					case 1:
					clearBox();
					printf("\n%s:\"Yeah\"",enemy.data);
					break;
					case 2:
					clearBox();
					switch(rand()%3+1)
					{
						case 1:
						printf("\n%s:\"I just do man\"",enemy.data);
						break;
						case 2:
						printf("\n%s:\"Be quiet!\"",enemy.data);
						preEnter();	
						break;
						case 3:
						if(inboxFull() == false)
						{
							printf("\n%s:\"Hmmm well I guess you're right...\"",enemy.data);
							preEnter();
							printf("\n%s:\"Yeah I'll join ya\"",enemy.data);
							addMember();
							return 1;
						}
						else
						{
							printf("\n%s:\"I just do man\"",enemy.data);
						}	
						break;
					}	
					break;
				}
			}
			else
			{
				printf("\n%s:\"I'll gladly join you on your journey\"",enemy.data);	
				if(inboxFull() == false)
				{
					addMember();
					return 1;
				}	
				else
				{
					printf("\n%s:\"Oh well I guess I'll leave since your party is full\"",enemy.data);
				}
			}	
			break;
			case unknown:
			if(enemy.personality == 2)
			{
				printf("\n%s:\"I'll gladly join you on your journey\"",enemy.data);	
				if(inboxFull() == false)
				{
					addMember();
					return 1;
				}	
				else
				{
					printf("\n%s:\"Oh well I guess I'll leave since your party is full\"",enemy.data);
				}
			}
			else if(enemy.personality == 3 || enemy.personality == 5)
			{
				printf("\n%s:\"Nah, I don't think we would do well together\"",enemy.data);
				switch(options("What will you say?","\"I agree\"","\"How do you know?\"","","",2,0,27))
				{
					case 1:
					clearBox();
					printf("\n%s:\"Yeah\"",enemy.data);
					break;
					case 2:
					clearBox();
					switch(rand()%3+1)
					{
						case 1:
						printf("\n%s:\"I just do man\"",enemy.data);
						break;
						case 2:
						printf("\n%s:\"Be quiet!\"",enemy.data);
						break;
						case 3:
						if(inboxFull() == false)
						{
							printf("\n%s:\"Hmmm well I guess you're right...\"",enemy.data);
							preEnter();
							printf("\n%s:\"Yeah I'll join ya\"",enemy.data);
							addMember();
							return 1;
						}
						else
						{
							printf("\n%s:\"I just do man\"",enemy.data);
						}	
						break;
					}	
					break;
				}
			}
			else
			{
				printf("\n%s:\"No thanks, but I will stop fighting you.\"",enemy.data);
				switch(options("Let them leave?","Yes","No","","",2,0,24))
				{
					case 1:
					good = good + 1;
					return 1;
					break;
					case 2:
					evil = evil + 1;
					clearBox();
					printf("\n%s:\"Fine then!\"",enemy.data);
					break;
				}
			}	
			break;
		}
		break;
		case 2:
		clearBox();	
		evil = evil + 1;
		if(enemy.personality == bossy)
		{
			printf("\n%s:\"Yeah, no\"",enemy.data);
		}
		else
		{
			printf("\n%s:\"Fine then hot shot, how much do you want?\"",enemy.data);
			printf("\nEnter how much you want:$");
			scanf("%d",&casher);
			if(casher <= enemy.health*10+(rand()%100+100)+enemy.lv)
			{
				printf("\n%s:\"Ah I guess that'll work, here\"",enemy.data);
				money = money + casher;
				preEnter();
				return 1;
			}
			else
			{
				switch(rand()%2+1)
				{
					case 1:
					clearBox();
					casher = rand()%100+100+(enemy.lv*10);
					printf("\n%s:\"Hey uh... how about %d instead?\"",enemy.data,casher);
					switch(options("Accept the deal?","Yes","No","","",2,0,25))
					{
						case 1:
						clearBox();
						money = money + casher;
						printf("\n%s:\"Here you go then\"",enemy.data);
						preEnter();
						return 1;
						break;
						case 2:
						clearBox();
						printf("\n%s:\"Then I'm done with deals!\"",enemy.data);
						enemy.personality = angry;
						break;
					}
					break;
					case 2:
					clearBox();
					printf("\n%s:\"That's unfair! No way!\"",enemy.data);
					break;
				}
			}
		}
		break;
		case 3:
		good = good + 2;
		clearBox();
		switch(rand()%3+1)
		{
			case 1:
			printf("\n%s:\"Sure, then I guess goodbye\"",enemy.data);
			preEnter();
			return 1;
			break;
			case 2:
			ivecome:
			clearBox();
			casher = rand()%1000+100+(enemy.health*10);
			printf("\n%s:\"To end this fight, I'll need %d\"",enemy.data,casher);
			switch((options("What will you do?","Pay them","Bargain for another price","Ignore their offer","",3,0,25)))
			{
				case 1:
				if(money < casher)
				{
					clearBox();
					printf("\n%s:\"HEY! You don't have enough cash!\"",enemy.data);
				}
				else
				{
					clearBox();
					money = money - casher;
					printf("\n%s:\"Hehe, thanks for spreading the peace\"",enemy.data);
					preEnter();
					return 1;
				}
				break;
				case 2:
				if(barg == true)
				{
					clearBox();
					printf("\n%s:\"No, we couldn't decide so lets continue\"",enemy.data);	
				}
				else
				{
					printf("\n%s:\"Fine then here's my new offer...\"",enemy.data);
					preEnter();
					goto ivecome;	
				}	
				barg = true;
				break;
				case 3:
				clearBox();
				switch(rand()%4+1)
				{
					case 1:
					case 3:
					case 4:
					printf("\n%s:\"Fine then good luck haha!\"",enemy.data);	
					break;
					case 2:
					printf("\n%s:\"Ugh I'm just gonna go then\"",enemy.data);
					preEnter();
					return 1;
					break;
				}	
				break;
			}
			break;
			case 3:
			if(enemy.health < health)
			{
				printf("\n%s:\"Yeah I think that's a good idea'\"",enemy.data);	
				preEnter();
				return 1;
			}
			else 
			{
				printf("\n%s:\"Nah, I was just getting started!\"",enemy.data);	
			}	
			break;
		}
		break;
	}
	preEnter();
	return 0;
}

int giverTime() // when the enemy is asking the player for a party member
{
	int taker = 0;
	if(inboxCount() > 0)
	{
		hmm:
		while(monsterThere(taker) == false && inbox[taker].personality != boss1 && inbox[taker].humanPerson == false && inbox[taker].personality != boss2)
		{
			taker++;	
		}
		setCursor(0,22);
		printf("\n%s:\"Ah! Hey can I have %s on my side?",enemy.data,inbox[taker].data);
		printf("\n       I'll thank you forever!\"");
		switch((options("Let them take that member?","Yes","No","Ask the member","",3,0,26)))
		{
		case 1:
		clearBox();
		switch(inbox[taker].personality)
		{
			case happy:
			printf("\n%s:\"Hahah! GOODBYE LOSER %s\"",inbox[taker].data,name);
			break;
			case sad:
			printf("\n%s:\"I guess you're leaving me...\"",inbox[taker].data);	
			break;
			case angry:
			printf("\n%s:\"Meh I don't care'\"",inbox[taker].data);	
			break;
			case neutral:
			printf("\n%s:\"I guess this is where my journey will take me next\"",inbox[taker].data);
			break;
			case bossy:
			printf("\n%s:\"Wait, what are you doing!?\"",inbox[taker].data);	
			break;
			case lonely:
			printf("\n%s:\"Thanks for the fun %s\"",inbox[taker].data,name);
			break;
		}
		enemy.health = 0;
		talker = true;
		printf("\n%s ran off with %s",enemy.data,inbox[taker].data);
		deleteMember(taker);
		preEnter();
		return 1;
		break;
		case 2:
		clearBox();
		printf("%s:\"Ah okay, well I'll do this the hard way!\"",enemy.data);
		preEnter();
		break;
		case 3:
		clearBox();
		switch(inbox[taker].personality)
		{
				case happy:
				printf("\n%s:\"I don't really mind going with them\"",inbox[taker].data);
				break;
				case sad:
				printf("\n%s:\"Please don't leave me...\"",inbox[taker].data);	
				break;
				case angry:
				printf("\n%s:\"Why would I WANT to go with them!?\"",inbox[taker].data);	
				break;
				case neutral:
				printf("\n%s:\"I don't care what you do'\"",inbox[taker].data);
				break;
				case bossy:
				printf("\n%s:\"Well I'm in charge and I",inbox[taker].data);	
				switch(rand()%2+1)
				{
					case 1:
					printf("don't want to be with them!\"");
					break;
					case 2:
					printf("don't care\"");
					break;
				}
				break;
				case lonely:
				printf("\n%s:\"Either way I won't be lonely anymore'\"",inbox[taker].data,name);
				break;
			}
			preEnter();
			clearBox();
			goto hmm;
			break;
		}	
	}
	else if(money > 0)
	{
		clearBox;
		taker = rand()%100+1;
		printf("\n%s:\"Can I have some cash? $%d?",enemy.data,taker);
		switch(options("Give them the money?","Yes","No","","",2,0,27))
		{
			case 1:
			good = good + 1;
			if(money >= taker)
			{
				money = money - taker;
				printf("\n%s:\"Thanks! I'll never forget your kindess!\"",enemy.data);
				preEnter();
				clearBox();
				if(rand()%enemy.lv+1%2 == 0 && inboxFull() == false)
				{
					printf("\n%s:\"Hey wait, can I join you!?\"",enemy.data);
					switch(options("Let them join you?","Yes","No","","",2,0,26))
					{
						case 1:
						addMember();
						return 1;
						break;
						case 2:
						clearBox();
						printf("\n%s:\"Ah okay... bye...\"",enemy.data);
						preEnter();
						break;
					}
				}
				else
				{
					sparedFoes = sparedFoes + 1;
				}
				enemy.health = 0;
			}
			else
			{
				printf("\n%s:\"HEY YOU DON'T HAVE ENOUGH!\"",enemy.data);
				enemy.personality = angry;
				preEnter();
			}	
			break;
			case 2:
			clearBox;
			evil = evil + 1;
			printf("\n%s:\"UGHH! Fine then!\"",enemy.data);
			preEnter();
			enemy.personality = angry;
			break;
		}
	}
	else
	{
		printf("\n%s:\"Never mind... I just want your soul\"",enemy.data);
		preEnter();
		return 0;
	}
	return 0;
}

int talkTime() // processes the negotiations in combat
{
	srand((unsigned)time(NULL));
	int success = level + health;
	bool capture = false; // did the capture succeed?
	int hunter; // used to determine if the enemy is caught
	bool continu = false; // does the player want to continue capturing?
	int input;
	
	int casher; // how much money the enemy is asking for
	int taker; // which inbox member will the enemy ask fro?
	
	clearBox();
	if(enemy.personality == 0)
	{
		setCursor(1,22);
		printf("\n%s:\"I'm not going to listen to you\"",enemy.data);
		preEnter();
		return 0;
	}
	switch(options("How do you want to recruit the enemy?","Talk-Convince the enemy to join you","Capture-Try to capture the enemy","","",2,0,23))
	{
		case 1: // talk
		clearBox();
		refresher:
		if(enemy.personality == lonely)
		{
			setCursor(1,22);
			printf("\n%s:\"Uh hey can I join you..?\"",enemy.data);
			switch(options("Let them join you?","Yes","No","","",2,1,24))
			{
				case 1:
				good = good + 1;
				clearBox();
				if(inboxFull() == true)
				{
					printf("\n%s:\"Oh your party is full....\"",enemy.data);
					printf("\n%s walked away sadly down a lonely road",enemy.data);
				}
				else
					addMember();
				return 1;
				break;
				case 2:
				clearBox();
				printf("\n%s:\"Okay... So I guess we can just continue this\"",enemy.data);
				preEnter();
				return 0;
				break;
			}
		}
		else if(fortune == 4 && enemy.personality != boss1 && enemy.personality != boss2)		
		{
			printf("\n%s:\"I'm in the mood to make a deal",enemy.data);
			preEnter();
			clearBox();
			return makeDeal();
		}
		else if(enemy.personality != boss1 && enemy.personality != boss2)
		{
			switch(rand()%11+1)
			{
				default:
				clearBox();
				if(talkedThis == true)
				{
					goto refresher;
				}
				switch(enemy.look)
				{
					default:
					case M1:
					case M7:
					printf("\n%s:\"So you're new here? Do you like the",enemy.data);
					printf("\n       Scilo so far?\"");
					switch(options("","\"It's pretty fun\"","\"It's depressing\"","\"I want to be free!\"","",3,0,26))
					{
						case 1:
						evil = evil + 1;
						clearBox();
						switch(rand()%3+1)
						{
							case 1:
							printf("\n%s:\"Woah are you one of those humans",enemy.data);
							printf("\n     I've heard about..? A \"maniac\"?");	
							preEnter();
							printf("\n%s:\"Leave me alone! I heard you're weird\"",enemy.data);
							break;
							case 2:
							printf("\n%s:\"Exactly! I feel the same way!\"",enemy.data);	
							preEnter();
							return makeDeal();
							break;
							case 3:
							printf("\n%s:\"Why is it fun?\"",enemy.data);
							switch(options("","\"Because it is!\"","\"I love fighting\"","\"I get to explore this weird place\"","\"It's not I was just joking\"",4,0,27))
							{
								case 1:
								evil = evil + 2;	
								clearBox();
								printf("%s:\"Woah I mean I just live here",enemy.data);
								printf("\n     but yeah I guess it is kind of fun\"");
								preEnter();
								return makeDeal();
								break;
								case 2:
								evil = evil + 1;	
								clearBox();
								printf("%s:\"Then shut up and fight!\"",enemy.data);
								break;
								case 3:
								neutrala = neutrala + 1;	
								clearBox();
								switch(rand()%2+1)
								{
									case 1:
									printf("\n%s:\"Oh yeah that's fun!\"",enemy.data);
									preEnter();
									return makeDeal();	
									break;
									case 2:
									printf("\n%s:\"Meh that's boring...\"",enemy.data);	
									break;
								}
								break;
								case 4:
								good = good + 1;
								clearBox();
								switch(rand()%2+1)
								{
									case 1:
									printf("%s:\"Well thanks for wasting my time\"",enemy.data);
									break;
									case 2:
									printf("%s:\"Oh good\"",enemy.data);
									preEnter();
									return makeDeal();	
									break;	
								}	
								break;
							}	
							break;
						}
						break;
						case 2:
						clearBox();
						switch(rand()%3+1)
						{
							case 1:
							printf("%s:\"Ah you're such a killjoy!\"",enemy.data);
							break;
							case 2:
							printf("%s:\"Wow you're right! Finally",enemy.data);
							printf("\n   someone gets me!\"");
							preEnter();
							return makeDeal();
							break;
							case 3:
							printf("%s:\"LALA I don't care!\"",enemy.data);
							break;
						}
						break;
						case 3:
						clearBox();
						switch(rand()%2+1)
						{
							case 1:
							printf("%s:\"Free? I mean you're walking",enemy.data);
							printf("\n     around right now so you are");
							printf("\n     already free!\"");
							break;
							case 2:
							printf("%s:\"Lala I don't really care!\"",enemy.data);
							break;
						}
						break;
					}
					break;
					case M2:
					printf("%s seems to be typing",enemy.data);
					printf("\naway at some small computer");
					printf("\nthat they have");
					switch(options("What will you do?","Try to get their attention","Say \"Hello\"","Scream at them","",3,0,27))
					{
						case 1:
						clearBox();
						switch(rand()%3+1)
						{
							case 1:
							printf("%s:\"LOL What a lame way to start a",enemy.data);
							printf("\n     conversation brotato.\"");
							break;
							case 2:
							printf("%s:\"Leave me alone I'm trying to get rid of...",enemy.data);
							printf("\n     some person named %s\"",name);
							break;
							case 3:
							printf("%s:\"Oh what's up?\"",enemy.data);
							switch(options("How will you respond?","\"Do you know anything about Scilo?\"","I want to make a deal","","",2,0,27))
							{
								case 1:
								clearBox();	
								switch(rand()%3+1)
								{
									case 1:
									printf("\n%s:\"Nah I don't really know anything.\"",enemy.data);
									break;
									default:
									printf("\n%s:\"All I know is that the Scilo is in space",enemy.data);
									printf("\n       and that you humans just randomly showed up\"");	
									break;
								}	
								break;
								case 2:
								clearBox();
								switch(rand()%2+1)
								{
									case 1:
									return makeDeal();	
									break;
									case 2:
									printf("\n%s:\"Nah you interrupted me!\"",enemy.data);
									break;
								}
								break;
							}	
							break;
						}
						break;
						case 2:
						good = good + 1;	
						clearBox();
						printf("%s:\"Hello",enemy.data);
						switch(rand()%2+1)
						{
							case 1:
							printf(" and goodbye haha!\"");	
							break;
							case 2:
							printf(" what do you want?\"");	
							switch(options("How will you respond?","\"Do you know anything about Scilo?\"","I want to make a deal","","",2,0,27))
							{
								case 1:
								clearBox();	
								switch(rand()%3+1)
								{
									case 1:
									printf("\n%s:\"Nah I don't really know anything.\"",enemy.data);
									break;
									default:
									printf("\n%s:\"All I know is that the Scilo is in space",enemy.data);
									printf("       and that you humans just randomly showed up\"");	
									break;
								}	
								break;
								case 2:
								clearBox();
								switch(rand()%2+1)
								{
									case 1:
									return makeDeal();	
									break;
									case 2:
									printf("\n%s:\"Nah you interrupted me!\"",enemy.data);
									break;
								}
								break;
							}	
							break;
						}
						break;
						case 3:
						clearBox();
						evil = evil + 2;
						printf("\nYou screamed at %s",enemy.data);
						preEnter();
						clearBox();
						switch(rand()%3+1)
						{
							case 1:
							enemy.personality = angry;	
							printf("%s:\"Woah! WHAT!? Okay I'm mad!\"",enemy.data);	
							break;
							case 2:
							printf("%s:\"That scream... Okay I'll listen",enemy.data);
							printf("     to anything you have to say!\"");
							preEnter();
							return makeDeal();	
							break;
							case 3:
							printf("%s ignored you",enemy.data);	
							break;
						}
						break;
					}
					break;
					case M3:
					case M6:
					printf("%s:\"Why are you trying to",enemy.data);
					printf("\n     talk to me?!\"");
					switch(options("","\"Because I want you to join me\"","\"I'd rather not fight\"","\"I want to get something from you\"","",3,0,28))
					{
						case 1:
						clearBox();
						switch(rand()%2+1)
						{
							case 1:
							printf("%s:\"Hah! I was the one that",enemy.data);
							printf("\n   challenged you! I don't care\"");
							preEnter();	
							break;
							case 2:
							printf("%s:\"Wow you're pretty dumb to try",enemy.data);
							printf("\n    and recruit someone like me who");	
							printf("\n    is trying to mug you but I'll listen to");
							printf("\n    your offers hah!\"");
							preEnter();
							clearBox();
							printf("%s:\"So why should I join YOU?\"",enemy.data);
							switch(options("","\"I'm strong\"","\"I have a lot of money\"","\"I'm a cool guy\"","\"Shut up and join me\"",4,0,28))
							{
								case 1:
								clearBox();
								if(attack >= enemy.attac)
								{
									if(inboxFull() == false)
									{
										switch(rand()%3+1)
										{
											case 1:
											printf("%s:\"Yeah I'll join ya\"",enemy.data);
											addMember();
											return 1;	
											break;
											default:
											break;
										}
									}
									printf("%s:\"Oh wow you are strong,",enemy.data);
									printf("\n     I guess I'll fight to");
									printf("\n     get stronger haha!\"");
									preEnter();
								}
								else
								{
									printf("%s:\"What are you talking about?",enemy.data);
									printf("\n   I'm way stronger!\"");
									preEnter();
								}
								break;
								case 2:
								clearBox();
								if(money >= rand()%100+enemy.lv)
								{
									printf("\n%s:\"Oh wow dude! You have quite",enemy.data);
									printf("\n       a lot of cash on ya haha!\"");
									preEnter();
									clearBox();
									switch(rand()%2+1)
									{
										case 1:
										printf("%s:\"Now I HAVE to mug you!\"",enemy.data);	
										preEnter();
										break;
										case 2:
										if(inboxFull() == false)
										{
											printf("%s:\"Okay I'll join ya haha!\"",enemy.data);
											addMember();
											return 1;
										}	
										else
										{
											printf("%s:\"Wait a minute you have too many",enemy.data);
											printf("\n   members!\"");
											preEnter();
										}
										break;
									}
								}
								else
								{
									printf("%s:\"You buffoon you don't",enemy.data);
									printf("\n    have a lot of cash!\"");
									preEnter();
								}
								break;
								case 3:
								clearBox();	
								switch(alignmentCheck())
								{
									case harsh:
									case complex:
									printf("\n%s:\"No you're not haha!\"",enemy.data);
									break;
									case mysterious:
									case mysteriousCar:
									case unknown:
									printf("\n%s:\"I don't know... You seem",enemy.data);
									printf("\n     weird...\"");
									preEnter();
									break;
									default:
									clearBox();
									switch(rand()%5+1)
									{
										case 1:
										case 2:
										if(inboxFull() == false)
										{
											printf("%s:\"Sure I'll join ya\"",enemy.data);		
											addMember();
											return 1;
										}
										default:
										printf("%s:\"Nah haha\"",enemy.data);
										break;	
									}	
									break;
								}
								preEnter();
								break;
								case 4:
								clearBox();	
								evil = evil + 2;	
								switch(rand()%4+1)
								{
									case 1:
									switch(rand()%2+1)
									{
										case 1:
										printf("%s:\"Nah no thanks haha!\"",enemy.data);
										preEnter();
										break;
										case 2:
										if(inboxFull() == false)
										{
											printf("%s:\"Hah yeah I like your style\"",enemy.data);
											addMember();
											return 1;	
										}
										break;
									}	
									case 2:
									if(health > enemy.health && inboxFull() == false)
									{
										printf("%s:\"Fine... you win...\"",enemy.data);
										addMember();
										return 1;
									}	
									default:
									printf("%s:\"Nah no thanks haha!\"",enemy.data);
									preEnter();
									break;
								}
								break;
							}
							break;
						}		
						break;
						case 2:
						good = good + 2;	
						clearBox();
						switch(rand()%2+1)
						{
							case 1:
							printf("%s:\"You're no fun...\"",enemy.data);	
							preEnter();
							break;
							case 2:
							printf("%s:\"Yeah this isn't fun, I guess",enemy.data);
							printf("\n    I'll head out then.\"");
							preEnter();
							enemy.health = 0;
							return 1;	
							break;
						}
						break;
						case 3:
						evil = evil + 1;	
						clearBox();
						switch(rand()%2+1)
						{
							case 1:
							return makeDeal();
							break;
							case 2:
							printf("%s:\"No thanks\"",enemy.data);
							preEnter();	
							break;
						}
						break;
					}
					break;
					case M4:
					case M5:
					case M15:	
					printf("%s silently flaps its wings",enemy.data);
					switch(options("","Wave at them","Say \"Hello\"","Shout at them","",3,0,28))
					{
						case 1:
						clearBox();
						switch(rand()%3+1)
						{
							case 1:
							case 2:	
							printf("%s ignored you",enemy.data);	
							break;
							case 3:
							printf("%s:\"Oh you want to make a deal? Fine\"",enemy.data);
							preEnter();
							clearBox();
							return makeDeal();
							break;
						}
						break;
						case 2:
						clearBox();
						switch(rand()%4+1)
						{
							case 1:
							case 2:
							if(enemy.personality == angry)
							{
								printf("%s:\"I don't care!\"",enemy.data);
								enemy.personality = neutral;
							}
							else
							{
								printf("%s:\"Ugh leave me alone...\"",enemy.data);
								enemy.personality = angry;
							}
							break;
							case 3:
							printf("%s ignores you",enemy.data);
							break;
							case 4:
							printf("%s:\"What do you want? A deal? Fine!\"",enemy.data);
							preEnter();
							clearBox();
							return makeDeal();
							break;
						}
						break;
						case 3:
						clearBox();
						switch(rand()%2+1)
						{
							case 1:
							enemy.personality = angry;
							printf("%s:\"AHHH LEAVE ME ALONE!",enemy.personality);
							break;
							case 2:
							printf("%s:\"What? Oh! I see\"",enemy.data);
							preEnter();
							clearBox();
							return makeDeal();
							break;
						}	
						break;
					}
					break;
					case M13:
					case M8:
					printf("%s:\"Hey how do you feel about ",enemy.data);
					switch(rand()%10+1)
					{
						case 1:
						printf("chickens?\"");	
						break;
						case 2:
						printf("stones?\"");
						break;
						case 3:
						printf("card games?\"");	
						break;
						case 4:
						printf("ghosts?\"");
						break;
						case 5:
						printf("zombies?\"");
						break;
						case 6:
						printf("games?\"");
						break;
						case 7:
						printf("guns?\"");
						break;
						case 8:
						printf("sandwiches!?\"");
						break;
						case 9:
						printf("comedians?\"");
						break;
						case 10:
						default:	
						printf("tough guys?\"");
						break;
					}
					switch(options("","\"I like them\"","\"They're okay\"","\"They're disgusting\"","\"Why are you asking me this?\"",4,0,28))
					{
						case 1:
						clearBox();
						switch(rand()%3+1)
						{
							case 1:
							enemy.personality = happy;	
							printf("%s:\"ME TOO!\"",enemy.data);
							preEnter();
							clearBox();
							return makeDeal();	
							break;
							case 2:
							printf("%s:\"Gross...\"",enemy.data);
							break;
							case 3:
							enemy.personality = neutral;	
							printf("%s:\"That's cool\"",enemy.data);
							break;
						}	
						break;
						case 2:
						clearBox();
						neutrala = neutrala + 2;
						switch(rand()%3+1)
						{
							case 1:
							enemy.personality = happy;	
							printf("%s:\"Ah I see\"",enemy.data);	
							break;
							case 2:
							enemy.personality = angry;	
							printf("%s:\"Really? HAHA lame\"",enemy.data);	
							break;
							case 3:
							printf("%s:\"I guess\"",enemy.data);
							preEnter();
							clearBox();
							return makeDeal();	
							break;
						}
						break;
						case 3:
						evil = evil + 1;
						clearBox();
						switch(rand()%3+1)
						{
							case 1:
							printf("%s:\"Totally\"",enemy.data);	
							preEnter();
							clearBox();
							return makeDeal();
							break;
							case 2:
							printf("%s:\"Ah come on man...\"",enemy.data);	
							break;
							case 3:
							printf("%s:\"Meh... I guess...\"",enemy.data);	
							break;
						}
						break;
						case 4:
						evil = evil + 1;	
						neutrala = neutrala + 1;	
						clearBox();
						switch(rand()%2+1)
						{
							case 1:
							enemy.personality = bossy;
							printf("%s:\"WHY ARE YOU ASKING ME? I ASKED YOU FIRST!\"",enemy.data);
							break;
							case 2:
							enemy.personality = angry;	
							printf("%s:\"Ugh I was just curious...\"",enemy.data);
							break;
							case 3:
							enemy.personality = sad;
							printf("%s:\"Why are you so mean...\"",enemy.data);	
							break;
						}
						break;
					}
					break;
					case M9:
					case M16:	
					printf("%s:\"Why are you talking with me?\"",enemy.data);
					switch(options("","\"I don't want to fight you\"","\"I'm interested in you\"","\"Why not?\"","",3,0,28))
					{
						case 1:
						good = good + 1;
						clearBox();
						if(enemy.personality == angry || enemy.personality == bossy)
						{
							printf("%s:\"HAHA! Not a chance!\"",enemy.data);		
						}
						else if(enemy.personality == happy || enemy.personality == neutral)
						{
							switch(rand()%2+1)
							{
								case 1:
								printf("%s:\"Ah okay then we'll stop this\"",enemy.data);
								preEnter();
								enemy.health = 0;
								return 1;	
								break;
								case 2:
								printf("%s:\"Well too bad\"",enemy.data);
								break;
							}
						}
						else
						{
							printf("%s:\"Ah okay then we'll stop this\"",enemy.data);
							preEnter();
							enemy.health = 0;
							return 1;		
						}
						break;
						case 2:
						evil = evil + 1;	
						clearBox();
						switch(rand()%3+1)
						{
							case 1:
							printf("%s:\"Me too...\"",enemy.data);
							preEnter();
							clearBox();
							return makeDeal();
							break;
							case 2:
							printf("%s:\"Meh...\"",enemy.data);	
							break;
							case 3:
							printf("%s:\"WOAH! That's creepy!\"",enemy.data);	
							break;
						}
						break;
						case 3:
						neutrala = neutrala + 1;
						clearBox();
						if(enemy.personality == bossy)
						{
							printf("%s:\"SHUT UP! I'M IN CHARGE!\"",enemy.data);
						}
						else
						{
							switch(rand()%3+1)
							{
								case 1:
								case 2:
								enemy.personality = angry;
								printf("%s:\"Ugh just answer the question!\"",enemy.data);	
								break;
								case 3:
								printf("%s:\"Well we ARE fighting\"",enemy.data);	
								break;
							}
						}
						break;
					}
					break; 
					case M12:
					case M14:	
					printf("%s:\"...\"",enemy.data);
					switch(options("","\"Hello?\"","\"What's up?\"","\"Want to make a deal?\"","",3,0,28))
					{
						case 3:
						clearBox();
						switch(rand()%3+1)
						{
							case 1:
							printf("%s:\"No...\"",enemy.data);	
							break;
							case 2:
							case 3:
							printf("%s:\"Sure...\"",enemy.data);
							preEnter();
							clearBox();
							return makeDeal();	
							break;
						}	
						break;
						default:
						clearBox();
						switch(rand()%5+1)
						{
							case 1:
							printf("%s:\"...\"",enemy.data);
							break;
							case 2:
							case 3:	
							enemy.personality = sad;	
							printf("%s:\"Nothing nothing...\"",enemy.data);
							switch(options("","\"Are you okay?\"","Stay silent","\"Join me\"","",3,0,28))
							{
								case 1:	
								clearBox();
								good = good + 1;	
								switch(rand()%3+1)
								{
									case 1:
									enemy.personality = happy;
									printf("%s:\"Oh! Yeah I am, sorry\"",enemy.data);
									preEnter();
									clearBox();
									return makeDeal();
									break;
									case 2:
									case 3:	
									enemy.personality = angry;	
									printf("%s:\"OF COURSE NOT!\"",enemy.data);
									break;
								}
								break;
								case 2:
								neutrala = neutrala + 1;	
								clearBox();
								switch(rand()%3+1)
								{
									case 1:
									enemy.personality = lonely;
									printf("%s:\"Ugh...\"",enemy.data);
									break;
									case 2:
									printf("%s:\"...\"",enemy.data);
									break;
									case 3:
									printf("%s:\"Boy you're weird\"",enemy.data);	
									break;
								}
								break;
								case 3:	
								clearBox();
								evil = evil + 1;
								switch(rand()%2+1)
								{
									case 1:
									enemy.personality = angry;	
									printf("%s:\"Never!\"",enemy.data);
									break;
									case 2:
									return makeDeal();	
									break;
								}	
								break;
							}
							break;
							case 4:
							case 5:
							printf("%s:\"Want me to stop fighting?\"",enemy.data);
							switch(options("","Yes","No","Yes, but I want something","",3,0,28))
							{
								case 1:	
								clearBox();
								if(enemy.health >= health)
								{
									if(enemy.personality == bossy || enemy.personality == angry || enemy.personality == happy)
									{
										printf("%s:\"HAHA NO THANKS! I ALMOST HAVE YA!\"",enemy.data);
									}
									else
									{
										switch(rand()%2+1)
										{
											case 1:
											printf("%s:\"No\"",enemy.data);	
											break;
											case 2:
											printf("%s:\"Ah okay then bye!\"",enemy.data);
											enemy.health = 0;
											preEnter();
											return 1;	
											break;
										}
									}
								}
								else
								{
									good = good + 1;
									if(enemy.personality == bossy)
									{
										printf("%s:\"HAHA NO THANKS! I ALMOST HAVE YA!\"",enemy.data);
									}
									else
									{
										printf("%s:\"Ah okay then bye!\"",enemy.data);
										enemy.health = 0;
										preEnter();
										return 1;
									}
								}
								break;
								case 2:
								evil = evil + 1;	
								clearBox();
								printf("%s:\"Ugh fine...\"",enemy.data);
								break;
								case 3:
								neutrala = neutrala + 1;
								clearBox();
								switch(rand()%3+1)
								{
									case 1:
									if(enemy.personality == angry || enemy.personality == bossy)
									{
										printf("%s:\"Haha not a chance!\"",enemy.data);
									}
									else
									{
										return makeDeal();
									}	
									break;
									case 2:
									printf("%s:\"Not a chance\"",enemy.data);	
									break;
									case 3:
									return makeDeal();	
									break;
								}
								break;
							}	
							break;
						}
						break;
					}
					break;
					case M17:
					printf("%s:\"What's it like outside?\"",enemy.data);
					switch(options("","\"I don't know\"","\"It's peaceful\"","\"It's crazy\"","",3,0,28))	
					{
						case 1:
						
						break;
						case 2:
						
						break;
						case 3:
							
						break;
					}
					break;
				}	
				talkedThis = true;
				break;
				case 9:
				printf("\n%s:\"Lets get this over with quickly\"",enemy.data);
				preEnter();
				clearBox();
				return makeDeal();
				break;
				case 7:
				printf("\n%s:\"HAHA\"",enemy.data);
				switch(options("What will you say back?","\"HOHO\"","\"You're not funny\"","\"You must be one weird person\"","Say nothing",4,1,25))
				{
					case 1:
					neutrala = neutrala + 1;
					clearBox();	
					switch(rand()%8+1)
					{
						case 1:
						case 4:
						case 8:
						switch(enemy.personality)
						{
							case 1:
							switch(rand()%2+1)
							{
								case 1:
								printf("\n%s:\"Hah you're pretty funny, mind if I join ya?\"",enemy.data);
								if(inboxFull() == true)
								{
									printf("\n%s:\"Why are you trying to recruit me when your party is full?!\"",enemy.data);
									enemy.personality = angry;
								}
								else
								{
									addMember();
									preEnter();
									return 1;
								}	
								break;
								case 2:
								printf("\n%s:\"Hey uh.. it's only funny when I laugh!\"",enemy.data);
								printf("\n%s got angry",enemy.data);
								enemy.personality = angry;
								break;
							}	
							break;
							case 2:
							case 3:
							case 4:
							case 5:
							switch(rand()%6+1)
							{
								case 3:
								case 4:
								printf("\n%s:\"Y-You're laughing at me...?\"",enemy.data);
								printf("\n%s got sad",enemy.data);
								enemy.personality = sad;	
								break;
								case 1:
								if(enemy.personality != sad)
								{
									printf("\n%s:\"Hah you're pretty funny, mind if I join ya?\"",enemy.data);
									if(inboxFull() == true)
									{
										printf("\n%s:\"Why are you trying to recruit me when your party is full?!\"",enemy.data);
										enemy.personality = angry;
									}
									else
									{
										addMember();
										preEnter();
										return 1;
									}	
								}
								else
								{
									evil = evil + 2;
									printf("\n%s:\"Please stop laughing at me...\"",enemy.data);
								}	
								break;
								case 2:
								case 5:
								case 6:
								printf("\n%s:\"Hey uh.. it's only funny when I laugh!\"",enemy.data);
								printf("\n%s got angry",enemy.data);
								enemy.personality = angry;
								break;
							}		
							break;
						}
						break;
						case 2:
						case 5:
						case 6:
						case 7:
						printf("\n%s:\"Y-You're laughing at me...?\"",enemy.data);
						printf("\n%s got sad",enemy.data);
						enemy.personality = sad;
						break;
						case 3:
						printf("\n%s:\"Hah you're pretty funny, mind if I join ya?\"",enemy.data);
						if(inboxFull() == true)
						{
							printf("\n%s:\"Why are you trying to recruit me when your party is full?!\"",enemy.data);
							enemy.personality = angry;
						}
						else
						{
							addMember();
							preEnter();
							return 1;
						}
						break;
					}
					break;
					case 3:
					clearBox();
					evil = evil + 1;
					switch(enemy.personality)
					{
						case happy:
						printf("\n%s:\"Yikes I'm just trying to have a good time here\"",enemy.data);
						switch(rand()%2+1)
						{
							case 1:
							printf("\n%s got sad",enemy.data);
							enemy.personality = sad;
							break;
							case 2:
							printf("\n%s got angry",enemy.data);
							enemy.personality = angry;
							break;
						}
						break;
						case sad:
						switch(rand()%2+1)
						{
							case 1:
							printf("\n%s:\"I'll tell you what's funny!\"",enemy.data);
							enemy.personality = bossy;
							break;
							case 2:
							printf("\n%s:\"Well you know what's funny, your face!\"",enemy.data);
							enemy.personality = angry;
							break;
						}
						break;
						case angry:
						case neutral:
						case bossy:
						switch(rand()%3+1)
						{
							case 1:
							printf("\n%s:\"Haha! I know right?\"",enemy.data);
							enemy.personality = happy;
							break;
							case 2:
							printf("\n%s:\"Shut up punk!\"",enemy.data);
							break;
							case 3:
							printf("\n%s:\"Hah you're right, hey mind if I join ya?\"",enemy.data);
							if(inboxFull() == true)
							{
								printf("\n%s:\"Why are you trying to recruit me when your party is full?!\"",enemy.data);
								enemy.personality = angry;
							}
							else
							{
								addMember();
								preEnter();
								return 1;
							}		
							break;
						}
						break;
					}
					break;
					case 2:
					clearBox();
					evil = evil + 1;
					printf("\n%s:\"Well you're not nice!\"",enemy.data);
					printf("\n%s got angry",enemy.data);
					enemy.personality = angry;
					break;
					case 4:
					neutrala = neutrala + 2;
					clearBox();
					switch(enemy.personality)
					{
						case happy:
						switch(rand()%4+1)
						{
							case 1:
							case 2:
							printf("\n%s:\"Haha I couldn't stop laughing\"",enemy.data);	
							break;
							case 3:
							printf("\n%s:\"I guess you're not the comedy type\"",enemy.data);	
							break;
							case 4:
							printf("\n%s:\"Man you're no fun\"",enemy.data);
							break;
						}
						break;
						case sad:
						printf("\n%s:\"Why are you just standing there!?\"",enemy.data);
						break;
						case angry:
						printf("\n%s:\"AGHH\"",enemy.data);
						break;
						case neutral:
						printf("\n%s stopped laughing and silently looked at you",enemy.data);
						break;
						case bossy:
						printf("\n%s:\"I will rule over this world!\"",enemy.data);	
						break;
					}
					break;
				}
				break;
				case 2:
				clearBox();
				printf("\n%s is crying",enemy.data);
				switch(options("What will you do?","Comfort them","Just stand there","Try and land a blow on them","Laugh at them",4,1,24))
				{
					case 1:
					good = good + 1;	
					switch(enemy.personality)
					{
						case happy:
						clearBox();
						switch(rand()%2+1)
						{
							case 1:
							printf("\n%s:\"Your face is just so ugly haha, \nI couldn't stop laughing\"",enemy.data);
							break;
							case 2:
							printf("\n%s:\"What? You thought I was crying?\"",enemy.data);
							switch((options("Did you think they were crying?","Yes","No","I was crying","Ignore them",4,0,24)))
							{
								case 1:
								clearBox();
								printf("\n%s:\"HAHA! Why would I be crying!?\"",enemy.data);	
								break;
								case 2:
								clearBox();
								printf("\n%s:\"Good\"",enemy.data);
								break;
								case 3:
								clearBox();
								switch(rand()%6+1)
								{
									case 1:
									case 4:
									printf("\n%s:\"Well you are a baby so I \ndon't blame you for crying.\"",enemy.data);
									break;
									case 2:
									case 5:
									case 6:
									printf("\n%s:\"Whiny people like you \nmake me angry! HAHA!\"",enemy.data);
									enemy.personality = angry;
									break;
									case 3:
									printf("\n%s:\"Oh... Would it cheer you up I join you?\"",enemy.data);
									switch(options("Let them join you?","Yes","No","Sorry but you're too weak","",3,0,25))
									{
										case 1:
										evil = evil + 1;
										clearBox();
										if(inboxFull() == true)
										{
											printf("\n%s:\"Oh your party is full!?\"",enemy.data);
											enemy.personality = angry;
										}
										else
										{
											addMember();
											return 1;
										}
										break;
										case 2:
										case 3:
										printf("\n%s:\"Um... Well you're too stupid to have me on your team!\"",enemy.data);
										enemy.personality = angry;
										break;
									}	
									break;
								}
								break;
								case 4:
								evil = evil + 1;
								printf("\n%s got really angry!",enemy.data);
								enemy.personality = angry;
								enemy.attac = enemy.attac + 2;
								break;
							}
							break;
						}
						break;
						case sad:
						clearBox();
						if(enemy.maxHP > enemy.health) // if the player attacks
						{
							evil = evil + 1;
							clearBox();
							printf("\n%s:\"Then why did you attack me?! Everything is NOT okay!\"",enemy.data);
							enemy.personality = angry;
						}
						else // if the player didn't attack
						{
							if(maxHealth > health && enemy.maxHP <= enemy.health)
							{
								neutrala = neutrala + 1;
								printf("\n%s:\"I attacked you... I'm so sorry...\"",enemy.data);
								printf("\n%s:\"Is there any way I can get out of trouble..?\"",enemy.data);
								switch(options("What will you say?","\"Join me\"","\"Pay me money\"","\"Run as fast as you can\"","\"Nothing at all\"",4,1,26))
								{
									case 1:
									clearBox();
									printf("\n%s:\"Okay I'll join you on your journey...\"",enemy.data);
									addMember();
									return 1;
									break;
									case 2:
									clearBox();
									evil = evil + 1;
									printf("\n%s handed you some money and ran off",enemy.data);
									money = money + 10;
									preEnter();
									return 1;
									break;
									case 3:
									clearBox();
									evil = evil + 1;
									printf("\n%s ran away screaming and dropped some money",enemy.data);
									money = money + 10;
									preEnter();
									return 1;
									break;
									case 4:
									clearBox();
									neutrala = neutrala + 1;
									printf("\n%s:\"O-Oh... Okay?\"",enemy.data);
									printf("\n%s started crying again",enemy.data);
									break;
								}	
							}
							else
							{
								clearBox();
								good = good + 1;
								printf("\n%s:\"Thanks... Hey is it okay if I come with you?\"",enemy.data);
								switch(options("Is it okay for them to join?","Yes","No","","",2,1,24))	
								{
									case 1:
									if(inboxFull() == true)
									{
										printf("\n%s:\"Oh your party is full....\"",enemy.data);
										printf("\n%s walked away sadly down a lonely road",enemy.data);
									}
									else
										addMember();	
									return 1;	
									break;
									case 2:
									printf("\n%s:\"oh... WELL I GUESS I'M TOO GOOD FOR YOU HUH?\"");
									enemy.personality = bossy;
									break;
								}
							}	
						}
						break;
						case bossy:
						case angry:
						clearBox();
						switch(rand()%6+1)
						{
							case 1:
							case 5:	
							printf("%s:\"Leave me alone\"",enemy.data);
							break;
							case 2:
							case 3:
							case 4:	
							case 6:
							printf("%s:\"Thanks, I'm just so angry right now\"",enemy.data);
							switch(options("What will you say?","\"Why are you angry?\"","\"I'm here if you need to feel better\"","\"Ah that sucks\"","\"Uh okay, can we get back to fighting?\"",4,0,24))
							{
								case 1:
								clearBox();
								if(enemy.maxHP > enemy.health) // if the player attacks
								{
									evil = evil + 1;
									printf("\n%s:\"If you care so much then don't attack me!\"",enemy.data);
									enemy.attac = enemy.attac + 2;
									enemy.personality = bossy;
								}
								else
								{
									good = good + 1;
									casher = rand()%1000+10;
									printf("\n%s:\"I don't have a lot of money right now\"",enemy.data);
									printf("\n%s:\"Hey could you loan me %d please...?\"",enemy.data,casher);
									switch((options("Loan them the money?","Yes","No","I don't have that much money","You can get paid if you join me",4,0,26)))
									{
										case 1:
										clearBox();
										if(casher <= money)
										{
											money = money - casher;
											good = good + 3;
											printf("\n%s:\"Thank you so much, I won't forget your kindness.\"",enemy.data);
											preEnter();
											return 1;	
										}
										else
										{
											evil = evil + 2;
											printf("\n%s:\"HEY! You don't have that much cash!\"",enemy.data);
											printf("\n%s got angry",enemy.data);
										}
										break;	
										case 2:
										clearBox();
										neutrala = neutrala + 1;
										printf("\n%s:\"I'm not surprised, you seem like the selfish type.\"",enemy.data);
										break;	
										case 3:
										clearBox();	
										printf("\n%s:\"I don't really care punk, you wasted my time.\"",enemy.data);
										break;
										case 4:
										evil = evil + 1;
										clearBox();	
										switch(rand()%6+1)
										{
											case 1:
											printf("\n%s:\"Fine I guess I'll join you then\"",enemy.data);
											if(isPartyFull() == false)
											{
												addMember();
												return 1;	
											}
											else
											{
												printf("\n%s:\"Wait a minute, your party is full... YOOUU!!!\"",enemy.data);
												preEnter();
												enemy.attac = enemy.attac + 10;
											}
											break;
											case 2:
											printf("\n%s:\"Meh no thanks.\"",enemy.data);
											break;	
											case 3:
											case 4:
											case 5:
											case 6:
											enemy.personality = rand()%5+1;
											switch(alignmentCheck())
											{ 
		 	             						case bright:
												case optimist: 	
												switch(enemy.personality)
												{
													case happy:
													printf("\n%s:\"You seem like a happy person so I'll join ya\"",enemy.data);
													if(isPartyFull() == false)
													{	
														addMember();
														return 1;	
													}
													else
													{
														printf("\n%s:\"Oh your party is full haha, here \nhave some money then\"",enemy.data);
														printf("\n%s handed you $10",enemy.data);
														preEnter();
														return 1;
													}
													break;
													case sad:
													printf("\n%s:\"I can sense your bright aura, I'll join you then\"",enemy.data);
													if(isPartyFull() == false)
													{	
														addMember();
														return 1;	
													}
													else
													{
														printf("\n%s:\"Oh your party is full...\"",enemy.data);
														preEnter();
														enemy.personality = lonely;
													}	
													break;
													case angry:
													case bossy:
													printf("\n%s:\"LIKE I WOULD JOIN YOU! HAHA\"",enemy.data);
													break;
													case neutral:
													switch(rand()%2+1)
													{
														case 1:
														printf("\n%s:\"I guess my time will be spent with you then\"",enemy.data);
														if(isPartyFull() == false)
														{	
															addMember();
															return 1;	
														}
														else
														{
															printf("\n%s:\"Oh your party is full haha, here \nhave some money then\"",enemy.data);
															printf("\n%s handed you $10",enemy.data);
															preEnter();
															return 1;
														}
														break;
														case 2:
														printf("\n%s:\"No thank you\"",enemy.data);	
														break;
													}
													break;
												}
												break;
												case complex: 
												switch(enemy.personality)
												{
													case happy:
													printf("\n%s:\"You seem to have a lot going on so no thanks...\"",enemy.data);
													break;
													case sad:
													printf("\n%s:\"You confuse me so no thanks...\"",enemy.data);	
													break;
													case angry:
													case bossy:
													printf("\n%s:\"You're weird, AGH why would I join you!?\"",enemy.data);	
													break;
													case neutral:
													printf("\n%s:\"I sort of like your personality, let me join you.\"",enemy.data);
													if(isPartyFull() == false)
													{
														addMember();
														return 1;	
													}
													else
													{
														printf("\n%s:\"Wait a minute, your party is full... YOOUU!!!\"",enemy.data);
														preEnter();
														enemy.attac = enemy.attac + 10;
													}
													break;
												}
												break;
												case harsh:
												switch(enemy.personality)
												{
													case happy:
													printf("%s:\"You're mean so no thanks...\"",enemy.data);
													break;
													case sad:
													printf("%s:\"No...\"",enemy.data);	
													break;
													case angry:
													printf("%s:\"HAHA! I like your style! Let me join ya!\"",enemy.data);	
													if(isPartyFull() == false)
													{
														addMember();
														return 1;	
													}
													else
													{
														printf("\n%s:\"Wait a minute, your party is full... YOOUU!!!\"",enemy.data);
														preEnter();
														enemy.attac = enemy.attac + 10;
													}
													break;
													case neutral:
													printf("\n%s:\"Get away from me\"",enemy.data);
													break;
													case bossy:
													printf("\n%s:\"No, I'M THE BOSS'\"",enemy.data);	
													break;
												}
												break;
												case mysteriousCar: 
												case mysterious: 
												case unknown:
												switch(enemy.personality)
												{
													case happy:
													case sad:
													printf("\n%s:\"You're weird so no...\"",enemy.data);
													break;
													case angry:
													case bossy:
													printf("\n%s:\"I JUST WANT THE MONEY\"",enemy.data);
													break;
													case neutral:
													printf("\n%s:\"I sort of like your personality, let me join you.\"",enemy.data);
													if(isPartyFull() == false)
													{
														addMember();
														return 1;	
													}
													else
													{
														printf("\n%s:\"Wait a minute, your party is full... YOOUU!!!\"",enemy.data);
														preEnter();
														enemy.attac = enemy.attac + 10;
													}
													break;
												}
												break;
											}
											break;
										}
										break;
									}
								}
								break;
								case 2:
								clearBox();
								printf("%s:\"You seem kind, maybe you could help me...\"",enemy.data);
								printf("\n%s:\"You see I need some help fighting this",enemy.data);
								printf("\n     guy but I need another member...\"");
								printf("\n%s looked at your party",enemy.data);
								preEnter();
								clearBox();
								return giverTime();
								break;
								case 3:
								clearBox();
								evil = evil + 1;
								printf("%s:\"It's also gonna suck when I finish you!\"",enemy.data);
								break;
								case 4:
								clearBox();
								evil = evil + 1;
								printf("%s:\"Sure I guess\"",enemy.data);
								break;
							}
							break;
						}
						break;
						case neutral:
						clearBox();
						printf("%s:\"Why do you care to comfort me?",enemy.data);
						printf("\n      I did just run into you!\"");
						switch((options("How will you respond?","\"Because it's the right thing to do\"","\"Because I want you to join me\"","\"Why does anyone do anything?\"","\"I wanted to see how you responded\"",4,0,24)))
						{
							case 1: 
							clearBox();	
							good = good + 2;
							switch(rand()%2+1)
							{
								case 1:
								printf("\n%s:\"Are you sure it's the right thing?\"",enemy.data);
								switch(options("","Yes","No","","",4,0,24))
								{
									case 1:
									good = good + 1;
									clearBox();
									printf("\n%s:\"Jeez what a fancy gentlemen you are...\"",enemy.data); // HERE
									break;
									case 2:
									clearBox();
									neutrala = neutrala + 1;	
									printf("\n%s:\"I guess you wouldn't care",enemy.data);
									printf("\n     for someone if they cried, huh?\"");
									switch(options("How will you respond?","\"I do care though\"","\"You're right\"","Don't respond","",3,0,25))
									{
										case 1:
										good = good + 2;	
										clearBox();
										printf("\n%s:\"Hmm but you didn't bother to help me when I cried\"",enemy.data);
										switch(options("How will you respond?","\"That's because you attacked me\"","\"I wanted to give you space\"","\"If I cried you wouldn't care\"","",3,0,24))
										{
											case 1:
											neutrala = neutrala + 1;
											case 2:
											clearBox();
											switch(rand()%2+1)
											{
												case 1:
												printf("\n%s:\"Ah I see, but I believe that is cowardly\"",enemy.data);
												break;
												case 2:
												printf("\n%s:\"Fair point I guess\"",enemy.data);	
												preEnter();
												return makeDeal();
												break;
											}
											break;
											case 3:
											evil = evil + 1;
											clearBox();
											switch(rand()%2+1)
											{
												case 1:
												printf("\n%s:\"Ah I see, but I believe that as an enemy I don't care\"",enemy.data);
												break;
												case 2:
												printf("\n%s:\"Fair point I guess\"",enemy.data);	
												preEnter();
												return makeDeal();
												break;
											}
											break;
										}
										break;
										case 2:
										evil = evil + 3;
										clearBox();
										printf("\n%s:\"Wow, you're truly evil.\"",enemy.data);								
										break;
										case 3:
										neutrala = neutrala + 1;
										clearBox();
										printf("\n%s:\"You're awfully quick to assume that",enemy.data);
										switch(rand()%2+1)
										{
											case 1:
											printf("but you're right\"");
											printf("\n%s:\"I guess it'd be interesting to listen to you\"",enemy.data);
											preEnter();
											return makeDeal();
											break;
											case 2:
											printf("but you're wrong\"");
											enemy.personality = angry;	
											break;
										}
										break;
									}
									break;
								}
								break;
								case 2:
								printf("\n%s:\"Are you sure it's right? I'm a stranger.\"",enemy.data);	
								switch(options("How will you respond?","\"I just want to be friends with you\"","\"It's not right, but I want to stop fighting\"","\"I don't care what you say\"","",3,0,24))
								{
									case 1:
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"I respect that, I will join you then\"",enemy.data);	
										if(inboxFull() == false)
										{
											addMember();
										}
										else
										{
											printf("\n%s:\"Ah I see your party is full, I guess I'll leave. Farwell.\"",enemy.data);
										}
										preEnter();
										return 1;
										break;
										case 2:
										printf("\n%s:\"I cannot be friends with you, a",enemy.data);	
										printf("\n     stranger who I feel destined to face\"");
										break;
									}
									break;
									case 2:
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"As a soldier, I cannot stop fighting. I'm sorry'\"",enemy.data);	
										break;
										case 2:
										printf("\n%s:\"Then let us stop fighting\"",enemy.data);	
										return 1;
										break;
									}	
									break;
									case 3:
									printf("\n%s:\"Fine then lets settle this like soldiers\"",enemy.data);
									break;
								}
								break;
							}
							break;	
							case 2:
							clearBox();
							evil = evil + 2;
							switch(rand()%2+1)
							{
								case 1:
								printf("\n%s:\"I'll never join an inferior opponent such as yourself\"",enemy.data);
								break;
								case 2:
								printf("\n%s:\"So you only comfort people to recruit them\"",enemy.data);
								switch(rand()%2+1)
								{
									case 1:
									printf("\n%s:\"What a genius, I shall join you\"",enemy.data);
									if(inboxFull() == false)
									{
										addMember();
										return 1;
									}
									else
									{
										printf("\n%s:\"Wow... but your party is full... What a waste.\"",enemy.data);
									}
									break;
									case 2:
									break;
								}	
								break;
							}
							break;	
							case 3:
							clearBox();
							neutrala = neutrala + 2;
							switch(rand()%2+1)
							{
								case 1:
								printf("\n%s:\"Haha! This isn't a debate, it's a fight\"",enemy.data);
								break;
								case 2:
								printf("\n%s:\"People will do whatever they do because \nthey believe in it most likely\"",enemy.data);	
								switch(options("How will you respond","\"Interesting, but there's more to it than that\"","\"True, I believe in you\"","Look away and act uninterested","",3,0,25))
								{
									case 1:
									clearBox();	
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"Ah I guess you're right, I'll listen to you the\"",enemy.data);
										return makeDeal();
										break;
										case 2:
										printf("\n%s:\"Yeah right, I'm sure YOU know about life.",enemy.data);	
										printf("\n        You look lifeless right now!\"");
										break;
									}
									break;	
									case 2:
									clearBox();
									printf("\n%s:\"Haha, you really think that will work on me? Lets fight\"",enemy.data);
									break;
									case 3:
									clearBox();
									printf("\n%s:\"Ah am I boring you? Well I guess we'll continue fighting'\"",enemy.data);
									break;
								}
								break;
							}
							break;
							case 4:
							clearBox();
							switch(rand()%2+1)
							{
								case 1:
								printf("\n%s:\"You think I'm some experiment?",enemy.data);
								printf("\n       Fine then lets see how you handle this...\"");
								break;
								case 2:
								printf("\n%s:\"Ah I see, I would have",enemy.data);
								printf("\n     thought of the same thing.\"");	
								preEnter();
								return makeDeal();
								break;
							}	
							break;
						}
						break;
					}	
					break;
					case 2:
					clearBox();
					neutrala = neutrala + 1;
					printf("\n%s slowly stopped crying",enemy.data);
					switch(enemy.personality)
					{
						case happy:
						printf("\n%s:\"HAhA\"",enemy.data);
						break;	
						case sad:
						printf("\n%s:\"Man you're creepy...\"",enemy.data);
						break;	
						case angry:
						printf("\n%s:\"I'm done with this!\"",enemy.data);
						break;	
						case neutral:
						printf("\n%s:\"...\"",enemy.data);
						break;
						case bossy:
						printf("\n%s:\"Time to show you who's boss!\"",enemy.data);
						break;
					}
					break;
					case 3:
					clearBox();
					evil = evil +1;
					switch(rand()%2+1)
					{
						case 1:
						printf("\n%s took the blow!",enemy.data);
						enemy.health = enemy.health - attack;
						break;
						case 2:
						printf("\n%s dodged the blow",enemy.data);
						switch(enemy.personality)
						{
							case happy:
							printf("\n%s:\"Guess your kind of fun is violent!\"",enemy.data);
							break;	
							case sad:
							printf("\n%s:\"Why...? Why must we fight...?\"",enemy.data);	
							break;	
							case angry:
							printf("\n%s:\"HAHA! Almost got me!\"",enemy.data);
							break;
							case neutral:
							printf("\n%s:\"This cycle must continue I guess\"",enemy.data);
							break;
							case bossy:
							printf("\n%s:\"Your cheap blow was in vain!\"",enemy.data);
							break;
							case lonely:
							printf("\n%s:\"Why can't we just be friends?\"",enemy.data);
							break;
						}
						break;
					}	
					enemy.personality = angry;
					break;
					case 4:
					clearBox();
					evil = evil + 1;
					switch(enemy.personality)
					{
						case sad:
						case lonely:
						printf("\n%s ran away crying",enemy.data);
						preEnter();
						return 1;
						break;
						case angry:
						case bossy:
						case neutral:
						printf("\n%s got up and prepared to fight",enemy.data);
						break;
						case happy:
						printf("\n%s vanished",enemy.data);
						evil = evil + 2;
						preEnter();
						return 1;
						break;
					}	
					break;
				}	
				break;
				case 4:
				case 6:
				printf("\n%s:\"So you want me to join you right?",enemy.data);
				printf("\n                Why should I join you?\"");
				switch(options("Why should they join you?","\"Because I need you\"","\"Because I don't want to destroy you\"","\"You shouldn't\"","",3,0,25))
				{
					case 1:
					evil = evil + 2;
					clearBox();
					switch(enemy.personality)
					{
						case happy:
						printf("\n%s:\"Need me? That sounds creepy...\"",enemy.data);
						printf("\n%s got ready to defend themselves",enemy.data);
						break;
						case angry:
						case bossy:
						case neutral:
						printf("\n%s:\"You need me? Clearly you must be alone, \nmaybe people fear you\"",enemy.data);
						switch(options("Do people fear you?","\"They fear my power\"","\"They fear my knowledge\"","\"They fear my secret recipe\"","\"They don't fear me\"",4,1,25))
						{
							case 1:
							case 2:
							evil = evil + 1;
							clearBox();
							switch(rand()%5+1)
							{
								case 1:
								case 2:	
								case 3:
								printf("\n%s:\"I've been looking for a leader like you!\"",enemy.data);	
								printf("\n%s:\"May I join you?\"",enemy.data);
								switch(options("Let them join?","Yes","No","","",2,0,26))
								{
									case 1:
									clearBox();
									if(inboxFull() == false)
									{
										addMember();
										return 1;
									}
									else
									{
										printf("\n%s:\"Oh you have too many companions, then lets continue\"",enemy.data);
									}
									break;
									case 2:
									clearBox();
									printf("\n%s:\"Well I guess it's your funeral then'\"",enemy.data);	
									break;
								}
								break;
								case 4:	
								case 5:
								printf("\n%s:\"Ah interesting, well if you're \nso strong then face me\"",enemy.data);	
								printf("\n%s went back to fighting you",enemy.data);
								break;
							}
							break;
							case 3:
							clearBox();
							neutrala = neutrala + 1;
							switch(rand()%4+1)
							{
								case 1:
								printf("\n%s:\"Why would anyone care about that!\"",enemy.data);
								break;
								case 2:
								case 3:
								printf("\n%s:\"What's this recipe even for?\"",enemy.data);	
								switch(options("How will you respond?","\"A cake\"","\"A weapon\"","\"A monster\"","",3,0,25))
								{
									case 1:
									clearBox();
									switch(rand()%3+1)
									{
										case 1:
										printf("%s:\"Ah man, that's boring\"",enemy.data);
										break;
										case 2:
										case 3:
										printf("%s:\"Oh okay! I'm coming with you!\"",enemy.data);
										if(inboxFull() == false)
										{
											addMember();
											return 1;
										}
										else
										{
											printf("%s:\"Ah WHAT YOUR PARTY IS FULL!?\"",enemy.data);
										}
										break;	
									}								
									break;
									case 2:
									clearBox();
									switch(rand()%2+1)
									{
										case 1:
										printf("%s:\"Ah man, that's boring\"",enemy.data);
										break;
										case 2:
										printf("%s:\"Oh okay! I'm coming with you!\"",enemy.data);
										if(inboxFull() == false)
										{
											addMember();
											return 1;
										}
										else
										{
											printf("%s:\"Ah WHAT YOUR PARTY IS FULL!?\"",enemy.data);
										}
										break;
									}	
									break;
									case 3:
									clearBox();
									printf("%s:\"Oh, that's gross.\"",enemy.data);
									break;
								}
								break;
								case 4:
								printf("\n%s:\"A secret recipe..? Okay I'm \ninterested, I'll join you\"",enemy.data);
								if(inboxFull() == false)
								{
									addMember();
									return 1;	
								}
								else
								{
									printf("\n%s:\"Wait... YOU HAVE TOO MANY MEMBERS!\"",enemy.data);
								}
								break;
							}
							break;
							case 4:
							neutrala = neutrala + 1;
							clearBox();
							printf("\n%s:\"Oh I see then I guess fighting me will\nmake you stronger and then they'll fear you\"",enemy.data);
							printf("\n%s went back to fighting you",enemy.data);
							break;
						}
						break;
						case sad:
						printf("\n%s:\"I don't get it... Why would you need me?\"",enemy.data);	
						switch(options("How will you respond?","\"Because you're powerful\"","\"Because I like you\"","\"I want you as an ally\"","\"Just be quiet and listen to me\"",4,0,24))
						{
							case 1:
							clearBox();
							evil = evil + 1;
							if(enemy.attac > attack)
							{
								printf("\n%s:\"Ah you're right... I'm even stronger than you\"",enemy.data);
								switch(rand()%2+1)
								{
									case 1:
									weaker:
									printf("\n%s:\"I definitely want to join you\"",enemy.data);
									if(inboxFull() == false)
									{
										addMember();
										return 1;
									}
									else
									{
										printf("\n%s:\"Oh you have too many members...\"",enemy.data);
										printf("\n%s:\"I guess I'll make you stronger then\"",enemy.data);
										preEnter();
										enemy.personality = angry;
									}
									break;
									case 2:
									if(health < 10 && enemy.personality != angry && enemy.personality != bossy)
									{
										goto weaker;
									}
									printf("\n%s:\"I guess I'll help make you stronger then\"",enemy.data);
									enemy.personality = angry;
									break;
								}
							}
							else
							{
								printf("\n%s:\"Ah but you're the powerful one...\"",enemy.data);
								switch(rand()%2+1)
								{
									case 1:
									printf("\n%s:\"I definitely want to join you\"",enemy.data);
									if(inboxFull() == false)
									{
										addMember();
										return 1;
									}
									else
									{
										printf("\n%s:\"Oh you have too many members...\"",enemy.data);
										printf("\n%s:\"I guess I'll leave then\"",enemy.data);
										preEnter();
										sparedFoes = sparedFoes + 1;
										return 1;
									}
									break;
									case 2:
									printf("\n%s:\"I guess I'll help make myself stronger\"",enemy.data);
									preEnter();
									enemy.personality = angry;
									break;
								}
							}
							break;
							case 2:
							clearBox();
							evil = evil + 2;
							switch(rand()%4+1)
							{
								case 1:
								case 2:
								printf("\n%s:\"Stay away from me!\"",enemy.data);	
								enemy.personality = angry;
								enemy.attac = enemy.attac + 2;
								break;
								case 3:
								printf("\n%s:\"What...\"",enemy.data);
								break;
								case 4:
								clearBox();	
								printf("\n%s:\"I-I like you too, can I join you?\"",enemy.data);
								switch(options("How will you respond?","\"Yes\"","\"No\"","\"Get Away from me\"","\"Leave please\"",4,0,25))
								{
									case 1:
									clearBox();	
									if(inboxFull() == false)
									{
										addMember();
										preEnter();
										return 1;
									}
									else
										printf("\n%s:\"WHAT!? UGHHHH YOUR PARTY IS FULL\"",enemy.data);	
									enemy.personality = angry;
									break;
									case 2:
									clearBox();	
									printf("\n%s:\"Umm.... Well I guess we will still fight then\"",enemy.data);
									break;
									case 3:
									clearBox();
									printf("\n%s:\"What? Why would you say that after telling me you like me?\"",enemy.data);
									break;
									case 4:
									clearBox();
									printf("\n%s:\"Uh... okay\"",enemy.data);
									preEnter();
									return 1;	
									break;
								}
								break;
							}
							break;
							case 3:
							clearBox();	
							good = good + 1;	
							switch(rand()%2+1)
							{
								case 1:
								printf("\n%s:\"I want to join you as well\"",enemy.data);
								if(inboxFull() == false)
								{
									addMember();
									return 1;
								}
								break;
								case 2:
								printf("\n%s:\"I can't join some stranger...\"",enemy.data);	
								break;
							}
							break;
							case 4:
							clearBox();	
							evil = evil + 2;
							switch(rand()%2+1)
							{
								case 1:
								printf("\n%s:\"Having me listen to you is the least of your problems\"",enemy.data);	
								break;
								case 2:
								printf("\n%s:\"Hmmm...\"",enemy.data);
								preEnter();
								return makeDeal();	
								break;	
							}	
							break;
						}
						break;
					}	
					break;
					case 2:
					good = good + 1;
					clearBox();
					switch(enemy.personality)
					{
						case happy:
						clearBox();
						printf("\n%s:\"Who said we would be destroying?\"",enemy.data);
						switch(options("How will you respond?","\"Uh... No one?\"","\"You attacked me though\"","\"The man behind you\" (distract them)","",3,0,25))
						{
							case 1:
							good = good + 1;
							clearBox();
							printf("\n%s:\"Oh well then what do you want?\"",enemy.data);
							preEnter();
							return makeDeal();
							break;
							case 2:
							clearBox();
							if(health == maxHealth)
							{
								evil = evil + 1;
								printf("\n%s:\"You liar!\"",enemy.data);
							}
							else
							{
								good = good + 1;
								switch(rand()%3+1)
								{
									case 1:
									printf("\n%s:\"Oh... yeah...\"",enemy.data);	
									preEnter();
									return makeDeal();
									break;
									case 2:
									printf("\n%s:\"HAHA! I don't care!\"",enemy.data);	
									break;
									case 3:
									printf("\n%s:\"Oh uh...\"",enemy.data);
									printf("\n%s ran away",enemy.data);
									return 1;
									break;
								}
							}
							break;
							case 3:
							clearBox();
							printf("\n%s:\"A man!?\"",enemy.data);
							printf("\n%s turned around",enemy.data);
							switch(options("What will you do?","Run","Steal from them","Wait for them to turn around","",3,0,26))
							{
								case 1:
								neutrala = neutrala + 2;
								clearBox();
								printf("\nYou escaped!");
								return 1;
								break;
								case 2:
								evil = evil + 2;
								clearBox();
								casher = rand()%10+10;
								printf("\nYou stole %d from %s",casher,enemy.data);
								money = money + casher;
								preEnter();
								clearBox();
								if(enemy.speed >= agility)
								{
									printf("\n%s:\"AHHH YOU STOLE MONEY FROM ME!\"",enemy.data);
								}
								else
								{
									printf("\n%s:\"I didn't see a guy...\"",enemy.data);	
									switch(options("How will you respond?","\"There wasn't any guy\"","\"He ran away!\"","\"I told you there was one so I could steal from you\"","",3,0,24))
									{
										case 1:
										clearBox();
										printf("\n%s:\"Hmm... OH NO YOU WERE LYING!?\"",enemy.data);
										enemy.personality = angry;
										break;
										case 2:
										clearBox();
										printf("\n%s:\"Ah I see, well lets talk some more then\"",enemy.data);
										preEnter();
										return makeDeal();
										break;
										case 3:
										clearBox();	
										printf("\n%s:\"uh... Oh... my money is gone...\"",enemy.data);
										enemy.personality = sad;
										break;
									}
								}
								break;
								case 3:
								good = good + 2;
								clearBox();
								printf("\n%s:\"Weird I didn't see anyone\"",enemy.data);
								preEnter();
								return makeDeal();
								break;
							}	
							break;
						}
						break;
						case sad:
						clearBox();	
						printf("\n%s:\"Oh okay...\"",enemy.data);
						preEnter();
						return makeDeal();
						break;
						case angry:
						clearBox();	
						switch(rand()%2+1)
						{
							case 1:
							printf("\n%s:\"I don't care, I want to fight!\"",enemy.data);
							break;
							case 2:
							printf("\n%s:\"You don't want to fight? Then what do you want?'\"",enemy.data);
							preEnter();
							return makeDeal();
							break;
						}
						break;
						case neutral:
						clearBox();	
						switch(rand()%3+1)
						{
							case 1:
							printf("\n%s:\"I don't want to kill you either\n but I have to survive somehow\"",enemy.data);
							printf("\n%s went back to fighting you",enemy.data);
							break;
							case 2:
							printf("\n%s:\"Hmm you're interesting...\"",enemy.data);
							preEnter();
							return makeDeal();
							break;
							case 3:
							printf("\n%s:\"I respect someone who's willing to make peace, I'll spare you.\"",enemy.data);
							preEnter();
							sparedFoes = sparedFoes + 1;
							return 1;	
							break;
						}
						break;
						case bossy:
						clearBox();	
						switch(rand()%3+1)
						{
							case 1:
							printf("\n%s:\"If you don't want to fight me",enemy.data);
							printf("\n      then what do you want peasant?\"");
							switch(options("How will you respond?","\"To have you on my side\"","\"To work under you\"","\"To know who you are\"","",3,0,25))
							{
								case 1:
								evil = evil + 1;
								printf("\n%s:\"Fool, I am a ruler and I do not care about you\"",enemy.data);
								break;
								case 2:
								evil = evil + 1;
								printf("\n%s:\"You wish to work under me? Very well then\"",enemy.data);
								if(inboxFull() == false)
								{
									printf("\n%s joined the party",enemy.data);	
									addMember();
									return 1;
								}
								else
								{
									printf("\n%s:\"You have too much power for a peasant!!\"",enemy.data);
								}
								break;
								case 3:
								good = good + 1;
								clearBox();
								switch(rand()%3+1)
								{
									case 3:
									case 1:
									printf("\n%s:\"Oh well I'm %s haha!\"",enemy.data);
									preEnter();
									return makeDeal();
									break;
									case 2:
									printf("\n%s:\"You don't care!\"",enemy.data);
									break;
								}
								break;
							}
							break;
							case 2:
							printf("\n%s:\"Silence! I do not care!\"",enemy.data);
							break;
							case 3:
							printf("\n%s:\"I have too many workers, run along now\"",enemy.data);	
							preEnter();
							return 1;
							break;
						}
						break;
					}
					break;
					case 3:
					neutrala = neutrala + 1;
					clearBox();
					switch(enemy.personality)
					{
						case happy:
						switch(rand()%6+1)
						{
							case 1:
							case 4:
							case 5:
							case 6:
							printf("\n%s:\"Why shouldn't I?\"",enemy.data);	
							switch(options("How will your respond?","\"Because I'm dangerous\"","\"Because I'm weak\"","\"Because you'll hate me\"","\"I don't know, just don't join me\"",4,0,24))
							{
								case 1:
								clearBox();
								switch(rand()%4+1)
								{
									case 1:
									printf("\n%s:\"Oh okay then, well I guess I'll leave then...\"",enemy.data);
									preEnter();
									sparedFoes = sparedFoes + 1;
									return 1;
									break;
									case 2:
									printf("\n%s:\"I don't mind being in danger! So can I just join you?\"",enemy.data);
									switch(options("Let them join?","Yes","No","","",2,0,25))
									{
										case 1:
										if(inboxFull() == false)
										{
											addMember();
											return 1;
										}
										else
										{
											clearBox();
											printf("\n%s:\"Oh... You have too many members!\"",enemy.data);
										}
										break;
										case 2:
										printf("\n%s:\"Oh okay then...\"",enemy.data);	
										break;
									}
									break;
									case 3:
									case 4:	
									printf("\n%s:\"Then what do you want?\"",enemy.data);
									preEnter();
									return makeDeal();
									break;
								}
								break;
								case 2:
								clearBox();
								if(enemy.attac >= attack)
								{
									printf("\n%s:\"Well you are weak... But still I think it'd be fun to help you\"",enemy.data);
									return makeDeal();
								}
								else
								{
									printf("\n%s:\"You're actually really strong! Could I join you?\"",enemy.data);
									switch(options("Let them join?","Yes","No","","",2,0,25))
									{
										case 1:
										if(inboxFull() == false)
										{
											addMember();
											return 1;
										}
										else
										{
											clearBox();
												printf("\n%s:\"Oh... You have too many members!\"",enemy.data);
										}
										break;
										case 2:
										printf("\n%s:\"Oh okay then...\"",enemy.data);	
										break;
									}
								}
								break;
								case 3:
								clearBox();	
								switch(rand()%4+1)
								{
									case 1:
									printf("\n%s:\"I don't hate you, you just seem annoying... Bye\"",enemy.data);	
									preEnter();
									return 1;
									break;
									case 2:
									printf("\n%s:\"Well maybe we could get to know each other?\"",enemy.data);	
									return makeDeal();
									break;
									case 3:
									case 4:
									printf("\n%s:\"With a negative attitude like that, I will\"",enemy.data);	
									break;
								}
								break;
								case 4:
								clearBox();	
								printf("\n%s:\"Fine then...\"",enemy.data);	
								break;
							}
							break;
							case 2:
							printf("\n%s:\"What..? Are you okay?\"",enemy.data);	
							enemy.personality = sad;
							break;
							case 3:
							printf("\n%s:\"Haha okay!\"",enemy.data);
							break;
						}
						break;
						case sad:
						switch(rand()%4+1)
						{
							case 1:
							printf("\n%s:\"I guess I'll leave then...\"",enemy.data);	
							preEnter();
							sparedFoes = sparedFoes + 1;
							return 1;
							break;
							case 2:
							printf("\n%s:\"Why are you being so rude!?\"",enemy.data);	
							enemy.personality = angry;
							break;
							case 3:
							case 4:
							printf("\n%s:\"Are you trying to scare me away?\"",enemy.data);
							switch(options("How will you respond?","\"Yes, because I don't need you\"","\"Yes, because you're weak\"","\"No, just don't join me\"","Don't say anything at all'",4,0,25))
							{
								case 1:
								case 3:
								clearBox();
								switch(rand()%2+1)
								{
									case 1:
									printf("\n%s:\"I don't get it! I'm trying to help!\"",enemy.data);
									enemy.personality = angry;
									break;
									case 2:
									printf("\n%s:\"I don't need YOU!\"",enemy.data);
									enemy.personality = bossy;	
									break;	
								}		
								break;
								case 2:
								clearBox();
								if(enemy.attac >= attack)
								{
									printf("\n%s:\"What are you talking about? I'm stronger!\"",enemy.data);
									enemy.personality = angry;
								}
								else
								{
									printf("\n%s:\"You're right... But I can still help somehow\"",enemy.data);
									printf("\n%s:\"That's it, I'm coming along!\"",enemy.data);
									if(inboxFull() == false)
									{
										addMember();
										return 1;	
									}
									else
									{
										printf("\n%s:\"Oh... you have too many members!\"",enemy.data);
									}
								}
								break;
								case 4:
								clearBox();	
								printf("\n%s:\"...Fine then lets continue\"",enemy.data);
								enemy.personality = neutral;
								break;
							}
							break;
						}
						break;
						case angry:
						case bossy:
						printf("\n%s:\"Weird...\"",enemy.data);
						printf("\n%s paused for a bit and went back to fighting",enemy.data);
						break;
						case neutral:
						printf("\n%s:\"Sounds good to me, I don't think I need you.\"",enemy.data);
						enemy.attac = enemy.attac + 2;
						break;
					}
					break;
				}	
				break;
				case 5:
				switch(enemy.personality)
				{
					case angry:
					case bossy:
					printf("\n%s:\"What are you doing?\"",enemy.data);
					switch(options("What are you doing?","Trying to recruit another party member","Trying to get to know them","You're just bored","",3,0,24))
					{
						case 1:
						clearBox();
						printf("%s:\"Hmm let me see your party\"",enemy.data);
						printf("\n%s studied your party layout...",enemy.data);
						if(isPartyFull() == true)
						{
							printf("\n%s:\"Dude, your party is full...\"",enemy.data);
							if(inboxFull() == true)
							{
								printf("\n%s:\"Oh AND your inbox is full? What the heck man\"",enemy.data);
							}
							else
								printf("\n%s rolled their eyes and went back to fighting",enemy.data);
						}	
						else if(soloMember() == true)
						{
							printf("\n%s:\"Ah you're by yourself...\"",enemy.data);
							preEnter();
							if(enemy.personality == happy || enemy.personality == sad)
							{
								printf("\n%s:\"I'll keep ya company!\"",enemy.data);
								addMember();
								enemy.health = 0;
							}
							else
							{
								printf("\n%s:\"It'll be easier to finish you off!\"",enemy.data);
								preEnter();
							}
						}
						else
						{
							switch(rand()%2+1)
							{
								case 1:
								printf("\n%s:\"Wow you don't have that many for someone",enemy.data);
								printf("\n     who is trying to talk to an overlord like me");
								printf("\n     so I don't think I should join you haha!\"");
								break;
								case 2:
								if(inboxFull() == false)
								{
									printf("\n%s:\"Yeah I'll join you\"",enemy.data);
									addMember();
									enemy.health = 0;	
								}
								else
								{
									printf("\n%s:\"Meh I would get bored if I was with you.\"",enemy.data);
								}
								break;
							}
						}	
						break;
						case 2:
						good = good + 1;
						clearBox();
						printf("%s:\"Trying to get to know me? Well I mean it is\nimportant to know who's going to be\ncontrolling you for the rest of your life\"",enemy.data);
						printf("\n%s laughed and went back to fighting",enemy.data);
						enemy.personality = happy;
						break;
						case 3:
						neutrala = neutrala + 1;
						clearBox();
						printf("%s:\"Bored? I'm bored too.\"",enemy.data);
						switch(options("What will you say next?","Want to join me?","Want to keep fighting?","","",2,0,25))
						{
							case 1:
							clearBox();
							switch(rand()%4+1)
							{
								case 1:
								printf("\n%s:\"Meh sure\"",enemy.data);
								preEnter();
								addMember();
								return 1;
								break;
								case 2:
								case 3:
								case 4:
								printf("\n%s:\"No thanks\"",enemy.data);
								break;
							}	
							break;
							case 2:
							clearBox();
							printf("\n%s:\"Sure\"",enemy.data);
							break;
						}	
						break;
					}
					break;
					case happy:
					case neutral:
					printf("\n%s:\"Lets get this over with quickly\"",enemy.data);
					preEnter();
					clearBox();
					return makeDeal();
					break;
					case sad:
					switch(rand()%5+1)
					{
						case 1:
						printf("\n%s:\"I'm not feeling well...\"",enemy.data);
						break;
						case 2:
						case 3:
						printf("\n%s:\"Man... I'm so down...\"",enemy.data);
						break;
						case 4:
						printf("\n%s:\"Hey I'm not feeling well...\"",enemy.data);
						break;
						case 5:
						printf("\n%s:\"Ugh... I'm so sad... Can you help me?\"",enemy.data);	
						break;
					}	
					switch(options("Will you help them?","Yes","No","","",2,0,25))
					{
						case 1:
						good = good + 2;
						clearBox();
						return giverTime();
						break;
						case 2:
						evil = evil + 2;
						clearBox();
						switch(rand()%4+1)
						{
							case 1:
							printf("\n%s:\"Ah okay...\"",enemy.data);	
							break;
							case 2:
							printf("\n%s:\"I guess no one will help me...\"",enemy.data);	
							enemy.personality = lonely;
							break;
							case 3:
							printf("\n%s:\"UGHH I just want help!\"",enemy.data);	
							enemy.personality = angry;
							break;
							case 4:
							printf("\n%s:\"Oh...\"",enemy.data);
							break;
						}
						break;
					}
					break;
				}		
			}
		}
		else if(enemy.personality == boss1) // for boss dialogue
		{
			setCursor(0,22);
			if(enemy.health <= 10)
			{
				printf("Gila:\"I don't care\"");
			}
			else
			{
				switch(rand()%3+1)
				{
					case 1:
					printf("Gila:\"...\"");
					break;
					case 2:	
					switch(gilagila)
					{
						default:
						printf("Gila:\"...\"");
						break;
						case 0:	
						printf("Gila:\"Do you believe that");
						printf("\n       happiness is the most");
						printf("\n       aspect in life?\"");
						switch(options("","Yes","No","","",2,0,29))
						{
							case 1:
							clearBox();	
							printf("Gila:\"Hmm...\"");
							gilagila++;
							break;
							case 2:
							clearBox();
							printf("Gila:\"...\"");
							gilagila--;
							break;
						}
						break;
						case 1:
						printf("\nGila:\"Do you think the");
						printf("\n       weak should be");
						printf("\n       protected?\"");
						switch(options("","Yes","No","","",2,0,29))
						{
							case 1:
							clearBox();
							printf("Gila:\"Hmm...\"");
							gilagila++;	
							break;
							case 2:
							evil = evil + 10;
							clearBox();
							printf("Gila:\"Unfortunate...\"");	
							gilagila-=2;	
							break;
						}
						break;
						case 2:
						printf("\nGila:\"Would you protect");
						printf("\n       others even if it");
						printf("\n       meant being a \"villain\"?\"");
						switch(options("","Yes","No","","",2,0,29))
						{
							case 1:
							clearBox();
							printf("Gila:\"Hmm...\"");
							gilagila++;	
							break;
							case 2:
							clearBox();
							printf("Gila:\"I respect that response\"");	
							gilagila-=3;	
							break;
						}
						break;	
						case 3:
						printf("\nGila:\"Would you like to end this");
						printf("\n       and maybe ally with me?\"");
						switch(options("","Yes","No","","",2,0,29))
						{
							case 1:
							clearBox();
							printf("Gila:\"Good, I think we'll be great allies\"");
							addHuman("Gila",100,100,8,2,4,4,0,1000,boss1,gun,lance);
							enemy.health = 0;
							break;
							case 2:
							clearBox();	
							printf("Gila:\"Okay...\"");
							gilagila = -1;
							enemy.attac++;
							break;
						}
						break;
					}
					break;
					default:
					if(enemy.health >= health)
						printf("Gila:\"Lets get back to fighting...\"");
					else
						printf("Gila:\"Ugh... This is bad...\"");
					break;	
				}
			}
		}
		preEnter();
		break;
		case 2: // capture
		clearBox();
		printf("\n%s attempted to capture %s with their net",name,enemy.data);
		pause(1);
		evil = evil + 1;
		if(enemy.personality == boss1)
		{
			printf("\n%s:\"What the heck are you doing!?\"",enemy.data);
			preEnter();
		}
		else if(enemy.health > health) // if the monster has more health then it won't be captured
		{
			printf("\n%s was too weak to be able to capture %s!",name,enemy.data);
			preEnter();
		}
		else
		{
			switch(rand()%5+1)
			{
				case 1: // critical
				printf("\n%s's net captured %s instantly!",name,enemy.data);
				addMember();
				return 1;
				break; 
				case 2: // normal
				case 4:
				case 5:
				printf("\n%s is struggling in the net, you run \ntowards it to try and capture it",enemy.data);
				preEnter();
				while(capture == false || health > 0)
				{
					clearBox();
					hunter = rand()%success+1-enemy.reflect;
					if(hunter > 0)
					{
						printf("\nYou caught %s!",enemy.data);
						preEnter();
						addMember();
						return 1;
					}
					else if(hunter < 0)
					{
						printf("\n%s struggled and almost got out",enemy.data);
						health = health - 2;
					}
					else
					{
						printf("\nYou almost caught them");
						health = health - 1;	
					} 
					while(continu == false)
					{
						printf("\nDo you want to still capture them (y/n)?");
						input = getch();	
						if(input == 'y')
						{
							continu = true;
						}
						else if(input == 'n')
						{
							return 0;
						}
					}
					continu = false;
				}
				break;
				case 3: // failed
				printf("\n%s broke out of the net!",enemy.data);
				preEnter();
				break;
			}	
		}
		break;
	}	
	return 0;
}	

void enemyInput(int enemyType) // gets command from the enemy
{
	srand((unsigned)time(NULL));
	
	int input; // gets input for player dodge
	bool checker = false; // checks if the enemy already had another attack
	int position; // the position the player selected
	int direction = rand()%4+1;
	int power = enemy.attac; // the damage the enemy gives
	int pep; // used for get party member health
	
	int target = 0; // who the enemy targets
	
	if(enemy.health <= 0) // makes sure the enemy is alive
	{
		goto caution;
	}
	clearBox();
	if(health > 0) // checks if the player is alive
	{
		if(partyCount() == 1) // if the player has only one party member
		{
			target = rand()%8+1;
			switch(target)
			{
				case 1:
				case 2:
				target = 1;
				break;
				case 3:
				case 4:
				case 5:
				target = 2;
				break;
				case 6:
				case 7:
				case 8:
				target = 5;
				break;
			}
		}
		else if(partyCount() == 0)
			target = 1;
		else
			target = (rand()%partyCount())+1;
		rippy:
		if(target == 1)
		{
			if(enemy.type == combo) //changes when the enemy has a combination of melee and gun attacks
			{
				switch(rand()%2+1)
				{
					case 1:
					goto swinger;
					break;
					case 2:
					goto gunner;
					break;
				}	
			}	
			switch(enemyType) // separates bosses from regular enemies
			{
				case 1: // regular enemy
				switch(enemy.type) // switches patterns based off of the enemy's type and later on their personality (later on)
				{
					default:
					case sword:
					case lance:
					case axe:
					swinger:
					clearBox();
					switch(rand()%4+1)
					{
						default:
						case 1: // enemy attacks
						case 2:
						case 4:
						rawra:				
						position = ((rand()%10+agility)*10)%100;	
						enemyDodger = ((rand()%10+enemy.speed)*10)%100;	
						printf("\n%s slashed at %s with an attack!",enemy.data,name);
						if(position > enemyDodger)
						{
							power = power - rand()%agility+1;
						}
						if(enemyDodger > position && checker != true)
						{
							power = power * 2;
							power = power-defense+1;
							if(power < 0)
							{
								power = 1;
							}
							printf("\n%s landed a critical hit on \n%s for %d damage and \ncan attack again!",enemy.data,name,power);
							checker = true;
						}
						else if(position == enemyDodger || enemy.speed > position*10 || (checker == true && enemyDodger > position))
						{
							checker = false;
							power = power-defense+1;
							if(power < 0)
							{
								power = 1;
							}
							printf("\n%s hit %s with blow for \n%d damage",enemy.data,name,power);
						}
						else
						{
							printf("\n%s missed!",enemy.data);
							power = 0;
							checker = false;
						}
						health = health - power;
						preEnter();
						if(checker == true) // if the enemy attacks agains
						{
							clearBox();
							power = enemy.attac;
							goto rawra;
						}
						break;
						case 3: // extra stuff
						clearBox();
						switch(enemy.personality)
						{	
							default:
							case happy:
							switch(rand()%3+1)
							{
								default:
								case 1:
								case 3:	
								printf("\n%s:\"Haha this is fun!\"",enemy.data);
								enemy.speed = enemy.speed + 1;
								printf("\n%s:\"Don't you agree?\"",enemy.data);
								switch(options("How will you respond?","\"Yes\"","\"No\"","\"How is this fun!?\"","",3,0,26))
								{
									case 1:
									evil = evil + 2;
									clearBox();
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"Haha!\"",enemy.data);	
										enemy.speed = enemy.speed + 1;
										break;
										case 2:
										printf("\n%s:\"God you're creepy...\"",enemy.data);
										enemy.personality = angry;
										break;
									}	
									break;
									case 2:
									good = good + 2;
									clearBox();	
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"If you're not liking this, can I leave then?\"",enemy.data);
										switch(options("Let them leave?","Yes","No","Ask to make a deal","",3,0,25))
										{
											case 1:
											good = good + 2;
											printf("\n%s:\"Okay then\"",enemy.data);
											sparedFoes = sparedFoes + 1;	
											enemy.health = 0;
											break;
											case 2:
											evil = evil + 2;
											printf("\n%s:\"UGHH YOU ARE SO CONFUSING\"",enemy.data);	
											enemy.personality = angry;
											break;
											case 3:
											if(makeDeal() == 1)
											{
												enemy.health = 0;	
											}	
											break;
										}	
										break;
										case 2:
										printf("\n%s:\"Well too bad! haha\"",enemy.data);	
										break;
									}
									break;
									case 3:
									neutrala = neutrala + 2;
									clearBox();	
									switch(rand()%3+1)
									{
										case 1:
										printf("\n%s:\"It's not, I just wanted to see your response\"",enemy.data);	
										enemy.personality = neutral;
										break;
										case 2:
										printf("\n%s:\"Because it is!\"",enemy.data);	
										break;
										case 3:
										printf("\n%s:\"Who cares!\"",enemy.data);	
										break;
									}
									break;
								}
								break;
								case 2:
								printf("\n%s is smiling",enemy.data);	
								break;
							}
							break;
							case sad:
							switch(rand()%3+1)
							{
								default:
								case 1:
								printf("\n%s sighs",enemy.data);	
								break;
								case 2:
								case 3:
								printf("\n%s:\"Hey... Do you think I'll ever find happiness?\"",enemy.data);	
								switch(options("How will you respond?","Yes","Yes but you have to work for it","No","Never",4,0,25))
								{
									case 1:
									clearBox();	
									neutrala = neutrala + 1;
									good = good + 1;
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"Maybe I'll find it with you?\"",enemy.data);	
										preEnter();
										if(makeDeal() == 1)
										{
											enemy.health = 0;
										}
										break;
										case 2:
										printf("\n%s:\"Can I leave this fight and find it?\"",enemy.data);
										switch(options("Let them leave?","Yes","No","","",2,0,25))
										{
											case 1:
											good = good + 1;
											sparedFoes = sparedFoes + 1;
											enemy.health = 0;
											break;
											case 2:
											clearBox();
											printf("\n%s:\"Oh...\"",enemy.data);	
											break;
										}
										break;
									}
									break;
									case 2:
									clearBox();	
									good = good + 2;
									printf("\n%s:\"Hmm... Maybe fighting you is the work I need\"",enemy.data);
									break;
									case 3:
									clearBox();
									evil = evil + 2;
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"HOW DO YOU KNOW!?\"",enemy.data);
										enemy.personality = angry;
										break;
										case 2:
										printf("\n%s:\"Oh...\"",enemy.data);	
										enemy.personality = lonely;
										break;
									}
									break;
									case 4:
									clearBox();
									neutrala = neutral + 1;
									evil = evil + 1;
									printf("\n%s:\"Yikes...\"",enemy.data);
									enemy.personality = lonely;
									break;
								}
								break;
							}
							break;
							case angry:
							switch(rand()%3+1)
							{
								default:
								case 1:
								printf("\n%s laughed",enemy.data);	
								break;
								case 3:	
								printf("\n%s made faces at you",enemy.data);
								break;
							}
							break;
							case neutral:
							switch(rand()%3+1)
							{
								case 1:
								case 2:
								printf("\n%s:\"Why do you fight?\"",enemy.data);	
								switch(options("How will you respond?","\"Because I need to survive\"","\"Because my creator demands it\"","\"Because it's fun\"","\"I don't want to fight\"",4,0,26))
								{
									case 1:
									clearBox();	
									neutrala = neutrala + 2;
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"Ah I see, well how about we stop this...\"",enemy.data);
										preEnter();
										if(makeDeal() == 1)
										{
											enemy.health = 0;
										}
										break;
										case 2:
										printf("\n%s:\"Then let us see who will be the survivor\"",enemy.data);
										break;
									}
									break;
									case 2:
									clearBox();
									good = good + 2;
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"Wow... What an annoying response...\"",enemy.data);
										break;
										case 2:
										printf("\n%s:\"What are you even talking about?\"",enemy.data);	
										break;
									}
									break;
									case 3:
									clearBox();	
									evil = evil + 2;
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"It's fun but I wouldn't say that...\"",enemy.data);	
										break;
										case 2:
										printf("\n%s:\"You're truly evil then\"",enemy.data);
										break;
									}
									break;
									case 4:
									clearBox();
									neutrala = neutrala + 1;	
									printf("\n%s:\"Then shall we end this?\"",enemy.data);
									switch(options("End the fight?","Yes","No","","",2,0,25))
									{
										case 1:
										enemy.health = 0;	
										sparedFoes = sparedFoes + 1;
										break;
										case 2:
										printf("\n%s:\"Strange but okay...\"",enemy.data);	
										break;
									}
									break;
								}
								break;
								case 3:
								printf("\n%s:\"You're an interesting fighter...\"",enemy.data);	
								break;
							}
							break;
							case bossy:
							switch(rand()%3+1)
							{
								case 1:
								printf("\n%s:\"AHAHA I WILL RULE THE WORLD\"",enemy.data);	
								break;
								case 2:
								case 3:
								printf("\n%s:\"You will be my minion when this is over!\"",enemy.data);	
								break;
							}
							break;
							case lonely:
							printf("\n%s:\"Can I please join you..?\"",enemy.data);
							switch(options("Let them join you?","Yes","No","","",2,0,25))
							{
								case 1:
								if(inboxFull() == false)
								{
									addMember();
									enemy.health = 0;
								}
								else
									printf("\n%s:\"Ugh you have too many members...\"",enemy.data);	
								break;
								case 2:
								printf("\n%s:\"...\"",enemy.data);	
								enemy.personality = angry;
								break;
							}
							break;
						}
						break;
					}
					break;
					case gun:
					case bow:
					gunner:
					switch(rand()%4+1)
					{
						default:
						case 1:
						case 4:
						case 2: // enemy attacks
						boom:
						power = (enemy.attac)+enemy.speed;
						if(power < defense)
						{
							power = enemy.attac;
						}	
						printf("\n%s fired some shots at %s!",enemy.data,name);
						if(enemy.speed > agility)
							power = enemy.attac+enemy.speed;
						else
							power = enemy.attac + rand()%10;
						if(power < defense)
							power = defense%power+1;
						printf("\n%s took %d damage",name,power);
						health = health - power;
						preEnter();
						break;
						case 3: // extra stuff
						switch(enemy.personality)
						{
							case happy:
							switch(rand()%3+1)
							{
								case 1:
								case 3:	
								printf("\n%s:\"Haha this is fun!\"",enemy.data);
								enemy.speed = enemy.speed + 1;
								printf("\n%s:\"Don't you agree?\"",enemy.data);
								switch(options("How will you respond?","\"Yes\"","\"No\"","\"How is this fun!?\"","",3,0,26))
								{
									case 1:
									evil = evil + 2;
									clearBox();
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"Haha!\"",enemy.data);	
										enemy.speed = enemy.speed + 1;
										break;
										case 2:
										printf("\n%s:\"God you're creepy...\"",enemy.data);
										enemy.personality = angry;
										break;
									}	
									break;
									case 2:
									good = good + 2;
									clearBox();	
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"If you're not liking this, can I leave then?\"",enemy.data);
										switch(options("Let them leave?","Yes","No","Ask to make a deal","",3,0,25))
										{
											case 1:
											good = good + 2;
											printf("\n%s:\"Okay then\"",enemy.data);
											sparedFoes = sparedFoes + 1;	
											enemy.health = 0;
											break;
											case 2:
											evil = evil + 2;
											printf("\n%s:\"UGHH YOU ARE SO CONFUSING\"",enemy.data);	
											enemy.personality = angry;
											break;
											case 3:
											if(makeDeal() == 1)
											{
												enemy.health = 0;	
											}	
											break;
										}	
										break;
										case 2:
										printf("\n%s:\"Well too bad! haha\"",enemy.data);	
										break;
									}
									break;
									case 3:
									neutrala = neutrala + 2;
									clearBox();	
									switch(rand()%3+1)
									{
										case 1:
										printf("\n%s:\"It's not, I just wanted to see your response\"",enemy.data);	
										enemy.personality = neutral;
										break;
										case 2:
										printf("\n%s:\"Because it is!\"",enemy.data);	
										break;
										case 3:
										printf("\n%s:\"Who cares!\"",enemy.data);	
										break;
									}
									break;
								}
								break;
								case 2:
								printf("\n%s is smiling",enemy.data);	
								break;
							}
							break;
							case sad:
							switch(rand()%3+1)
							{
								case 1:
								printf("\n%s sighs",enemy.data);	
								break;
								case 2:
								case 3:
								printf("\n%s:\"Hey... Do you think I'll ever find happiness?\"",enemy.data);	
								switch(options("How will you respond?","Yes","Yes but you have to work for it","No","Never",4,0,25))
								{
									case 1:
									clearBox();	
									neutrala = neutrala + 1;
									good = good + 1;
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"Maybe I'll find it with you?\"",enemy.data);	
										preEnter();
										if(makeDeal() == 1)
										{
											enemy.health = 0;
										}
										break;
										case 2:
										printf("\n%s:\"Can I leave this fight and find it?\"",enemy.data);
										switch(options("Let them leave?","Yes","No","","",2,0,25))
										{
											case 1:
											good = good + 1;
											sparedFoes = sparedFoes + 1;
											enemy.health = 0;
											break;
											case 2:
											clearBox();
											printf("\n%s:\"Oh...\"",enemy.data);	
											break;
										}
										break;
									}
									break;
									case 2:
									good = good + 2;
									printf("\n%s:\"Hmm... Maybe fighting you is the work I need\"",enemy.data);
									break;
									case 3:
									evil = evil + 2;
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"HOW DO YOU KNOW!?\"",enemy.data);
										enemy.personality = angry;
										break;
										case 2:
										printf("\n%s:\"Oh...\"",enemy.data);	
										enemy.personality = lonely;
										break;
									}
									break;
									case 4:
									neutrala = neutral + 1;
									evil = evil + 1;
									printf("\n%s:\"Yikes...\"",enemy.data);
									enemy.personality = lonely;
									break;
								}
								break;
							}
							break;
							case angry:
							switch(rand()%3+1)
							{
								case 1:
								printf("\n%s laughed",enemy.data);	
								break;
								case 3:	
								case 2:
								printf("\n%s made faces at you",enemy.data);
								break;
							}
							break;
							case neutral:
							default:
							switch(rand()%3+1)
							{
								case 1:
								case 2:
								printf("\n%s:\"Why do you fight?\"",enemy.data);	
								switch(options("How will you respond?","\"Because I need to survive\"","\"Because my creator demands it\"","\"Because it's fun\"","\"I don't want to fight\"",4,0,26))
								{
									case 1:
									clearBox();	
									neutrala = neutrala + 2;
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"Ah I see, well how about we stop this...\"",enemy.data);
										preEnter();
										if(makeDeal() == 1)
										{
											enemy.health = 0;
										}
										break;
										case 2:
										printf("\n%s:\"Then let us see who will be the chosen survivor\"",enemy.data);
										break;
									}
									break;
									case 2:
									clearBox();
									good = good + 2;
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"Wow... What an annoying response...\"",enemy.data);
										break;
										case 2:
										printf("\n%s:\"What are you even talking about?\"",enemy.data);	
										break;
									}
									break;
									case 3:
									clearBox();	
									evil = evil + 2;
									switch(rand()%2+1)
									{
										case 1:
										printf("\n%s:\"It's fun but I wouldn't say that...\"",enemy.data);	
										break;
										case 2:
										printf("\n%s:\"You're truly evil then\"",enemy.data);
										break;
									}
									break;
									case 4:
									clearBox();
									neutrala = neutrala + 1;	
									printf("\n%s:\"Then shall we end this?\"",enemy.data);
									switch(options("End the fight?","Yes","No","","",2,0,25))
									{
										case 1:
										enemy.health = 0;	
										sparedFoes = sparedFoes + 1;
										break;
										case 2:
										printf("\n%s:\"Strange but okay...\"",enemy.data);	
										break;
									}
									break;
								}
								break;
								case 3:
								printf("\n%s:\"You're an interesting fighter...\"",enemy.data);	
								break;
							}
							break;
							case bossy:
							switch(rand()%3+1)
							{
								case 1:
								printf("\n%s:\"AHAHA I WILL RULE THE WORLD\"",enemy.data);	
								break;
								case 2:
								case 3:
								printf("\n%s:\"You will be my minion when this is over!\"",enemy.data);	
								break;
							}
							break;
							case lonely:
							printf("\n%s:\"Can I please join you..?\"",enemy.data);
							switch(options("Let them join you?","Yes","No","","",2,0,25))
							{
								case 1:
								if(inboxFull() == false)
								{
									addMember();
									enemy.health = 0;
								}
								else
									printf("\n%s:\"Ugh you have too many members...\"",enemy.data);	
								break;
								case 2:
								printf("\n%s:\"...\"",enemy.data);	
								enemy.personality = angry;
								break;
							}
							break;
						}
						break;
					}
					break;
				}
				break;
				case 2: // boss1
				switch(rand()%3+1)
				{
					case 1:
					if(alignmentCheck() == harsh || alignmentCheck() == complex)
					{
						clearBox();
						printf("Gila:\"I like your style\"");
						enemy.attac = enemy.attac + 2;
					}
					else
					{
						clearBox();
						printf("\"Gila:\"Haha! this is fun!\"");
						enemy.attac = enemy.attac + 1;
					}
					break;
					case 2:
					case 3:	
					power = enemy.attac + (rand()%alignmentCheck()+1);
					if(power < defense)
					{
						power = enemy.attac;
					}
					printf("Gila slashed at %s for %d damage!",name,power);	
					health = health - power;
					updateHealth();
					break;
				}
				break;
				case 4:
				switch(rand()%2+1)
				{
					case 1:
					clearBox();
					power = enemy.attac + (rand()%10+1);
					if(power < defense)
					{
						power = enemy.attac%defense+1;
					}
					printf("\n%s attacked %s for %d damage",enemy.data,name,power);
					 break;
					case 2:
					clearBox();
					power = (rand()%20+1);
					if(power <defense)
					{
						power = enemy.attac%defense+1;
					}
					printf("\n%s punched %s for %d damage",enemy.data,name,power);
					break;
				}	
				health = health - power;
				updateHealth();
				break;	
				case 3:
				clearBox();
				power = enemy.attac + (rand()%10+1);
				printf("\n%s attacked %s for %d damage",enemy.data,name,power);
				health = health - power;
				updateHealth();
				break;
			}
		}
		else if(target != 5)
		{
			target = target - 2;
			pep = party[target];
			if(partyMemberHere(target) == true && inbox[pep].health > 0)
			{
				power = enemy.attac;
				printf("\n%s attacked %s!",enemy.data,inbox[pep].data);
				if(enemy.type == inbox[pep].weakness)
				{
					printf("\n%s was weak against the attack",inbox[pep].data);
					power = power + rand()%10+1;
				}
				else if(enemy.attac <= inbox[pep].reflect)
				{
					printf("\n%s's defense blocked some of the attack!",inbox[pep].data);
					power = enemy.attac%inbox[pep].reflect+1;
				}
				printf("\n%s took %d damage",inbox[pep].data,power);
				inbox[pep].health = inbox[pep].health - power;
				if(inbox[pep].health < 0)
				{
					printf("\n%s was knocked out",inbox[pep].data);
					inbox[pep].health = 0;
				}	
			}
			else
			{
				target = 1;
				goto rippy; // goes back until the enemy has a target to attack
			}	
			preEnter();
		}
		else
		{
			power = enemy.attac%10+2;
			printf("\n%s attacked everyone at once!",enemy.data);
			preEnter();
			printf("\nEveryone took %d damage",power);
			preEnter();
			health = health - power;
			if(inbox[party[0]].health > 0 && partyMemberHere(0) == true)
				inbox[party[0]].health = inbox[party[0]].health - power;
			if(inbox[party[1]].health > 0 && partyMemberHere(1) == true)
				inbox[party[1]].health = inbox[party[1]].health - power;
			if(inbox[party[2]].health > 0 && partyMemberHere(2) == true)
				inbox[party[2]].health = inbox[party[2]].health - power;
		}
	}	
	else
	{
		gameOver();
	}	
	updateHealth();
	setCursor(1,28);
	caution:
	preEnter();
	clearBox();
}		

int partyCommands(int mag) // commands for dealing with the party
{
	int fuso;
	int power;
	char spirit[20];
	
	rip:
	clearBox();
	printf("\n%s HP:%d",enemy.data,enemy.health);
	printf("\nCurrent Weapon:%s",storage[mag].label);
	if(storage[mag].type == gun)
	{
		printf("\nAmmunition:%d",ammunition);
	}
	switch(options("What will you do?","Change Party","Spells","Pass Turn","Go back to regular commands",4,1,26))
	{
		case 1: // for swapping out party members;
		fuso  = changeParty();
		system("cls");
		printBattle();
		if(fuso == 1) // if they can't or do not want to switch out members
			goto rip;
		break;
		case 2: // fusion
		clearBox();
		switch(options("Which kinds of spells do you want to use?","Attack Spells","Defensive Spells","Fusion","Go back",4,0,26))
		{
			case 1:
			clearBox();
			setCursor(0,27);
			printf(" Plasma: Level %d       | HP Cost: 5",plasmaLv);
			printf("\n Magic Sword: Level %d  | HP Cost:6",magicSwordLv);
			switch(options("Which attack spell do you want to use?","Plasma","Magic Sword","Go back","",3,0,26))
			{
				case 1:
				clearBox();	
				health = health - 5;
				power = rand()%agility+plasmaLv;
				printf("\n%s took 5 damage and shot a bolt of plasma from their\nfingertips at %s for %d damage",name,enemy.data,power);
				enemy.health = enemy.health - power;
				break;
				case 2:
				clearBox();
				health = health - 6;
				power = rand()%defense+magicSwordLv;
				printf("\n%s took 6 damage and fired blue blades from\ntheir fingertips at %s for %d damage",name,enemy.data,power);
				enemy.health = enemy.health - power;
				break;
				case 3:
				goto rip;
				break;
			}
			preEnter();
			break;
			case 2:
			clearBox();
			setCursor(0,27);
			printf(" Aid: Level %d       | MaxHP Cost: %d",aid,maxHealth%2+1);
			printf("\n Create Spirit: Level %d  | HP Cost:10",createSprtlv);
			switch(options("Which defense spell do you want to use?","","","Go back","",3,0,26))
			{
				case 1:
				clearBox();	
				if(maxHealth > maxHealth%2+1)
				{
					maxHealth = maxHealth - (maxHealth%2+1);	
					restoreHealth();
					updateHealth();
				}
				else
				{
					printf("You don't have enough max health for this!");
					preEnter();
					goto rip;
				}
				break;
				case 2:
				clearBox();
				if(inboxFull() == true)
				{
					printf("You can't summon an extra member because your inbox is full");
					preEnter();
					goto rip;
				}
				else
				{
					health = health - 10;
					addSpirit(health%10+attack,health%10+attack,createSprtlv+rand()%level+1,createSprtlv+rand()%level+1,createSprtlv+rand()%level+1,level,experience,maxXP,neutral,enemy.type,storage[equipped].type);
					printBattle();
				}
				break;
				case 3:
				goto rip;
				break;
			}
			break;
			case 3:
			system("cls");
			fuso = fusion();
			system("cls");
			printBattle();
			if(fuso == 1) // if they can't or do not want to fuse
				goto rip;
			break;
			case 4:
			break;
		}
		break;
		case 3: // player passes their turn to the next member
		return 2;
		break;
		case 4: // goes back to regular commands
		return 1;
		break;
	}	
}	

int playerInput(int mag) // gets command from the player
{
	int talkera;
	int decision;
	whee:
	fflush(stdin); // clears any extra enter presses
	switch(options("What will you do?","Attack with Current Weapon","Switch Weapon","Recruit Enemy","Extra Commands",4,1,26))
	{
		case 1:
		if(storage[mag].type == gun || storage[mag].type == bow)
		{
			if(ammunition != 0)
				gunAttack(mag);
			else
			{
				printf("\nYou're out of ammunition!?");
				preEnter();
			}
		}
		else if(storage[mag].type == combo)
		{
			clearBox();
			printf("\nAmmunition:%d",ammunition);
			switch(options("What attack would you like to use?","Ranged Attack","Melee Attack","","",2,1,27))
			{
				case 1:
				if(ammunition != 0)
					gunAttack(mag);
				else
				{	
					system("cls");
					printf("\nYou're out of ammunition!?");
					preEnter();
				}
				break;
				case 2:
				meleeAttack(mag);
				break;
			}	
		}	
		else
		{
			meleeAttack(mag);
		}
		break;
		case 2:
		system("cls");
		return 1;
		break;
		case 3:
		talkera = talkTime();
		talker = false;
		if(talkera == 1) 
		{
			talker = true;
			enemy.health = 0;
		}
		break;
		case 4:
		decision = partyCommands(mag);	
		if(decision == 1)
		{
			clearBox();
			printf("\nCurrent Weapon:%s",storage[mag].label);
			if(storage[mag].type == gun || storage[mag].type == bow || storage[mag].type == combo && storage[mag].chamber != 0)
			{
				printf("\nAmmunition:%d",ammunition);
			}
			goto whee;	
		}	
		else if(decision == 2)
		{
			
		}	
		break;
	}
	if(enemy.health > 0)
		partyMemberTurn();
	return 0;
}	

int weaponFinder() // used to find a weapon to switch
{
	int mag;
	int x;
	int y;
	int a;
	int input;
	bool accept = false;
	wpn hunter,goober;
	
	for(y=0;y<40;y++)
	{
		for(x=0;x<30;x++)
		{
			if(x==0 || x == 29 || y == 0 || y == 39)
				setColor(BLUE);
			else
				setColor(DARK_RED);
			printAt(219,x,y);
			setColor(WHITE);
		}
	}
	setCursor(2,1);
	printf("Weapon Inventory:");
	for(x = 0;x<10;x++)
	{
		if(weaponHere(x) == true)
		{
			setCursor(2,x*2+4);
			printf("%d %s",x,storage[x].label);
			setCursor(2,x*2+5);
			printf("TYPE:");
			switch(storage[x].type)
			{
				case sword:
				printf("SWORD");
				break;
				case lance:
				printf("LANCE");
				break;
				case gun:
				printf("GUN");
				break;
				case bow:
				printf("BOW");
				break;
				case axe:
				printf("AXE");
				break;
				case combo:
				printf("COMBINATION WEAPON");
				break;
			}	
		}
		else
		{
			setCursor(2,x*2+4);
			printf("%d EMPTY",x);
			
		}
	}
	while(accept == false)
	{
		setCursor(32,2);
		printf("Which number weapon do you want?:");
		scanf("%d",&input);
		if(weaponHere(input) == true)
			accept = true;
		else
			printString("                                      ",32,2);
	}
	system("cls");
	printBattle();
	return input;
}

void battle(int battleType) // where the battles are processed
{
	srand((unsigned)time(NULL));
	int input,looper;
	int a;
	int x =0;
	int pep;
	int adder;
	wpn hunter,goober; // both these variables and mag are used to look for the weapon the player wants to equip
	int mag = equipped; // current weapon # 
	
	talker = false;	
	
	for(looper = 20;looper<20;looper++) // clears enemy name from previous use
	{
		enemy.data[looper] = ' ';
	}
	switch(battleType)
	{
		case 1: // regular enemy
		switch(currentLocation)
		{
			case 1:
			switch(rand()%7+1)
			{
				case 1:
				strcpy(enemy.data, "Stranjer");
				enemy.attac = 2+rand()%4+1;
				enemy.lv = floors[0];
				enemy.personality = sad;
				enemy.reflect = rand()%2+(2*floors[0]);
				enemy.speed = rand()%2+1;
				enemy.type = axe;
				enemy.exp = 0;
				enemy.weakness = axe;
				enemy.maxHP = 10+rand()%(2*floors[0])+1;
				enemy.health = enemy.maxHP;
				enemy.look = 7;
				break;
				case 2:
				strcpy(enemy.data, "Lost Spirit");
				enemy.attac = 3+rand()%floors[0]+1;
				enemy.lv = 1+floors[0];
				enemy.personality = angry;
				enemy.reflect = rand()%1+(2*floors[0]);
				enemy.speed = 1;
				enemy.type = gun;
				enemy.exp = 0;
				enemy.weakness = lance;
				enemy.maxHP = 13+rand()%(2*floors[0])+1;
				enemy.health = enemy.maxHP;
				enemy.look = 8;
				break;
				case 3:
				strcpy(enemy.data, "Guard Duck");
				enemy.attac = rand()%floors[0]+1;
				enemy.lv = 1+floors[0];
				enemy.personality = neutral;
				enemy.reflect = rand()%floors[0]+1;
				enemy.speed = rand()%3+1;
				enemy.type = bow;
				enemy.exp = 0;
				enemy.weakness = gun;
				enemy.maxHP = 14+rand()%(2*floors[0])+1;
				enemy.health = enemy.maxHP;
				enemy.look = 11;
				break;
				case 4:
				strcpy(enemy.data, "Willful Wisp");
				enemy.attac = 2+rand()%5+1;
				enemy.lv = 2;
				enemy.personality = happy;
				enemy.reflect = rand()%2+1;
				enemy.speed = rand()%2+1;
				enemy.type = axe;
				enemy.exp = 0;
				enemy.weakness = sword;
				enemy.maxHP = 16+rand()%(2*floors[0])+1;
				enemy.health = enemy.maxHP;
				enemy.look = 10;
				break;
				case 5:
				strcpy(enemy.data, "Pengo");
				enemy.attac = rand()%6+floors[0];
				enemy.lv = 1+floors[0];
				enemy.personality = bossy;
				enemy.reflect = rand()%2+floors[0];
				enemy.speed = rand()%3+floors[0];
				enemy.type = sword;
				enemy.exp = 0;
				enemy.weakness = gun;
				enemy.maxHP = 17+rand()%(2*floors[0])+1;
				enemy.health = enemy.maxHP;
				enemy.look = M7;
				break;
				case 6:
				strcpy(enemy.data,"Brass");
				enemy.attac = 4+rand()%4+floors[0];
				enemy.lv = 1+floors[0];
				enemy.personality = angry;
				enemy.reflect = rand()%6+1;
				enemy.speed = rand()%3+1;
				enemy.type = axe;
				enemy.exp = 0;
				enemy.weakness = lance;
				enemy.maxHP = 11+rand()%(2*floors[0])+1;
				enemy.health = enemy.maxHP;
				enemy.look = M8;
				break;
				case 7:
				strcpy(enemy.data,"Starip");
				enemy.attac = rand()%floors[0]+1;
				enemy.lv = floors[0];
				enemy.personality = bossy;
				enemy.reflect = rand()%3+floors[0];
				enemy.speed = 1+rand()%floors[0];
				enemy.type = combo;
				enemy.exp = 0;
				enemy.weakness = sword;
				enemy.maxHP = 16+rand()%(2*floors[0])+1;
				enemy.health = enemy.maxHP;
				enemy.look = M6;	
				break;
				case 8:	
				strcpy(enemy.data,"Gummo");
				enemy.attac = rand()%floors[0]+2;
				enemy.lv = 3+floors[0];
				enemy.personality = happy;
				enemy.reflect = rand()%5+floors[0];
				enemy.speed = rand()%6+floors[0];
				enemy.type = lance;
				enemy.exp = 0;
				enemy.weakness = axe;
				enemy.maxHP = 11+rand()%(2*floors[0])+1;
				enemy.health = enemy.maxHP;
				enemy.look = M9;	
				break;
			}
			break;
			case 2:
			switch(rand()%6+1)
			{
				case 1:
				strcpy(enemy.data, "Lost Hero");
				enemy.look = M12;
				enemy.attac = rand()%(5+(2*floors[1]))+8;
				enemy.lv = 4;
				enemy.personality = foolish;
				enemy.reflect = rand()%4+9;
				enemy.speed = rand()%7+10;
				enemy.type = sword;
				enemy.exp = 0;
				enemy.weakness = bow;
				enemy.maxHP = 100+rand()%(2*floors[1])+1;
				enemy.health = enemy.maxHP;
				break;
				case 2:
				strcpy(enemy.data, "Micronos");
				enemy.look = M13;
				enemy.attac = rand()%7+12;
				enemy.lv = 4;
				enemy.personality = happy;
				enemy.reflect = rand()%4+3;
				enemy.speed = rand()%7+12;
				enemy.type = axe;
				enemy.exp = 0;
				enemy.weakness = lance;
				enemy.maxHP = 90+rand()%(2*floors[1])+1;
				enemy.health = enemy.maxHP;
				break;
				case 3:
				strcpy(enemy.data, "Diasnak");
				enemy.look = M14;
				enemy.attac = rand()%10+3;
				enemy.lv = 4;
				enemy.personality = angelic;
				enemy.reflect = rand()%10+3;
				enemy.speed = rand()%7+12;
				enemy.type = axe;
				enemy.exp = 0;
				enemy.weakness = lance;
				enemy.maxHP = 110+rand()%(2*floors[1])+1;
				enemy.health = enemy.maxHP;
				break;
				case 4:
				strcpy(enemy.data, "Wanderer");
				enemy.look = M15;
				enemy.attac = rand()%10+3;
				enemy.lv = 4;
				enemy.personality = demonic;
				enemy.reflect = rand()%10+3;
				enemy.speed = rand()%10+12;
				enemy.type = lance;
				enemy.exp = 0;
				enemy.weakness = axe;
				enemy.maxHP = 95+rand()%(2*floors[1])+1;
				enemy.health = enemy.maxHP;
				break;
				case 5:
				strcpy(enemy.data, "Diaman");
				enemy.look = M16;
				enemy.attac = rand()%8+3;
				enemy.lv = 4;
				enemy.personality = angelic;
				enemy.reflect = rand()%9+3;
				enemy.speed = rand()%2+12;
				enemy.type = sword;
				enemy.exp = 0;
				enemy.weakness = lance;
				enemy.maxHP = 115+rand()%(2*floors[1])+1;
				enemy.health = enemy.maxHP;
				break;
				case 6:
				strcpy(enemy.data, "Revenge");
				enemy.look = M17;
				enemy.attac = rand()%15+3;
				enemy.lv = 4;
				enemy.personality = foolish;
				enemy.reflect = rand()%5+3;
				enemy.speed = rand()%7+16;
				enemy.type = axe;
				enemy.exp = 0;
				enemy.weakness = axe;
				enemy.maxHP = 85+rand()%(2*floors[1])+1;
				enemy.health = enemy.maxHP;
				break;
			}	
			break;
		}
		enemy.attac += rand()%level+1;
		enemy.reflect += rand()%level+1;
		enemy.speed += rand()%level+1;
		enemy.maxHP += rand()%level+1;
		enemy.health = enemy.maxHP;
		break;
		case 2: // boss1
		strcpy(enemy.data, "Gila");
		enemy.attac = 13;
		enemy.lv = 5;
		enemy.personality = boss1;
		enemy.reflect = 10;
		enemy.speed = 10;
		enemy.type = lance;
		enemy.exp = 0;
		enemy.weakness = axe;
		enemy.maxHP = 95;
		enemy.health = enemy.maxHP;
		enemy.look = M10;
		enemy.humanPerson = true;
		break;
		case 3: // guard		
		strcpy(enemy.data, "Guard");
		enemy.attac = 5;
		enemy.lv = 2;
		enemy.personality = 0;
		enemy.reflect = 3;
		enemy.speed = 5;
		enemy.type = sword;
		enemy.exp = 0;
		enemy.weakness = axe;
		enemy.maxHP = 45;
		enemy.health = enemy.maxHP;
		enemy.look = 9;
		enemy.humanPerson = true;
		break;
		case 4: // garland
		strcpy(enemy.data, "Garland");
		enemy.attac = 6;
		enemy.lv = 4;
		enemy.personality = 0;
		enemy.reflect = 3;
		enemy.speed = 6;
		enemy.type = lance;
		enemy.exp = 0;
		enemy.weakness = axe;
		enemy.maxHP = 50;
		enemy.health = enemy.maxHP;
		enemy.look = THE_TEST;
		enemy.humanPerson = true;
		break;
	}
	enemyDodger = rand()%5+1;
	if(battleType == 1)
		printf("\nA fight began! You ran into a %s",enemy.data);
	else if(battleType == 2)
		printf("\nKnight:\"My name is Gila, prepare yourself %s.\"",name);
	else
		printf("\n%s got ready to strike",enemy.data);	
	printf("\nPress Enter");
	getchar();
	printBattle();
	while(health > 0 && enemy.health > 0)
	{
		updateHealth();
		if(enemy.speed > agility && enemy.health > 0)
		{
			enemyInput(battleType);
			if(health > 0)
			{
				printf("\n%s HP:%d",enemy.data,enemy.health);
				printf("\nCurrent Weapon:%s",storage[mag].label);
				if(storage[mag].type == gun || storage[mag].type == bow || storage[mag].type == combo && storage[mag].chamber != 0)
				{
					printf("\nAmmunition:%d",ammunition);
				}
				input = playerInput(mag);
				if(input == 1) // when the weapon is switched
				{
					equipWeapon();
					mag = equipped;
					system("cls");
					printBattle();
				}	
			}	
		}
		else if(enemy.health > 0)
		{
			printf("\n%s HP:%d",enemy.data,enemy.health);
			printf("\nCurrent Weapon:%s",storage[mag].label);
			if(storage[mag].type == gun || storage[mag].type == bow || storage[mag].type == combo && storage[mag].chamber != 0)
			{
				printf("\nAmmunition:%d",ammunition);
			}	
			input = playerInput(mag);
			if(input == 1) // when the weapon is switched
			{
				equipWeapon();
				mag = equipped;
				system("cls");
				printBattle();
			}
			else if(enemy.health <= 0)
			{
				goto victory;
			}
			else
				enemyInput(battleType);
		}
	}
	talkedThis = false;
	victory:
	drakeTransform = false;
	if(health > 0) // if the player won
	{	
		if(talker == false)
		{
			adder = enemy.lv*2+enemy.maxHP%maxHealth;
			if(fortune == 10)
			{
				adder = adder + (rand()%level+1)*10+1;
			}
			experience = experience + adder;
			for(a=0;a<20;a++)
			{
				if(monsterThere(a) == true)
				{
					if(inbox[a].personality == hired && inbox[a].health <= 0)
					{
						printf("%s disappeared!? Where did they go?",inbox[a].data);
						preEnter();
						deleteMember(a);
					}
					inbox[a].exp = inbox[a].exp + adder;
				}			
			}
			system("cls");
			printf("\nVictory!");
			printf("\n%s and everyone earned %d xp",name,adder);
			preEnter();
			if(experience >= maxXP) // if the player leveled up
			{
				levelUp(0);
			}
			for(a=0;a<3;a++) // if a party member leveled up
			{
				pep = party[a];
				if(partyMemberHere(a) && pep != recentMember)
				{	
					if(inbox[pep].exp >= inbox[pep].maxExp)
					{
						levelUp(a+1);
					}
				}
			}	
		}
		else
		{
			system("cls");
			printf("\nVictory!");
			preEnter();
		}	
	}
	else // if the player lost
	{
		gameOver();
	}
	recentMember = -1;
}	

void restoreHealth() // restores everyone's health
{
	int a;
	for(a=0;a<20;a++)
	{
		if(monsterThere(a) == true)
			inbox[a].health = inbox[a].maxHP;
	}
	health = maxHealth;
}	

void setUp() // the beginning of the demo
{
	int input;
	int looper;
	int selection = 1;
	int statStart = 6;
	bool doneDeal = false;
	int randPicker = 0;
	int x;
	
	srand((unsigned)time(NULL));
	
	equipped = 0;
	
	plasmaLv = 1; // the plasma spell lv
	magicSwordLv = 1; // the magic sword spell lv
	aid = 1; // the aid spell lv
	createSprtlv = 1; // the create spirit lv
	attack = 0;
	defense = 0;
	agility = 0;
	
	system("cls");
	printPattern(START,80,15);
	printf("\nAn unfamiliar voice calls out to you from the void");
	preEnter();
	printf("\nVoice: \"Spirits can you hear me? Tell me your name.\"");
	printf("\nCall out your name:");
	scanf("%s",name);
	whoops:
	system("cls");
	printf("\nDo you want to set up your stats or leave them at their");
	printf("\ndefault stats?");
	demonKind = false;
	sparedFoes = 0;
	visitedBack = false;
	gilaSpare = false;
	switch(options("","Set up stats","Have stats randomly generated","","",2,0,5))
	{
		case 1:
		system("cls");	
		printf("\n Voice: \"Spirit, please tell what's hidden within you.\"");
		printf("\nPress right to increase the stat by 1 and left to decrease it.");
		printf("\nWhen you are done please press the escape key.");
		while(doneDeal == false)
		{
			for(looper = 1;looper<4;looper++)
				printAt(' ',0,looper+5);
			printString("   ",8,5);
			printStat("Points",statStart,1,5);
			printAt('>',0,selection+5);
			printStat(" Attack",attack,1,6);
			printStat("Defense",defense,1,7);
			printStat("Agility",agility,1,8);
			input = getch();
			switch(input)
			{
				case 72:
				if(selection!= 1)
					selection--;
				break;
				case 80:
				if(selection != 3)
					selection++;
				break;
				case 77:
				if(statStart!= 0)
				{
					statStart = statStart - 1;
					switch(selection)
					{
						case 1:
						attack++;
						break;
						case 2:
						defense++;
						break;
						case 3:
						agility++;
						break;
					}	
				}
				break;
				case 75:
				if(statStart != 9)
				{	
					switch(selection)
					{
						case 1:
						if(attack != 0)
						{
							statStart = statStart + 1;
								attack--;
						}
						break;
						case 2:
						if(defense != 0)
						{
							statStart = statStart + 1;
							defense--;
						}
						break;	
						case 3:
						if(agility!=0)
						{
							statStart = statStart + 1;
							agility--;	
						}
						break;
					}
				}
				break;
				case 27:
				nono:
				system("cls");
				printf("\nAre you done?(y/n):");
				input = getch();
				switch(input)
				{
					case 'y':
						doneDeal = true;
					break;
					case 'n':
					system("cls");
					printf("\n Voice: \"Spirit, please tell what's hidden within you.\"");
					printf("\nPress right to increase the stat by 1 and left to decrease it.");
					printf("\nWhen you are done please press the escape key.");
					break;
					default:
					goto nono;
					break;
				}
				break;
			}
			for(looper = 1;looper<4;looper++)
				printString("  ",9,looper+5);
		}	
		break;
		case 2:
		printf("\nYou some sort of power enter through you...");
		preEnter();
		dumbJared:
		while(statStart > 0)
		{
			randPicker = rand()%2+1;
			if(attack == 0)
			{
				attack = attack + randPicker;
			}
			else if(defense == 0)
			{
				defense = defense + randPicker;
			}
			else if(agility == 0)
			{
				agility = agility + randPicker;
			}
			else
			{
				switch(rand()%3+1)
				{
					case 1:
					attack = attack + randPicker;
					break;
					case 2:
					defense = defense + randPicker;
					break;
					case 3:
					agility = agility + randPicker;
					break;
				}
			}
			statStart = statStart - randPicker;
		}
		system("cls");
		printf("Attack:%d",attack);
		printf("\nDefense:%d",defense);
		printf("\nAgility:%d",agility);
		switch(options("Are these stats fine?","Yes","No","","",2,0,6))
		{
			case 1:
			break;
			case 2:
			statStart = attack+defense+agility;
			attack =0;defense = 0;agility = 0;
			system("cls");
			goto dumbJared;
			break;
		}
		break;
	}	
	system("cls");
	printf("\nYou felt yourself waking up...");
	preEnter();
	
	money = 100;
	level = 1;
	ammunition = 20;
	maxHealth = defense+agility+20;
	maxXP = maxHealth + attack;
	health = maxHealth;
	chapter = 1;
	area = 1;
	day = 1;
	
	storage[0].type = sword; 
	strcpy(storage[0].label,"Wooden Sword");
	storage[0].chamber = 0;
	storage[0].ATT = 2;
	storage[0].value = 10;
	
	storage[1].type = lance;
	strcpy(storage[1].label,"Wooden Lance");
	storage[1].ATT = 2;
	storage[1].value = 10;
	storage[1].chamber = 0;
	
	storage[2].type = axe;
	strcpy(storage[2].label,"Wooden Axe");
	storage[2].ATT = 2;
	storage[2].value = 10;
	storage[2].chamber = 0;
	
	storage[3].type = gun;
	strcpy(storage[3].label, "Six Shooter");
	storage[3].chamber = 6;
	storage[3].ATT = 2;
	storage[3].value = 10;
	
	system("cls");
	for(x = 0;x<4;x++)
		storage[x].lvl = 1;
}	

int storageCount() // returns the amount of weapons the player has
{
	int x;
	int counter = 0;
	for(x=0;x<10;x++)
	{
		if(weaponHere(x) == true)
			counter++;
	}
	return counter;
}

void equipWeapon() // for when selecting a weapon to equip
{
	int input = 0;
	int inputb;
	int x;
	int z = 0;
	int y = 15;
	bool done = false; // is the player done with selling?
	bool doney = false; // does the player really want to sell that weapon?
	system("cls");
	
	printWeapons();
	setCursor(0,40);
	printf("\nCurrent Equipped Weapon:%s",storage[equipped].label);
	printf("\nPress escape to exit or enter to select a weapon");
	while(done == false)
	{
		printString("^^^^^^^^^^^^^^^",z,y);
		switch(getch())
		{
			case 72:
			if(y != 15)
			{
				printString("                ",z,y);
				y = y - 15;
				input = input - 5;
			}
			break;
			case 75:
			if(z != 0)
			{
				printString("                ",z,y);
				z = z - 15;
				input = input - 1;
			}
			break;
			case 80:
			if(y != 30)
			{
				printString("                ",z,y);
				y = y + 15;
				input = input + 5;
			}
			break;
			case 77:
			if(z != 60)
			{
				printString("                ",z,y);
				z = z + 15;
				input = input + 1;	
			}	
			break;
			case 13:
			setCursor(0,35);
			if(weaponHere(input) == true && input != equipped)
			{
				while(doney == false)
				{
					printf("\nAre you sure you want to equip the %s?(y/n):",storage[input].label);
					switch(options("","Yes","No","","",2,0,37))
					{
						case 1:
						equipped = input;
						done = true;
						case 2:
						doney = true;
						break;
					}
				}	
				doney = false;
			}		
			else if(input == equipped)
			{
				printf("\nYou already have that weapon equipped!");
				preEnter();
			}
			else	
			{
				printf("\nA weapon isn't there!");
				preEnter();
			}
			for(x = 0;x<5;x++)
			{
				printString("                                                      ",0,x+35);
			}
			break;
			case 27:
			done = true;
			break;	
		}
	}
}

void seller() // for selling weapons
{
	int input = 0;
	int inputb;
	int x;
	int z = 0;
	int y = 15;
	bool done = false; // is the player done with selling?
	bool doney = false; // does the player really want to sell that weapon?
	int gamer = 0;
	
	system("cls");
	printWeapons();
	if(storageCount() == 1)
	{
		printf("\nYou only have one weapon... Better not sell it...");
		preEnter();
		goto scream;
	}
	while(done == false)
	{
		setCursor(0,32);
		printf("\nCASH:%d",money);
		printf("\nWhich weapon do you want to sell? \n(Press escape to exit or enter to select a weapon)");
		printString("^^^^^^^^^^^^^^^",z,y);
		switch(getch())
		{
			case 72:
			if(y != 15)
			{
				printString("                ",z,y);
				y = y - 15;
				input = input - 5;
			}
			break;
			case 75:
			if(z != 0)
			{
				printString("                ",z,y);
				z = z - 15;
				input = input - 1;
			}
			break;
			case 80:
			if(y != 30)
			{
				printString("                ",z,y);
				y = y + 15;
				input = input + 5;
			}
			break;
			case 77:
			if(z != 60)
			{
				printString("                ",z,y);
				z = z + 15;
				input = input + 1;	
			}	
			break;
			case 13:
			setCursor(0,35);
			if(weaponHere(input) == true && storageCount() != 1)
			{
				if(input == equipped)
				{
					gamer = 0;
					while(weaponHere(gamer) == false && gamer != equipped)
					{
						gamer++;
					}
					equipped = gamer;
				}
				while(doney == false)
				{
					printf("\nAre you sure you want to sell the %s?(y/n):",storage[input].label);
					inputb = getch();
					if(inputb == 'y')
					{
						money = money + storage[input].value;
						deleteWeapon(input);
						doney = true;
						system("cls");
						printWeapons();
					}
					else if(inputb == 'n')
					{
						doney = true;
					}	
				}	
				doney = false;
			}		
			else if(storageCount() == 1)
			{
				printf("\nYou only have one weapon left!");
				preEnter();
			}
			else	
			{
				printf("\nA weapon isn't there!");
				preEnter();
			}
			for(x = 0;x<5;x++)
			{
				printString("                                                      ",0,x+35);
			}
			break;
			case 27:
			done = true;
			break;	
		}
	}
	scream:
	system("cls");
	if(weaponHere(equipped) == false)
	{
		gamer = 0;
		while(weaponHere(gamer) == false)
		{
			gamer++;
		}
		equipped = gamer;
	}
}	
	
void printStatus() // prints the stats of the player
{
	printf("\nCURRENT STATUS:");
	printf("\nName:%s",name);
	printf("\nLEVEL:%d",level);
	printf("\nHEALTH: %d/%d",health,maxHealth);
	printf("\nATTACK:%d",attack);
	printf("\nAMMUNITION:%d",ammunition);
	printf("\nDEFENSE:%d",defense);
	printf("\nCASH:%d",money);
	printf("\nXP %d/%d",experience,maxXP);
	printf("\nAGILITY:%d",agility);
	printf("\nPERSONALITY:");
	if(good > neutral && good > evil)
	{
		if(evil > neutral)
		{
			printf("Bright");
		}
		else
		{
			printf("Optimist");
		}
	}
	else if(evil > good && evil > neutral)
	{
		if(good > neutral)
		{
			printf("Complex");
		}
		else
		{
			printf("Harsh");
		}
	}
	else if(neutral > evil && neutral > good)
	{
		if(good > evil)
		{
			printf("Mysteriously Caring");
		}
		else
		{
			printf("Mysterious");
		}
	}
	else
	{
		printf("UNKNOWN");
	}
	printf("\nWEAKNESS:");
	switch(weakness)
	{
		case sword:
		printf("SWORDS");
		break;
		case lance:
		printf("LANCES");
		break;
		case gun:
		printf("GUNS");
		break;
		case bow:
		printf("BOWS");
		break;
		case axe:
		printf("AXES");
		break;
		case combo:
		printf("COMBINATION WEAPONS");
		break;
	}	
	printf("\n");
}	

bool inParty(int monster) // checks if the monster is in the party
{
	int x;
	for(x=0;x<3;x++)
	{
		if(monster == party[x])
			return true;
	}
	return false;
}

void partyPlanner() // used for moving around party members
{
	bool done = false;
	int input = 0;
	int inputb = 0;
	int z = 0;
	int y = 8;
	int loop;
	
	system("cls");
	printParty();
	while(done == false)
	{
		printString("^^^^^^^^",z,y);
		setCursor(0,30);
		printf("\nWhich # monster do you want to summon into the party?\n(Enter the monster # or enter escape to exit)");
		switch(getch())
		{
			case 72: // up
			if(y!=8)
			{
				input = input - 8;
				printString("        ",z,y);
				y-=9;
			}
			break;
			case 77: // right
			if(z< 63)
			{
				input = input + 1;
				printString("        ",z,y);
				z+=9;
			}
			break;
			case 80: // down
			if(y<18)
			{
				input = input + 8;
				printString("        ",z,y);
				y+=9;
			}
			break;
			case 75: // left
			if(z> 0)
			{
				input = input - 1;
				printString("        ",z,y);
				z-=9;
			}
			break;
			case 27: // escape
			done = true;
			system("cls");
			break;
			case 13: // enter
			if(monsterThere(input) == false)
			{
				printf("\nThat monster does not exist...");
				preEnter();
				system("cls");
			}
			else if(inParty(input) == true)
			{
				printf("\nYou cannot move a party member to a new position");
				preEnter();
			}
			else
			{
				printf("\nWhich # in the party will they be in?(1,2, or 3)");
				scanf("%d",&inputb);
				switch(inputb)
				{
					case 1:
					party[0] = input;
					break;
					case 2:
					party[1] = input;
					break;
					case 3:
					party[2] = input;
					break;
					default:
					break;
				}
				system("cls");
				printParty();
			}
			for(loop=0;loop<10;loop++)
			{
				printString("                                                                                           ",0,loop+30);
			}
			break;
		}	
	}
}

void menu() // the menu system
{
	int input; // input from the player
	bool doner; // is the player done with being in the menu?
	int x;
	int adder;
	
	srand((unsigned)time(NULL));
	goofy:
	system("cls");
	switch(options("What do you want to look at?","Equip a weapon","Set up camp (Sleep and save the game)","Extra Commands","Exit",4,0,2))
	{
		case 1: // weapons
		equipWeapon();
		break;
		case 2:
		system("cls");
		if(food >= 1)
		{
			adder = rand()%health+food;
			health = health + adder;
			maxHealth = maxHealth + rand()%1;
			if(health > maxHealth)
			{
				health = maxHealth;
			}
			food = food - 1;
			printf("You ate well and restored health as you slept...");
			preEnter();
		}
		else
		{
			printf("You were hungry as you slept...");
			preEnter();
		}
		system("cls");
		timee = 6;
		day = day + 1;
		saveFile();
		dreaming();
		system("cls");
		getFortune();
		system("cls");
		peopleSetting();
		break;
		case 3:
		system("cls");
		switch(options("What extra command would you like to perform?","Organize Party","Look at my stats","Use a Defensive Spell","Exit",4,0,2))
		{
			case 1:
			system("cls");
			partyPlanner();
			break;
			case 2:
			system("cls");
			printStatus();
			preEnter();
			break;
			case 3:
			system("cls");
			printf("\nHealth: %d/%d",health,maxHealth);
			setCursor(0,3);
			printf(" Aid: Level %d       | MaxHP Cost: %d",aid,maxHealth%2+1);
			printf("\n Create Spirit: Level %d  | HP Cost:10",createSprtlv);
			switch(options("Which defense spell do you want to use?","","","Fusion","Go Back",4,0,2))
			{
				case 1:
				clearBox();	
				if(maxHealth > maxHealth%2+1)
				{
					maxHealth = maxHealth - (maxHealth%2+1);	
					restoreHealth();
				}
				else
				{
					printf("You don't have enough max health for this!");
					preEnter();
					system("cls");
					goto goofy;
				}
				break;
				case 2:
				clearBox();
				if(inboxFull() == true)
				{
					printf("You can't summon an extra member because your inbox is full");
					preEnter();
					system("cls");
					goto goofy;
				}
				else
				{
					health = health - 10;
					addSpirit(health%10+attack,health%10+attack,createSprtlv+rand()%level+1,createSprtlv+rand()%level+1,createSprtlv+rand()%level+1,level,experience,maxXP,neutral,enemy.type,storage[equipped].type);
				}
				break;
				case 3:
				fusion();
				break;
				case 4:
				system("cls");
				goto goofy;
				break;
			}	
			break;
			case 4:
			system("cls");
			goto goofy;
			break;
		}
		break;
		case 4:
		system("cls");
		break;
	}	
}

void ammoo() // for buying ammunition
{
	bool doner = false;
	int buyAmmo = 0;
	int cost;
	int input;
	setCursor(0,22);
	while(doner == false)
	{
		printString("                                 ",0,27);
		setCursor(0,22);
		cost = buyAmmo * level + (level*buyAmmo);
		printf("\nCurrent Cash on Hand:%d",money);
		printf("\nCurrent Ammunition:%d",ammunition);
		printf("\nHow much ammunition do you want to buy? \n(Press left to decrease and right to increase, when you are done press escape):");
		printf("\nAmmunition to buy:%d cost: $%d",buyAmmo,cost);
		input = getch();
		switch(input)
		{
			case 75:
			if(buyAmmo != 0)
				buyAmmo = buyAmmo - 1;
			break; 
			case 77:
			buyAmmo = buyAmmo + 1;	
			break;
			case 27:
			if(cost <= money)
				doner = true;
			break;
		}
	}
	money = money - cost;
	ammunition = ammunition + buyAmmo;
}

bool westlandInParty() // is Westland in the party?
{
	int x;
	for(x=0;x<20;x++)
	{
		if(strcmp(inbox[x].data,"Westland") == true && inbox[x].humanPerson == true)
		{
			return true;
		}	
	}	
	return false;
}

bool gilaInParty() // is Gila in the party?
{
	int x;
	for(x=0;x<20;x++)
	{
		if(strcmp(inbox[x].data,"Gila") == true && inbox[x].humanPerson == true)
		{
			return true;
		}	
	}	
	return false;
}
